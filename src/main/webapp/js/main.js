!function(n){var e={};function t(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return n[i].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var s in n)t.d(i,s,function(e){return n[e]}.bind(null,s));return i},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s="./src/js/main.js")}({"./src/js/fancybox.umd.js":
/*!********************************!*\
  !*** ./src/js/fancybox.umd.js ***!
  \********************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('// @fancyapps/ui/Fancybox v4.0.24\n!function (t, e) {\n   true ? e(exports) : undefined;\n}(this, function (t) {\n  "use strict";\n\n  function e(t, e) {\n    var i = Object.keys(t);\n\n    if (Object.getOwnPropertySymbols) {\n      var n = Object.getOwnPropertySymbols(t);\n      e && (n = n.filter(function (e) {\n        return Object.getOwnPropertyDescriptor(t, e).enumerable;\n      })), i.push.apply(i, n);\n    }\n\n    return i;\n  }\n\n  function i(t) {\n    for (var i = 1; i < arguments.length; i++) {\n      var n = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? e(Object(n), !0).forEach(function (e) {\n        r(t, e, n[e]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : e(Object(n)).forEach(function (e) {\n        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));\n      });\n    }\n\n    return t;\n  }\n\n  function n(t) {\n    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {\n      return typeof t;\n    } : function (t) {\n      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;\n    }, n(t);\n  }\n\n  function o(t, e) {\n    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");\n  }\n\n  function a(t, e) {\n    for (var i = 0; i < e.length; i++) {\n      var n = e[i];\n      n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);\n    }\n  }\n\n  function s(t, e, i) {\n    return e && a(t.prototype, e), i && a(t, i), Object.defineProperty(t, "prototype", {\n      writable: !1\n    }), t;\n  }\n\n  function r(t, e, i) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: i,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = i, t;\n  }\n\n  function l(t, e) {\n    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(t, "prototype", {\n      writable: !1\n    }), e && h(t, e);\n  }\n\n  function c(t) {\n    return c = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, c(t);\n  }\n\n  function h(t, e) {\n    return h = Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    }, h(t, e);\n  }\n\n  function d(t) {\n    if (void 0 === t) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n    return t;\n  }\n\n  function u(t, e) {\n    if (e && ("object" == typeof e || "function" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");\n    return d(t);\n  }\n\n  function f(t) {\n    var e = function () {\n      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;\n      if (Reflect.construct.sham) return !1;\n      if ("function" == typeof Proxy) return !0;\n\n      try {\n        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n      } catch (t) {\n        return !1;\n      }\n    }();\n\n    return function () {\n      var i,\n          n = c(t);\n\n      if (e) {\n        var o = c(this).constructor;\n        i = Reflect.construct(n, arguments, o);\n      } else i = n.apply(this, arguments);\n\n      return u(this, i);\n    };\n  }\n\n  function v(t, e) {\n    for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = c(t)););\n\n    return t;\n  }\n\n  function p() {\n    return p = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, i) {\n      var n = v(t, e);\n\n      if (n) {\n        var o = Object.getOwnPropertyDescriptor(n, e);\n        return o.get ? o.get.call(arguments.length < 3 ? t : i) : o.value;\n      }\n    }, p.apply(this, arguments);\n  }\n\n  function g(t) {\n    throw new TypeError(\'"\' + t + \'" is read-only\');\n  }\n\n  function m(t, e) {\n    return function (t) {\n      if (Array.isArray(t)) return t;\n    }(t) || function (t, e) {\n      var i = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];\n      if (null == i) return;\n      var n,\n          o,\n          a = [],\n          s = !0,\n          r = !1;\n\n      try {\n        for (i = i.call(t); !(s = (n = i.next()).done) && (a.push(n.value), !e || a.length !== e); s = !0);\n      } catch (t) {\n        r = !0, o = t;\n      } finally {\n        try {\n          s || null == i.return || i.return();\n        } finally {\n          if (r) throw o;\n        }\n      }\n\n      return a;\n    }(t, e) || b(t, e) || function () {\n      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n    }();\n  }\n\n  function y(t) {\n    return function (t) {\n      if (Array.isArray(t)) return x(t);\n    }(t) || function (t) {\n      if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);\n    }(t) || b(t) || function () {\n      throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n    }();\n  }\n\n  function b(t, e) {\n    if (t) {\n      if ("string" == typeof t) return x(t, e);\n      var i = Object.prototype.toString.call(t).slice(8, -1);\n      return "Object" === i && t.constructor && (i = t.constructor.name), "Map" === i || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? x(t, e) : void 0;\n    }\n  }\n\n  function x(t, e) {\n    (null == e || e > t.length) && (e = t.length);\n\n    for (var i = 0, n = new Array(e); i < e; i++) n[i] = t[i];\n\n    return n;\n  }\n\n  function w(t, e) {\n    var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];\n\n    if (!i) {\n      if (Array.isArray(t) || (i = b(t)) || e && t && "number" == typeof t.length) {\n        i && (t = i);\n\n        var n = 0,\n            o = function () {};\n\n        return {\n          s: o,\n          n: function () {\n            return n >= t.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: t[n++]\n            };\n          },\n          e: function (t) {\n            throw t;\n          },\n          f: o\n        };\n      }\n\n      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n    }\n\n    var a,\n        s = !0,\n        r = !1;\n    return {\n      s: function () {\n        i = i.call(t);\n      },\n      n: function () {\n        var t = i.next();\n        return s = t.done, t;\n      },\n      e: function (t) {\n        r = !0, a = t;\n      },\n      f: function () {\n        try {\n          s || null == i.return || i.return();\n        } finally {\n          if (r) throw a;\n        }\n      }\n    };\n  }\n\n  var k = function (t) {\n    return "object" === n(t) && null !== t && t.constructor === Object && "[object Object]" === Object.prototype.toString.call(t);\n  },\n      S = function t() {\n    for (var e = !1, i = arguments.length, o = new Array(i), a = 0; a < i; a++) o[a] = arguments[a];\n\n    "boolean" == typeof o[0] && (e = o.shift());\n    var s = o[0];\n    if (!s || "object" !== n(s)) throw new Error("extendee must be an object");\n\n    for (var r = o.slice(1), l = r.length, c = 0; c < l; c++) {\n      var h = r[c];\n\n      for (var d in h) if (h.hasOwnProperty(d)) {\n        var u = h[d];\n\n        if (e && (Array.isArray(u) || k(u))) {\n          var f = Array.isArray(u) ? [] : {};\n          s[d] = t(!0, s.hasOwnProperty(d) ? s[d] : f, u);\n        } else s[d] = u;\n      }\n    }\n\n    return s;\n  },\n      C = function (t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e4;\n    return t = parseFloat(t) || 0, Math.round((t + Number.EPSILON) * e) / e;\n  },\n      $ = function t(e) {\n    return !!(e && "object" === n(e) && e instanceof Element && e !== document.body) && !e.__Panzoom && (function (t) {\n      var e = getComputedStyle(t)["overflow-y"],\n          i = getComputedStyle(t)["overflow-x"],\n          n = ("scroll" === e || "auto" === e) && Math.abs(t.scrollHeight - t.clientHeight) > 1,\n          o = ("scroll" === i || "auto" === i) && Math.abs(t.scrollWidth - t.clientWidth) > 1;\n      return n || o;\n    }(e) ? e : t(e.parentNode));\n  },\n      E = "undefined" != typeof window && window.ResizeObserver || function () {\n    function t(e) {\n      o(this, t), this.observables = [], this.boundCheck = this.check.bind(this), this.boundCheck(), this.callback = e;\n    }\n\n    return s(t, [{\n      key: "observe",\n      value: function (t) {\n        if (!this.observables.some(function (e) {\n          return e.el === t;\n        })) {\n          var e = {\n            el: t,\n            size: {\n              height: t.clientHeight,\n              width: t.clientWidth\n            }\n          };\n          this.observables.push(e);\n        }\n      }\n    }, {\n      key: "unobserve",\n      value: function (t) {\n        this.observables = this.observables.filter(function (e) {\n          return e.el !== t;\n        });\n      }\n    }, {\n      key: "disconnect",\n      value: function () {\n        this.observables = [];\n      }\n    }, {\n      key: "check",\n      value: function () {\n        var t = this.observables.filter(function (t) {\n          var e = t.el.clientHeight,\n              i = t.el.clientWidth;\n          if (t.size.height !== e || t.size.width !== i) return t.size.height = e, t.size.width = i, !0;\n        }).map(function (t) {\n          return t.el;\n        });\n        t.length > 0 && this.callback(t), window.requestAnimationFrame(this.boundCheck);\n      }\n    }]), t;\n  }(),\n      P = s(function t(e) {\n    o(this, t), this.id = self.Touch && e instanceof Touch ? e.identifier : -1, this.pageX = e.pageX, this.pageY = e.pageY, this.clientX = e.clientX, this.clientY = e.clientY;\n  }),\n      T = function (t, e) {\n    return e ? Math.sqrt(Math.pow(e.clientX - t.clientX, 2) + Math.pow(e.clientY - t.clientY, 2)) : 0;\n  },\n      L = function (t, e) {\n    return e ? {\n      clientX: (t.clientX + e.clientX) / 2,\n      clientY: (t.clientY + e.clientY) / 2\n    } : t;\n  },\n      _ = function (t) {\n    return "changedTouches" in t;\n  },\n      A = function () {\n    function t(e) {\n      var i = this,\n          n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          a = n.start,\n          s = void 0 === a ? function () {\n        return !0;\n      } : a,\n          r = n.move,\n          l = void 0 === r ? function () {} : r,\n          c = n.end,\n          h = void 0 === c ? function () {} : c;\n      o(this, t), this._element = e, this.startPointers = [], this.currentPointers = [], this._pointerStart = function (t) {\n        if (1 & t.buttons) {\n          var e = new P(t);\n          i.currentPointers.some(function (t) {\n            return t.id === e.id;\n          }) || i._triggerPointerStart(e, t) && (window.addEventListener("mousemove", i._move, {\n            passive: !1\n          }), window.addEventListener("mouseup", i._pointerEnd, {\n            passive: !1\n          }));\n        }\n      }, this._touchStart = function (t) {\n        for (var e = 0, n = Array.from(t.changedTouches || []); e < n.length; e++) {\n          var o = n[e];\n\n          i._triggerPointerStart(new P(o), t);\n        }\n      }, this._move = function (t) {\n        var e,\n            n = i.currentPointers.slice(),\n            o = _(t) ? Array.from(t.changedTouches).map(function (t) {\n          return new P(t);\n        }) : [new P(t)],\n            a = [],\n            s = w(o);\n\n        try {\n          var r = function () {\n            var t = e.value,\n                n = i.currentPointers.findIndex(function (e) {\n              return e.id === t.id;\n            });\n            if (n < 0) return "continue";\n            a.push(t), i.currentPointers[n] = t;\n          };\n\n          for (s.s(); !(e = s.n()).done;) r();\n        } catch (t) {\n          s.e(t);\n        } finally {\n          s.f();\n        }\n\n        i._moveCallback(n, i.currentPointers.slice(), t);\n      }, this._triggerPointerEnd = function (t, e) {\n        if (!_(e) && 1 & e.buttons) return !1;\n        var n = i.currentPointers.findIndex(function (e) {\n          return e.id === t.id;\n        });\n        return !(n < 0) && (i.currentPointers.splice(n, 1), i.startPointers.splice(n, 1), i._endCallback(t, e), !0);\n      }, this._pointerEnd = function (t) {\n        i._triggerPointerEnd(new P(t), t) && (window.removeEventListener("mousemove", i._move), window.removeEventListener("mouseup", i._pointerEnd));\n      }, this._touchEnd = function (t) {\n        for (var e = 0, n = Array.from(t.changedTouches || []); e < n.length; e++) {\n          var o = n[e];\n\n          i._triggerPointerEnd(new P(o), t);\n        }\n      }, this._startCallback = s, this._moveCallback = l, this._endCallback = h, this._element.addEventListener("mousedown", this._pointerStart, {\n        passive: !0\n      }), this._element.addEventListener("touchstart", this._touchStart, {\n        passive: !0\n      }), this._element.addEventListener("touchmove", this._move, {\n        passive: !1\n      }), this._element.addEventListener("touchend", this._touchEnd), this._element.addEventListener("touchcancel", this._touchEnd);\n    }\n\n    return s(t, [{\n      key: "stop",\n      value: function () {\n        this._element.removeEventListener("mousedown", this._pointerStart, {\n          passive: !0\n        }), this._element.removeEventListener("touchstart", this._touchStart, {\n          passive: !0\n        }), this._element.removeEventListener("touchmove", this._move, {\n          passive: !1\n        }), this._element.removeEventListener("touchend", this._touchEnd), this._element.removeEventListener("touchcancel", this._touchEnd), window.removeEventListener("mousemove", this._move, {\n          passive: !1\n        }), window.removeEventListener("mouseup", this._pointerEnd, {\n          passive: !1\n        });\n      }\n    }, {\n      key: "_triggerPointerStart",\n      value: function (t, e) {\n        return !!this._startCallback(t, e) && (this.currentPointers.push(t), this.startPointers.push(t), !0);\n      }\n    }]), t;\n  }(),\n      O = function (t, e) {\n    return t.split(".").reduce(function (t, e) {\n      return t && t[e];\n    }, e);\n  },\n      z = function () {\n    function t() {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      o(this, t), this.options = S(!0, {}, e), this.plugins = [], this.events = {};\n\n      for (var i = 0, n = ["on", "once"]; i < n.length; i++) for (var a = n[i], s = 0, r = Object.entries(this.options[a] || {}); s < r.length; s++) {\n        var l = r[s];\n        this[a].apply(this, y(l));\n      }\n    }\n\n    return s(t, [{\n      key: "option",\n      value: function (t, e) {\n        t = String(t);\n        var i = O(t, this.options);\n\n        if ("function" == typeof i) {\n          for (var n, o = arguments.length, a = new Array(o > 2 ? o - 2 : 0), s = 2; s < o; s++) a[s - 2] = arguments[s];\n\n          i = (n = i).call.apply(n, [this, this].concat(a));\n        }\n\n        return void 0 === i ? e : i;\n      }\n    }, {\n      key: "localize",\n      value: function (t) {\n        var e = this,\n            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];\n        return t = (t = String(t).replace(/\\{\\{(\\w+).?(\\w+)?\\}\\}/g, function (t, n, o) {\n          var a = "";\n          o ? a = e.option("".concat(n[0] + n.toLowerCase().substring(1), ".l10n.").concat(o)) : n && (a = e.option("l10n.".concat(n))), a || (a = t);\n\n          for (var s = 0; s < i.length; s++) a = a.split(i[s][0]).join(i[s][1]);\n\n          return a;\n        })).replace(/\\{\\{(.*)\\}\\}/, function (t, e) {\n          return e;\n        });\n      }\n    }, {\n      key: "on",\n      value: function (t, e) {\n        var i = this;\n\n        if (k(t)) {\n          for (var n = 0, o = Object.entries(t); n < o.length; n++) {\n            var a = o[n];\n            this.on.apply(this, y(a));\n          }\n\n          return this;\n        }\n\n        return String(t).split(" ").forEach(function (t) {\n          var n = i.events[t] = i.events[t] || [];\n          -1 == n.indexOf(e) && n.push(e);\n        }), this;\n      }\n    }, {\n      key: "once",\n      value: function (t, e) {\n        var i = this;\n\n        if (k(t)) {\n          for (var n = 0, o = Object.entries(t); n < o.length; n++) {\n            var a = o[n];\n            this.once.apply(this, y(a));\n          }\n\n          return this;\n        }\n\n        return String(t).split(" ").forEach(function (t) {\n          var n = function n() {\n            i.off(t, n);\n\n            for (var o = arguments.length, a = new Array(o), s = 0; s < o; s++) a[s] = arguments[s];\n\n            e.call.apply(e, [i, i].concat(a));\n          };\n\n          n._ = e, i.on(t, n);\n        }), this;\n      }\n    }, {\n      key: "off",\n      value: function (t, e) {\n        var i = this;\n        if (!k(t)) return t.split(" ").forEach(function (t) {\n          var n = i.events[t];\n          if (!n || !n.length) return i;\n\n          for (var o = -1, a = 0, s = n.length; a < s; a++) {\n            var r = n[a];\n\n            if (r && (r === e || r._ === e)) {\n              o = a;\n              break;\n            }\n          }\n\n          -1 != o && n.splice(o, 1);\n        }), this;\n\n        for (var n = 0, o = Object.entries(t); n < o.length; n++) {\n          var a = o[n];\n          this.off.apply(this, y(a));\n        }\n      }\n    }, {\n      key: "trigger",\n      value: function (t) {\n        for (var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++) i[n - 1] = arguments[n];\n\n        var o,\n            a = w(y(this.events[t] || []).slice());\n\n        try {\n          for (a.s(); !(o = a.n()).done;) {\n            var s = o.value;\n            if (s && !1 === s.call.apply(s, [this, this].concat(i))) return !1;\n          }\n        } catch (t) {\n          a.e(t);\n        } finally {\n          a.f();\n        }\n\n        var r,\n            l = w(y(this.events["*"] || []).slice());\n\n        try {\n          for (l.s(); !(r = l.n()).done;) {\n            var c = r.value;\n            if (c && !1 === c.call.apply(c, [this, t, this].concat(i))) return !1;\n          }\n        } catch (t) {\n          l.e(t);\n        } finally {\n          l.f();\n        }\n\n        return !0;\n      }\n    }, {\n      key: "attachPlugins",\n      value: function (t) {\n        for (var e = {}, i = 0, n = Object.entries(t || {}); i < n.length; i++) {\n          var o = m(n[i], 2),\n              a = o[0],\n              s = o[1];\n          !1 === this.options[a] || this.plugins[a] || (this.options[a] = S({}, s.defaults || {}, this.options[a]), e[a] = new s(this));\n        }\n\n        for (var r = 0, l = Object.entries(e); r < l.length; r++) {\n          var c = m(l[r], 2);\n          c[0], c[1].attach(this);\n        }\n\n        return this.plugins = Object.assign({}, this.plugins, e), this;\n      }\n    }, {\n      key: "detachPlugins",\n      value: function () {\n        for (var t in this.plugins) {\n          var e = void 0;\n          (e = this.plugins[t]) && "function" == typeof e.detach && e.detach(this);\n        }\n\n        return this.plugins = {}, this;\n      }\n    }]), t;\n  }(),\n      M = {\n    touch: !0,\n    zoom: !0,\n    pinchToZoom: !0,\n    panOnlyZoomed: !1,\n    lockAxis: !1,\n    friction: .64,\n    decelFriction: .88,\n    zoomFriction: .74,\n    bounceForce: .2,\n    baseScale: 1,\n    minScale: 1,\n    maxScale: 2,\n    step: .5,\n    textSelection: !1,\n    click: "toggleZoom",\n    wheel: "zoom",\n    wheelFactor: 42,\n    wheelLimit: 5,\n    draggableClass: "is-draggable",\n    draggingClass: "is-dragging",\n    ratio: 1\n  },\n      I = function (t) {\n    l(n, t);\n    var e = f(n);\n\n    function n(t) {\n      var i,\n          a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      o(this, n), (i = e.call(this, S(!0, {}, M, a))).state = "init", i.$container = t;\n\n      for (var s = 0, r = ["onLoad", "onWheel", "onClick"]; s < r.length; s++) {\n        var l = r[s];\n        i[l] = i[l].bind(d(i));\n      }\n\n      return i.initLayout(), i.resetValues(), i.attachPlugins(n.Plugins), i.trigger("init"), i.updateMetrics(), i.attachEvents(), i.trigger("ready"), !1 === i.option("centerOnStart") ? i.state = "ready" : i.panTo({\n        friction: 0\n      }), t.__Panzoom = d(i), i;\n    }\n\n    return s(n, [{\n      key: "initLayout",\n      value: function () {\n        var t = this.$container;\n        if (!(t instanceof HTMLElement)) throw new Error("Panzoom: Container not found");\n        var e = this.option("content") || t.querySelector(".panzoom__content");\n        if (!e) throw new Error("Panzoom: Content not found");\n        this.$content = e;\n        var i,\n            n = this.option("viewport") || t.querySelector(".panzoom__viewport");\n        n || !1 === this.option("wrapInner") || ((n = document.createElement("div")).classList.add("panzoom__viewport"), (i = n).append.apply(i, y(t.childNodes)), t.appendChild(n));\n        this.$viewport = n || e.parentNode;\n      }\n    }, {\n      key: "resetValues",\n      value: function () {\n        this.updateRate = this.option("updateRate", /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? 250 : 24), this.container = {\n          width: 0,\n          height: 0\n        }, this.viewport = {\n          width: 0,\n          height: 0\n        }, this.content = {\n          origWidth: 0,\n          origHeight: 0,\n          width: 0,\n          height: 0,\n          x: this.option("x", 0),\n          y: this.option("y", 0),\n          scale: this.option("baseScale")\n        }, this.transform = {\n          x: 0,\n          y: 0,\n          scale: 1\n        }, this.resetDragPosition();\n      }\n    }, {\n      key: "onLoad",\n      value: function (t) {\n        this.updateMetrics(), this.panTo({\n          scale: this.option("baseScale"),\n          friction: 0\n        }), this.trigger("load", t);\n      }\n    }, {\n      key: "onClick",\n      value: function (t) {\n        if (!t.defaultPrevented) if (this.option("textSelection") && window.getSelection().toString().length) t.stopPropagation();else {\n          var e = this.$content.getClientRects()[0];\n          if ("ready" !== this.state && (this.dragPosition.midPoint || Math.abs(e.top - this.dragStart.rect.top) > 1 || Math.abs(e.left - this.dragStart.rect.left) > 1)) return t.preventDefault(), void t.stopPropagation();\n          !1 !== this.trigger("click", t) && this.option("zoom") && "toggleZoom" === this.option("click") && (t.preventDefault(), t.stopPropagation(), this.zoomWithClick(t));\n        }\n      }\n    }, {\n      key: "onWheel",\n      value: function (t) {\n        !1 !== this.trigger("wheel", t) && this.option("zoom") && this.option("wheel") && this.zoomWithWheel(t);\n      }\n    }, {\n      key: "zoomWithWheel",\n      value: function (t) {\n        void 0 === this.changedDelta && (this.changedDelta = 0);\n        var e = Math.max(-1, Math.min(1, -t.deltaY || -t.deltaX || t.wheelDelta || -t.detail)),\n            i = this.content.scale,\n            n = i * (100 + e * this.option("wheelFactor")) / 100;\n\n        if (e < 0 && Math.abs(i - this.option("minScale")) < .01 || e > 0 && Math.abs(i - this.option("maxScale")) < .01 ? (this.changedDelta += Math.abs(e), n = i) : (this.changedDelta = 0, n = Math.max(Math.min(n, this.option("maxScale")), this.option("minScale"))), !(this.changedDelta > this.option("wheelLimit")) && (t.preventDefault(), n !== i)) {\n          var o = this.$content.getBoundingClientRect(),\n              a = t.clientX - o.left,\n              s = t.clientY - o.top;\n          this.zoomTo(n, {\n            x: a,\n            y: s\n          });\n        }\n      }\n    }, {\n      key: "zoomWithClick",\n      value: function (t) {\n        var e = this.$content.getClientRects()[0],\n            i = t.clientX - e.left,\n            n = t.clientY - e.top;\n        this.toggleZoom({\n          x: i,\n          y: n\n        });\n      }\n    }, {\n      key: "attachEvents",\n      value: function () {\n        var t = this;\n        this.$content.addEventListener("load", this.onLoad), this.$container.addEventListener("wheel", this.onWheel, {\n          passive: !1\n        }), this.$container.addEventListener("click", this.onClick, {\n          passive: !1\n        }), this.initObserver();\n        var e = new A(this.$container, {\n          start: function (i, n) {\n            if (!t.option("touch")) return !1;\n            if (t.velocity.scale < 0) return !1;\n\n            if (!e.currentPointers.length) {\n              if (-1 !== ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(n.target.nodeName)) return !1;\n              if (t.option("textSelection") && function (t, e, i) {\n                for (var n = t.childNodes, o = document.createRange(), a = 0; a < n.length; a++) {\n                  var s = n[a];\n\n                  if (s.nodeType === Node.TEXT_NODE) {\n                    o.selectNodeContents(s);\n                    var r = o.getBoundingClientRect();\n                    if (e >= r.left && i >= r.top && e <= r.right && i <= r.bottom) return s;\n                  }\n                }\n\n                return !1;\n              }(n.target, n.clientX, n.clientY)) return !1;\n            }\n\n            return !$(n.target) && !1 !== t.trigger("touchStart", n) && (t.state = "pointerdown", t.resetDragPosition(), t.dragPosition.midPoint = null, t.dragPosition.time = Date.now(), !0);\n          },\n          move: function (i, n, o) {\n            if ("pointerdown" === t.state) if (!1 !== t.trigger("touchMove", o)) {\n              if (!(n.length < 2 && !0 === t.option("panOnlyZoomed") && t.content.width <= t.viewport.width && t.content.height <= t.viewport.height && t.transform.scale <= t.option("baseScale")) && (!(n.length > 1) || t.option("zoom") && !1 !== t.option("pinchToZoom"))) {\n                var a = L(i[0], i[1]),\n                    s = L(n[0], n[1]),\n                    r = s.clientX - a.clientX,\n                    l = s.clientY - a.clientY,\n                    c = T(i[0], i[1]),\n                    h = T(n[0], n[1]),\n                    d = c && h ? h / c : 1;\n                t.dragOffset.x += r, t.dragOffset.y += l, t.dragOffset.scale *= d, t.dragOffset.time = Date.now() - t.dragPosition.time;\n                var u = 1 === t.dragStart.scale && t.option("lockAxis");\n\n                if (u && !t.lockAxis) {\n                  if (Math.abs(t.dragOffset.x) < 6 && Math.abs(t.dragOffset.y) < 6) return void o.preventDefault();\n                  var f = Math.abs(180 * Math.atan2(t.dragOffset.y, t.dragOffset.x) / Math.PI);\n                  t.lockAxis = f > 45 && f < 135 ? "y" : "x";\n                }\n\n                if ("xy" === u || "y" !== t.lockAxis) {\n                  if (o.preventDefault(), o.stopPropagation(), o.stopImmediatePropagation(), t.lockAxis && (t.dragOffset["x" === t.lockAxis ? "y" : "x"] = 0), t.$container.classList.add(t.option("draggingClass")), t.transform.scale === t.option("baseScale") && "y" === t.lockAxis || (t.dragPosition.x = t.dragStart.x + t.dragOffset.x), t.transform.scale === t.option("baseScale") && "x" === t.lockAxis || (t.dragPosition.y = t.dragStart.y + t.dragOffset.y), t.dragPosition.scale = t.dragStart.scale * t.dragOffset.scale, n.length > 1) {\n                    var v = L(e.startPointers[0], e.startPointers[1]),\n                        p = v.clientX - t.dragStart.rect.x,\n                        g = v.clientY - t.dragStart.rect.y,\n                        m = t.getZoomDelta(t.content.scale * t.dragOffset.scale, p, g),\n                        y = m.deltaX,\n                        b = m.deltaY;\n                    t.dragPosition.x -= y, t.dragPosition.y -= b, t.dragPosition.midPoint = s;\n                  } else t.setDragResistance();\n\n                  t.transform = {\n                    x: t.dragPosition.x,\n                    y: t.dragPosition.y,\n                    scale: t.dragPosition.scale\n                  }, t.startAnimation();\n                } else "mousemove" === o.type && o.preventDefault();\n              }\n            } else o.preventDefault();\n          },\n          end: function (n, o) {\n            if ("pointerdown" === t.state) if (t._dragOffset = i({}, t.dragOffset), e.currentPointers.length) t.resetDragPosition();else if (t.state = "decel", t.friction = t.option("decelFriction"), t.recalculateTransform(), t.$container.classList.remove(t.option("draggingClass")), !1 !== t.trigger("touchEnd", o) && "decel" === t.state) {\n              var a = t.option("minScale");\n              if (t.transform.scale < a) t.zoomTo(a, {\n                friction: .64\n              });else {\n                var s = t.option("maxScale");\n\n                if (t.transform.scale - s > .01) {\n                  var r = t.dragPosition.midPoint || n,\n                      l = t.$content.getClientRects()[0];\n                  t.zoomTo(s, {\n                    friction: .64,\n                    x: r.clientX - l.left,\n                    y: r.clientY - l.top\n                  });\n                } else ;\n              }\n            }\n          }\n        });\n        this.pointerTracker = e;\n      }\n    }, {\n      key: "initObserver",\n      value: function () {\n        var t = this;\n        this.resizeObserver || (this.resizeObserver = new E(function () {\n          t.updateTimer || (t.updateTimer = setTimeout(function () {\n            var e = t.$container.getBoundingClientRect();\n            e.width && e.height ? ((Math.abs(e.width - t.container.width) > 1 || Math.abs(e.height - t.container.height) > 1) && (t.isAnimating() && t.endAnimation(!0), t.updateMetrics(), t.panTo({\n              x: t.content.x,\n              y: t.content.y,\n              scale: t.option("baseScale"),\n              friction: 0\n            })), t.updateTimer = null) : t.updateTimer = null;\n          }, t.updateRate));\n        }), this.resizeObserver.observe(this.$container));\n      }\n    }, {\n      key: "resetDragPosition",\n      value: function () {\n        this.lockAxis = null, this.friction = this.option("friction"), this.velocity = {\n          x: 0,\n          y: 0,\n          scale: 0\n        };\n        var t = this.content,\n            e = t.x,\n            n = t.y,\n            o = t.scale;\n        this.dragStart = {\n          rect: this.$content.getBoundingClientRect(),\n          x: e,\n          y: n,\n          scale: o\n        }, this.dragPosition = i(i({}, this.dragPosition), {}, {\n          x: e,\n          y: n,\n          scale: o\n        }), this.dragOffset = {\n          x: 0,\n          y: 0,\n          scale: 1,\n          time: 0\n        };\n      }\n    }, {\n      key: "updateMetrics",\n      value: function (t) {\n        !0 !== t && this.trigger("beforeUpdate");\n\n        var e,\n            n = this.$container,\n            o = this.$content,\n            a = this.$viewport,\n            s = o instanceof HTMLImageElement,\n            r = this.option("zoom"),\n            l = this.option("resizeParent", r),\n            c = this.option("width"),\n            h = this.option("height"),\n            d = c || (e = o, Math.max(parseFloat(e.naturalWidth || 0), parseFloat(e.width && e.width.baseVal && e.width.baseVal.value || 0), parseFloat(e.offsetWidth || 0), parseFloat(e.scrollWidth || 0))),\n            u = h || function (t) {\n          return Math.max(parseFloat(t.naturalHeight || 0), parseFloat(t.height && t.height.baseVal && t.height.baseVal.value || 0), parseFloat(t.offsetHeight || 0), parseFloat(t.scrollHeight || 0));\n        }(o);\n\n        Object.assign(o.style, {\n          width: c ? "".concat(c, "px") : "",\n          height: h ? "".concat(h, "px") : "",\n          maxWidth: "",\n          maxHeight: ""\n        }), l && Object.assign(a.style, {\n          width: "",\n          height: ""\n        });\n        var f = this.option("ratio");\n        c = d = C(d * f), h = u = C(u * f);\n        var v = o.getBoundingClientRect(),\n            p = a.getBoundingClientRect(),\n            g = a == n ? p : n.getBoundingClientRect(),\n            m = Math.max(a.offsetWidth, C(p.width)),\n            y = Math.max(a.offsetHeight, C(p.height)),\n            b = window.getComputedStyle(a);\n\n        if (m -= parseFloat(b.paddingLeft) + parseFloat(b.paddingRight), y -= parseFloat(b.paddingTop) + parseFloat(b.paddingBottom), this.viewport.width = m, this.viewport.height = y, r) {\n          if (Math.abs(d - v.width) > .1 || Math.abs(u - v.height) > .1) {\n            var x = function (t, e, i, n) {\n              var o = Math.min(i / t || 0, n / e);\n              return {\n                width: t * o || 0,\n                height: e * o || 0\n              };\n            }(d, u, Math.min(d, v.width), Math.min(u, v.height));\n\n            c = C(x.width), h = C(x.height);\n          }\n\n          Object.assign(o.style, {\n            width: "".concat(c, "px"),\n            height: "".concat(h, "px"),\n            transform: ""\n          });\n        }\n\n        if (l && (Object.assign(a.style, {\n          width: "".concat(c, "px"),\n          height: "".concat(h, "px")\n        }), this.viewport = i(i({}, this.viewport), {}, {\n          width: c,\n          height: h\n        })), s && r && "function" != typeof this.options.maxScale) {\n          var w = this.option("maxScale");\n\n          this.options.maxScale = function () {\n            return this.content.origWidth > 0 && this.content.fitWidth > 0 ? this.content.origWidth / this.content.fitWidth : w;\n          };\n        }\n\n        this.content = i(i({}, this.content), {}, {\n          origWidth: d,\n          origHeight: u,\n          fitWidth: c,\n          fitHeight: h,\n          width: c,\n          height: h,\n          scale: 1,\n          isZoomable: r\n        }), this.container = {\n          width: g.width,\n          height: g.height\n        }, !0 !== t && this.trigger("afterUpdate");\n      }\n    }, {\n      key: "zoomIn",\n      value: function (t) {\n        this.zoomTo(this.content.scale + (t || this.option("step")));\n      }\n    }, {\n      key: "zoomOut",\n      value: function (t) {\n        this.zoomTo(this.content.scale - (t || this.option("step")));\n      }\n    }, {\n      key: "toggleZoom",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            e = this.option("maxScale"),\n            i = this.option("baseScale"),\n            n = this.content.scale > i + .5 * (e - i) ? i : e;\n        this.zoomTo(n, t);\n      }\n    }, {\n      key: "zoomTo",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.option("baseScale"),\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            i = e.x,\n            n = void 0 === i ? null : i,\n            o = e.y,\n            a = void 0 === o ? null : o;\n        t = Math.max(Math.min(t, this.option("maxScale")), this.option("minScale"));\n        var s = C(this.content.scale / (this.content.width / this.content.fitWidth), 1e7);\n        null === n && (n = this.content.width * s * .5), null === a && (a = this.content.height * s * .5);\n        var r = this.getZoomDelta(t, n, a),\n            l = r.deltaX,\n            c = r.deltaY;\n        n = this.content.x - l, a = this.content.y - c, this.panTo({\n          x: n,\n          y: a,\n          scale: t,\n          friction: this.option("zoomFriction")\n        });\n      }\n    }, {\n      key: "getZoomDelta",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            n = this.content.fitWidth * this.content.scale,\n            o = this.content.fitHeight * this.content.scale,\n            a = e > 0 && n ? e / n : 0,\n            s = i > 0 && o ? i / o : 0,\n            r = this.content.fitWidth * t,\n            l = this.content.fitHeight * t,\n            c = (r - n) * a,\n            h = (l - o) * s;\n        return {\n          deltaX: c,\n          deltaY: h\n        };\n      }\n    }, {\n      key: "panTo",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            e = t.x,\n            n = void 0 === e ? this.content.x : e,\n            o = t.y,\n            a = void 0 === o ? this.content.y : o,\n            s = t.scale,\n            r = t.friction,\n            l = void 0 === r ? this.option("friction") : r,\n            c = t.ignoreBounds,\n            h = void 0 !== c && c;\n\n        if (s = s || this.content.scale || 1, !h) {\n          var d = this.getBounds(s),\n              u = d.boundX,\n              f = d.boundY;\n          u && (n = Math.max(Math.min(n, u.to), u.from)), f && (a = Math.max(Math.min(a, f.to), f.from));\n        }\n\n        this.friction = l, this.transform = i(i({}, this.transform), {}, {\n          x: n,\n          y: a,\n          scale: s\n        }), l ? (this.state = "panning", this.velocity = {\n          x: (1 / this.friction - 1) * (n - this.content.x),\n          y: (1 / this.friction - 1) * (a - this.content.y),\n          scale: (1 / this.friction - 1) * (s - this.content.scale)\n        }, this.startAnimation()) : this.endAnimation();\n      }\n    }, {\n      key: "startAnimation",\n      value: function () {\n        var t = this;\n        this.rAF ? cancelAnimationFrame(this.rAF) : this.trigger("startAnimation"), this.rAF = requestAnimationFrame(function () {\n          return t.animate();\n        });\n      }\n    }, {\n      key: "animate",\n      value: function () {\n        var t = this;\n        if (this.setEdgeForce(), this.setDragForce(), this.velocity.x *= this.friction, this.velocity.y *= this.friction, this.velocity.scale *= this.friction, this.content.x += this.velocity.x, this.content.y += this.velocity.y, this.content.scale += this.velocity.scale, this.isAnimating()) this.setTransform();else if ("pointerdown" !== this.state) return void this.endAnimation();\n        this.rAF = requestAnimationFrame(function () {\n          return t.animate();\n        });\n      }\n    }, {\n      key: "getBounds",\n      value: function (t) {\n        var e = this.boundX,\n            i = this.boundY;\n        if (void 0 !== e && void 0 !== i) return {\n          boundX: e,\n          boundY: i\n        };\n        e = {\n          from: 0,\n          to: 0\n        }, i = {\n          from: 0,\n          to: 0\n        }, t = t || this.transform.scale;\n        var n = this.content.fitWidth * t,\n            o = this.content.fitHeight * t,\n            a = this.viewport.width,\n            s = this.viewport.height;\n\n        if (n < a) {\n          var r = C(.5 * (a - n));\n          e.from = r, e.to = r;\n        } else e.from = C(a - n);\n\n        if (o < s) {\n          var l = .5 * (s - o);\n          i.from = l, i.to = l;\n        } else i.from = C(s - o);\n\n        return {\n          boundX: e,\n          boundY: i\n        };\n      }\n    }, {\n      key: "setEdgeForce",\n      value: function () {\n        if ("decel" === this.state) {\n          var t,\n              e,\n              i,\n              n,\n              o = this.option("bounceForce"),\n              a = this.getBounds(Math.max(this.transform.scale, this.content.scale)),\n              s = a.boundX,\n              r = a.boundY;\n\n          if (s && (t = this.content.x < s.from, e = this.content.x > s.to), r && (i = this.content.y < r.from, n = this.content.y > r.to), t || e) {\n            var l = ((t ? s.from : s.to) - this.content.x) * o,\n                c = this.content.x + (this.velocity.x + l) / this.friction;\n            c >= s.from && c <= s.to && (l += this.velocity.x), this.velocity.x = l, this.recalculateTransform();\n          }\n\n          if (i || n) {\n            var h = ((i ? r.from : r.to) - this.content.y) * o,\n                d = this.content.y + (h + this.velocity.y) / this.friction;\n            d >= r.from && d <= r.to && (h += this.velocity.y), this.velocity.y = h, this.recalculateTransform();\n          }\n        }\n      }\n    }, {\n      key: "setDragResistance",\n      value: function () {\n        if ("pointerdown" === this.state) {\n          var t,\n              e,\n              i,\n              n,\n              o = this.getBounds(this.dragPosition.scale),\n              a = o.boundX,\n              s = o.boundY;\n\n          if (a && (t = this.dragPosition.x < a.from, e = this.dragPosition.x > a.to), s && (i = this.dragPosition.y < s.from, n = this.dragPosition.y > s.to), (t || e) && (!t || !e)) {\n            var r = t ? a.from : a.to,\n                l = r - this.dragPosition.x;\n            this.dragPosition.x = r - .3 * l;\n          }\n\n          if ((i || n) && (!i || !n)) {\n            var c = i ? s.from : s.to,\n                h = c - this.dragPosition.y;\n            this.dragPosition.y = c - .3 * h;\n          }\n        }\n      }\n    }, {\n      key: "setDragForce",\n      value: function () {\n        "pointerdown" === this.state && (this.velocity.x = this.dragPosition.x - this.content.x, this.velocity.y = this.dragPosition.y - this.content.y, this.velocity.scale = this.dragPosition.scale - this.content.scale);\n      }\n    }, {\n      key: "recalculateTransform",\n      value: function () {\n        this.transform.x = this.content.x + this.velocity.x / (1 / this.friction - 1), this.transform.y = this.content.y + this.velocity.y / (1 / this.friction - 1), this.transform.scale = this.content.scale + this.velocity.scale / (1 / this.friction - 1);\n      }\n    }, {\n      key: "isAnimating",\n      value: function () {\n        return !(!this.friction || !(Math.abs(this.velocity.x) > .05 || Math.abs(this.velocity.y) > .05 || Math.abs(this.velocity.scale) > .05));\n      }\n    }, {\n      key: "setTransform",\n      value: function (t) {\n        var e, n, o, a, s;\n        (t ? (e = C(this.transform.x), n = C(this.transform.y), o = this.transform.scale, this.content = i(i({}, this.content), {}, {\n          x: e,\n          y: n,\n          scale: o\n        })) : (e = C(this.content.x), n = C(this.content.y), o = this.content.scale / (this.content.width / this.content.fitWidth), this.content = i(i({}, this.content), {}, {\n          x: e,\n          y: n\n        })), this.trigger("beforeTransform"), e = C(this.content.x), n = C(this.content.y), t && this.option("zoom")) ? (a = C(this.content.fitWidth * o), s = C(this.content.fitHeight * o), this.content.width = a, this.content.height = s, this.transform = i(i({}, this.transform), {}, {\n          width: a,\n          height: s,\n          scale: o\n        }), Object.assign(this.$content.style, {\n          width: "".concat(a, "px"),\n          height: "".concat(s, "px"),\n          maxWidth: "none",\n          maxHeight: "none",\n          transform: "translate3d(".concat(e, "px, ").concat(n, "px, 0) scale(1)")\n        })) : this.$content.style.transform = "translate3d(".concat(e, "px, ").concat(n, "px, 0) scale(").concat(o, ")");\n        this.trigger("afterTransform");\n      }\n    }, {\n      key: "endAnimation",\n      value: function (t) {\n        cancelAnimationFrame(this.rAF), this.rAF = null, this.velocity = {\n          x: 0,\n          y: 0,\n          scale: 0\n        }, this.setTransform(!0), this.state = "ready", this.handleCursor(), !0 !== t && this.trigger("endAnimation");\n      }\n    }, {\n      key: "handleCursor",\n      value: function () {\n        var t = this.option("draggableClass");\n        t && this.option("touch") && (1 == this.option("panOnlyZoomed") && this.content.width <= this.viewport.width && this.content.height <= this.viewport.height && this.transform.scale <= this.option("baseScale") ? this.$container.classList.remove(t) : this.$container.classList.add(t));\n      }\n    }, {\n      key: "detachEvents",\n      value: function () {\n        this.$content.removeEventListener("load", this.onLoad), this.$container.removeEventListener("wheel", this.onWheel, {\n          passive: !1\n        }), this.$container.removeEventListener("click", this.onClick, {\n          passive: !1\n        }), this.pointerTracker && (this.pointerTracker.stop(), this.pointerTracker = null), this.resizeObserver && (this.resizeObserver.disconnect(), this.resizeObserver = null);\n      }\n    }, {\n      key: "destroy",\n      value: function () {\n        "destroy" !== this.state && (this.state = "destroy", clearTimeout(this.updateTimer), this.updateTimer = null, cancelAnimationFrame(this.rAF), this.rAF = null, this.detachEvents(), this.detachPlugins(), this.resetDragPosition());\n      }\n    }]), n;\n  }(z);\n\n  I.version = "4.0.24", I.Plugins = {};\n\n  var F = function (t, e) {\n    var i = 0;\n    return function () {\n      var n = new Date().getTime();\n      if (!(n - i < e)) return i = n, t.apply(void 0, arguments);\n    };\n  },\n      R = function () {\n    function t(e) {\n      o(this, t), this.$container = null, this.$prev = null, this.$next = null, this.carousel = e, this.onRefresh = this.onRefresh.bind(this);\n    }\n\n    return s(t, [{\n      key: "option",\n      value: function (t) {\n        return this.carousel.option("Navigation.".concat(t));\n      }\n    }, {\n      key: "createButton",\n      value: function (t) {\n        var e,\n            i = this,\n            n = document.createElement("button");\n        n.setAttribute("title", this.carousel.localize("{{".concat(t.toUpperCase(), "}}")));\n        var o = this.option("classNames.button") + " " + this.option("classNames.".concat(t));\n        return (e = n.classList).add.apply(e, y(o.split(" "))), n.setAttribute("tabindex", "0"), n.innerHTML = this.carousel.localize(this.option("".concat(t, "Tpl"))), n.addEventListener("click", function (e) {\n          e.preventDefault(), e.stopPropagation(), i.carousel["slide".concat("next" === t ? "Next" : "Prev")]();\n        }), n;\n      }\n    }, {\n      key: "build",\n      value: function () {\n        var t;\n        this.$container || (this.$container = document.createElement("div"), (t = this.$container.classList).add.apply(t, y(this.option("classNames.main").split(" "))), this.carousel.$container.appendChild(this.$container));\n        this.$next || (this.$next = this.createButton("next"), this.$container.appendChild(this.$next)), this.$prev || (this.$prev = this.createButton("prev"), this.$container.appendChild(this.$prev));\n      }\n    }, {\n      key: "onRefresh",\n      value: function () {\n        var t = this.carousel.pages.length;\n        t <= 1 || t > 1 && this.carousel.elemDimWidth < this.carousel.wrapDimWidth && !Number.isInteger(this.carousel.option("slidesPerPage")) ? this.cleanup() : (this.build(), this.$prev.removeAttribute("disabled"), this.$next.removeAttribute("disabled"), this.carousel.option("infiniteX", this.carousel.option("infinite")) || (this.carousel.page <= 0 && this.$prev.setAttribute("disabled", ""), this.carousel.page >= t - 1 && this.$next.setAttribute("disabled", "")));\n      }\n    }, {\n      key: "cleanup",\n      value: function () {\n        this.$prev && this.$prev.remove(), this.$prev = null, this.$next && this.$next.remove(), this.$next = null, this.$container && this.$container.remove(), this.$container = null;\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.carousel.on("refresh change", this.onRefresh);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.carousel.off("refresh change", this.onRefresh), this.cleanup();\n      }\n    }]), t;\n  }();\n\n  R.defaults = {\n    prevTpl: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"/></svg>\',\n    nextTpl: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"/></svg>\',\n    classNames: {\n      main: "carousel__nav",\n      button: "carousel__button",\n      next: "is-next",\n      prev: "is-prev"\n    }\n  };\n\n  var N = function () {\n    function t(e) {\n      o(this, t), this.carousel = e, this.$list = null, this.events = {\n        change: this.onChange.bind(this),\n        refresh: this.onRefresh.bind(this)\n      };\n    }\n\n    return s(t, [{\n      key: "buildList",\n      value: function () {\n        var t = this;\n\n        if (!(this.carousel.pages.length < this.carousel.option("Dots.minSlideCount"))) {\n          var e = document.createElement("ol");\n          return e.classList.add("carousel__dots"), e.addEventListener("click", function (e) {\n            if ("page" in e.target.dataset) {\n              e.preventDefault(), e.stopPropagation();\n              var i = parseInt(e.target.dataset.page, 10),\n                  n = t.carousel;\n              i !== n.page && (n.pages.length < 3 && n.option("infinite") ? n[0 == i ? "slidePrev" : "slideNext"]() : n.slideTo(i));\n            }\n          }), this.$list = e, this.carousel.$container.appendChild(e), this.carousel.$container.classList.add("has-dots"), e;\n        }\n      }\n    }, {\n      key: "removeList",\n      value: function () {\n        this.$list && (this.$list.parentNode.removeChild(this.$list), this.$list = null), this.carousel.$container.classList.remove("has-dots");\n      }\n    }, {\n      key: "rebuildDots",\n      value: function () {\n        var t = this,\n            e = this.$list,\n            i = !!e,\n            n = this.carousel.pages.length;\n        if (n < 2) i && this.removeList();else {\n          i || (e = this.buildList());\n          var o = this.$list.children.length;\n          if (o > n) for (var a = n; a < o; a++) this.$list.removeChild(this.$list.lastChild);else {\n            for (var s = function (e) {\n              var i = document.createElement("li");\n              i.classList.add("carousel__dot"), i.dataset.page = e, i.setAttribute("role", "button"), i.setAttribute("tabindex", "0"), i.setAttribute("title", t.carousel.localize("{{GOTO}}", [["%d", e + 1]])), i.addEventListener("keydown", function (t) {\n                var e,\n                    n = t.code;\n                "Enter" === n || "NumpadEnter" === n ? e = i : "ArrowRight" === n ? e = i.nextSibling : "ArrowLeft" === n && (e = i.previousSibling), e && e.click();\n              }), t.$list.appendChild(i);\n            }, r = o; r < n; r++) s(r);\n\n            this.setActiveDot();\n          }\n        }\n      }\n    }, {\n      key: "setActiveDot",\n      value: function () {\n        if (this.$list) {\n          this.$list.childNodes.forEach(function (t) {\n            t.classList.remove("is-selected");\n          });\n          var t = this.$list.childNodes[this.carousel.page];\n          t && t.classList.add("is-selected");\n        }\n      }\n    }, {\n      key: "onChange",\n      value: function () {\n        this.setActiveDot();\n      }\n    }, {\n      key: "onRefresh",\n      value: function () {\n        this.rebuildDots();\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.carousel.on(this.events);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.removeList(), this.carousel.off(this.events), this.carousel = null;\n      }\n    }]), t;\n  }(),\n      D = function () {\n    function t(e) {\n      o(this, t), this.carousel = e, this.selectedIndex = null, this.friction = 0, this.onNavReady = this.onNavReady.bind(this), this.onNavClick = this.onNavClick.bind(this), this.onNavCreateSlide = this.onNavCreateSlide.bind(this), this.onTargetChange = this.onTargetChange.bind(this);\n    }\n\n    return s(t, [{\n      key: "addAsTargetFor",\n      value: function (t) {\n        this.target = this.carousel, this.nav = t, this.attachEvents();\n      }\n    }, {\n      key: "addAsNavFor",\n      value: function (t) {\n        this.target = t, this.nav = this.carousel, this.attachEvents();\n      }\n    }, {\n      key: "attachEvents",\n      value: function () {\n        this.nav.options.initialSlide = this.target.options.initialPage, this.nav.on("ready", this.onNavReady), this.nav.on("createSlide", this.onNavCreateSlide), this.nav.on("Panzoom.click", this.onNavClick), this.target.on("change", this.onTargetChange), this.target.on("Panzoom.afterUpdate", this.onTargetChange);\n      }\n    }, {\n      key: "onNavReady",\n      value: function () {\n        this.onTargetChange(!0);\n      }\n    }, {\n      key: "onNavClick",\n      value: function (t, e, i) {\n        var n = i.target.closest(".carousel__slide");\n\n        if (n) {\n          i.stopPropagation();\n          var o = parseInt(n.dataset.index, 10),\n              a = this.target.findPageForSlide(o);\n          this.target.page !== a && this.target.slideTo(a, {\n            friction: this.friction\n          }), this.markSelectedSlide(o);\n        }\n      }\n    }, {\n      key: "onNavCreateSlide",\n      value: function (t, e) {\n        e.index === this.selectedIndex && this.markSelectedSlide(e.index);\n      }\n    }, {\n      key: "onTargetChange",\n      value: function () {\n        var t = this.target.pages[this.target.page].indexes[0],\n            e = this.nav.findPageForSlide(t);\n        this.nav.slideTo(e), this.markSelectedSlide(t);\n      }\n    }, {\n      key: "markSelectedSlide",\n      value: function (t) {\n        this.selectedIndex = t, y(this.nav.slides).filter(function (t) {\n          return t.$el && t.$el.classList.remove("is-nav-selected");\n        });\n        var e = this.nav.slides[t];\n        e && e.$el && e.$el.classList.add("is-nav-selected");\n      }\n    }, {\n      key: "attach",\n      value: function (t) {\n        var e = t.options.Sync;\n        (e.target || e.nav) && (e.target ? this.addAsNavFor(e.target) : e.nav && this.addAsTargetFor(e.nav), this.friction = e.friction);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.nav && (this.nav.off("ready", this.onNavReady), this.nav.off("Panzoom.click", this.onNavClick), this.nav.off("createSlide", this.onNavCreateSlide)), this.target && (this.target.off("Panzoom.afterUpdate", this.onTargetChange), this.target.off("change", this.onTargetChange));\n      }\n    }]), t;\n  }();\n\n  D.defaults = {\n    friction: .92\n  };\n\n  var B = {\n    Navigation: R,\n    Dots: N,\n    Sync: D\n  },\n      W = {\n    slides: [],\n    preload: 0,\n    slidesPerPage: "auto",\n    initialPage: null,\n    initialSlide: null,\n    friction: .92,\n    center: !0,\n    infinite: !0,\n    fill: !0,\n    dragFree: !1,\n    prefix: "",\n    classNames: {\n      viewport: "carousel__viewport",\n      track: "carousel__track",\n      slide: "carousel__slide",\n      slideSelected: "is-selected"\n    },\n    l10n: {\n      NEXT: "Next slide",\n      PREV: "Previous slide",\n      GOTO: "Go to slide #%d"\n    }\n  },\n      H = function (t) {\n    l(n, t);\n    var e = f(n);\n\n    function n(t) {\n      var i,\n          a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      if (o(this, n), a = S(!0, {}, W, a), (i = e.call(this, a)).state = "init", i.$container = t, !(i.$container instanceof HTMLElement)) throw new Error("No root element provided");\n      return i.slideNext = F(i.slideNext.bind(d(i)), 250), i.slidePrev = F(i.slidePrev.bind(d(i)), 250), i.init(), t.__Carousel = d(i), i;\n    }\n\n    return s(n, [{\n      key: "init",\n      value: function () {\n        this.pages = [], this.page = this.pageIndex = null, this.prevPage = this.prevPageIndex = null, this.attachPlugins(n.Plugins), this.trigger("init"), this.initLayout(), this.initSlides(), this.updateMetrics(), this.$track && this.pages.length && (this.$track.style.transform = "translate3d(".concat(-1 * this.pages[this.page].left, "px, 0px, 0) scale(1)")), this.manageSlideVisiblity(), this.initPanzoom(), this.state = "ready", this.trigger("ready");\n      }\n    }, {\n      key: "initLayout",\n      value: function () {\n        var t,\n            e,\n            i,\n            n,\n            o = this.option("prefix"),\n            a = this.option("classNames");\n        (this.$viewport = this.option("viewport") || this.$container.querySelector(".".concat(o).concat(a.viewport)), this.$viewport) || (this.$viewport = document.createElement("div"), (t = this.$viewport.classList).add.apply(t, y((o + a.viewport).split(" "))), (e = this.$viewport).append.apply(e, y(this.$container.childNodes)), this.$container.appendChild(this.$viewport));\n        (this.$track = this.option("track") || this.$container.querySelector(".".concat(o).concat(a.track)), this.$track) || (this.$track = document.createElement("div"), (i = this.$track.classList).add.apply(i, y((o + a.track).split(" "))), (n = this.$track).append.apply(n, y(this.$viewport.childNodes)), this.$viewport.appendChild(this.$track));\n      }\n    }, {\n      key: "initSlides",\n      value: function () {\n        var t = this;\n        this.slides = [], this.$viewport.querySelectorAll(".".concat(this.option("prefix")).concat(this.option("classNames.slide"))).forEach(function (e) {\n          var i = {\n            $el: e,\n            isDom: !0\n          };\n          t.slides.push(i), t.trigger("createSlide", i, t.slides.length);\n        }), Array.isArray(this.options.slides) && (this.slides = S(!0, y(this.slides), this.options.slides));\n      }\n    }, {\n      key: "updateMetrics",\n      value: function () {\n        var t,\n            e = this,\n            n = 0,\n            o = [];\n        this.slides.forEach(function (i, a) {\n          var s = i.$el,\n              r = i.isDom || !t ? e.getSlideMetrics(s) : t;\n          i.index = a, i.width = r, i.left = n, t = r, n += r, o.push(a);\n        });\n        var a = Math.max(this.$track.offsetWidth, C(this.$track.getBoundingClientRect().width)),\n            s = getComputedStyle(this.$track);\n        a -= parseFloat(s.paddingLeft) + parseFloat(s.paddingRight), this.contentWidth = n, this.viewportWidth = a;\n        var r = [],\n            l = this.option("slidesPerPage");\n        if (Number.isInteger(l) && n > a) for (var c = 0; c < this.slides.length; c += l) r.push({\n          indexes: o.slice(c, c + l),\n          slides: this.slides.slice(c, c + l)\n        });else for (var h = 0, d = 0, u = 0; u < this.slides.length; u += 1) {\n          var f = this.slides[u];\n          (!r.length || d + f.width > a) && (r.push({\n            indexes: [],\n            slides: []\n          }), h = r.length - 1, d = 0), d += f.width, r[h].indexes.push(u), r[h].slides.push(f);\n        }\n        var v = this.option("center"),\n            p = this.option("fill");\n        r.forEach(function (t, i) {\n          t.index = i, t.width = t.slides.reduce(function (t, e) {\n            return t + e.width;\n          }, 0), t.left = t.slides[0].left, v && (t.left += .5 * (a - t.width) * -1), p && !e.option("infiniteX", e.option("infinite")) && n > a && (t.left = Math.max(t.left, 0), t.left = Math.min(t.left, n - a));\n        });\n        var g,\n            m = [];\n        r.forEach(function (t) {\n          var e = i({}, t);\n          g && e.left === g.left ? (g.width += e.width, g.slides = [].concat(y(g.slides), y(e.slides)), g.indexes = [].concat(y(g.indexes), y(e.indexes))) : (e.index = m.length, g = e, m.push(e));\n        }), this.pages = m;\n        var b = this.page;\n\n        if (null === b) {\n          var x = this.option("initialSlide");\n          b = null !== x ? this.findPageForSlide(x) : parseInt(this.option("initialPage", 0), 10) || 0, m[b] || (b = m.length && b > m.length ? m[m.length - 1].index : 0), this.page = b, this.pageIndex = b;\n        }\n\n        this.updatePanzoom(), this.trigger("refresh");\n      }\n    }, {\n      key: "getSlideMetrics",\n      value: function (t) {\n        if (!t) {\n          var e,\n              i,\n              n = this.slides[0];\n          if ((t = document.createElement("div")).dataset.isTestEl = 1, t.style.visibility = "hidden", (e = t.classList).add.apply(e, y((this.option("prefix") + this.option("classNames.slide")).split(" "))), n.customClass) (i = t.classList).add.apply(i, y(n.customClass.split(" ")));\n          this.$track.prepend(t);\n        }\n\n        var o = Math.max(t.offsetWidth, C(t.getBoundingClientRect().width)),\n            a = t.currentStyle || window.getComputedStyle(t);\n        return o = o + (parseFloat(a.marginLeft) || 0) + (parseFloat(a.marginRight) || 0), t.dataset.isTestEl && t.remove(), o;\n      }\n    }, {\n      key: "findPageForSlide",\n      value: function (t) {\n        t = parseInt(t, 10) || 0;\n        var e = this.pages.find(function (e) {\n          return e.indexes.indexOf(t) > -1;\n        });\n        return e ? e.index : null;\n      }\n    }, {\n      key: "slideNext",\n      value: function () {\n        this.slideTo(this.pageIndex + 1);\n      }\n    }, {\n      key: "slidePrev",\n      value: function () {\n        this.slideTo(this.pageIndex - 1);\n      }\n    }, {\n      key: "slideTo",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            i = e.x,\n            n = void 0 === i ? -1 * this.setPage(t, !0) : i,\n            o = e.y,\n            a = void 0 === o ? 0 : o,\n            s = e.friction,\n            r = void 0 === s ? this.option("friction") : s;\n        this.Panzoom.content.x === n && !this.Panzoom.velocity.x && r || (this.Panzoom.panTo({\n          x: n,\n          y: a,\n          friction: r,\n          ignoreBounds: !0\n        }), "ready" === this.state && "ready" === this.Panzoom.state && this.trigger("settle"));\n      }\n    }, {\n      key: "initPanzoom",\n      value: function () {\n        var t = this;\n        this.Panzoom && this.Panzoom.destroy();\n        var e = S(!0, {}, {\n          content: this.$track,\n          wrapInner: !1,\n          resizeParent: !1,\n          zoom: !1,\n          click: !1,\n          lockAxis: "x",\n          x: this.pages.length ? -1 * this.pages[this.page].left : 0,\n          centerOnStart: !1,\n          textSelection: function () {\n            return t.option("textSelection", !1);\n          },\n          panOnlyZoomed: function () {\n            return this.content.width <= this.viewport.width;\n          }\n        }, this.option("Panzoom"));\n        this.Panzoom = new I(this.$container, e), this.Panzoom.on({\n          "*": function (e) {\n            for (var i = arguments.length, n = new Array(i > 1 ? i - 1 : 0), o = 1; o < i; o++) n[o - 1] = arguments[o];\n\n            return t.trigger.apply(t, ["Panzoom.".concat(e)].concat(n));\n          },\n          afterUpdate: function () {\n            t.updatePage();\n          },\n          beforeTransform: this.onBeforeTransform.bind(this),\n          touchEnd: this.onTouchEnd.bind(this),\n          endAnimation: function () {\n            t.trigger("settle");\n          }\n        }), this.updateMetrics(), this.manageSlideVisiblity();\n      }\n    }, {\n      key: "updatePanzoom",\n      value: function () {\n        this.Panzoom && (this.Panzoom.content = i(i({}, this.Panzoom.content), {}, {\n          fitWidth: this.contentWidth,\n          origWidth: this.contentWidth,\n          width: this.contentWidth\n        }), this.pages.length > 1 && this.option("infiniteX", this.option("infinite")) ? this.Panzoom.boundX = null : this.pages.length && (this.Panzoom.boundX = {\n          from: -1 * this.pages[this.pages.length - 1].left,\n          to: -1 * this.pages[0].left\n        }), this.option("infiniteY", this.option("infinite")) ? this.Panzoom.boundY = null : this.Panzoom.boundY = {\n          from: 0,\n          to: 0\n        }, this.Panzoom.handleCursor());\n      }\n    }, {\n      key: "manageSlideVisiblity",\n      value: function () {\n        var t = this,\n            e = this.contentWidth,\n            i = this.viewportWidth,\n            n = this.Panzoom ? -1 * this.Panzoom.content.x : this.pages.length ? this.pages[this.page].left : 0,\n            o = this.option("preload"),\n            a = this.option("infiniteX", this.option("infinite")),\n            s = parseFloat(getComputedStyle(this.$viewport, null).getPropertyValue("padding-left")),\n            r = parseFloat(getComputedStyle(this.$viewport, null).getPropertyValue("padding-right"));\n        this.slides.forEach(function (l) {\n          var c,\n              h,\n              d = 0;\n          c = n - s, h = n + i + r, c -= o * (i + s + r), h += o * (i + s + r);\n          var u = l.left + l.width > c && l.left < h;\n          c = n + e - s, h = n + e + i + r, c -= o * (i + s + r);\n          var f = a && l.left + l.width > c && l.left < h;\n          c = n - e - s, h = n - e + i + r, c -= o * (i + s + r);\n          var v = a && l.left + l.width > c && l.left < h;\n          f || u || v ? (t.createSlideEl(l), u && (d = 0), f && (d = -1), v && (d = 1), l.left + l.width > n && l.left <= n + i + r && (d = 0)) : t.removeSlideEl(l), l.hasDiff = d;\n        });\n        var l = 0,\n            c = 0;\n        this.slides.forEach(function (t, i) {\n          var n = 0;\n          t.$el ? (i !== l || t.hasDiff ? n = c + t.hasDiff * e : c = 0, t.$el.style.left = Math.abs(n) > .1 ? "".concat(c + t.hasDiff * e, "px") : "", l++) : c += t.width;\n        }), this.markSelectedSlides();\n      }\n    }, {\n      key: "createSlideEl",\n      value: function (t) {\n        var e;\n\n        if (t) {\n          if (!t.$el) {\n            var i,\n                n = document.createElement("div");\n            if (n.dataset.index = t.index, (e = n.classList).add.apply(e, y((this.option("prefix") + this.option("classNames.slide")).split(" "))), t.customClass) (i = n.classList).add.apply(i, y(t.customClass.split(" ")));\n            t.html && (n.innerHTML = t.html);\n            var o = [];\n            this.slides.forEach(function (t, e) {\n              t.$el && o.push(e);\n            });\n            var a = t.index,\n                s = null;\n\n            if (o.length) {\n              var r = o.reduce(function (t, e) {\n                return Math.abs(e - a) < Math.abs(t - a) ? e : t;\n              });\n              s = this.slides[r];\n            }\n\n            return this.$track.insertBefore(n, s && s.$el ? s.index < t.index ? s.$el.nextSibling : s.$el : null), t.$el = n, this.trigger("createSlide", t, a), t;\n          }\n\n          var l,\n              c = t.$el.dataset.index;\n          c && parseInt(c, 10) === t.index || (t.$el.dataset.index = t.index, t.$el.querySelectorAll("[data-lazy-srcset]").forEach(function (t) {\n            t.srcset = t.dataset.lazySrcset;\n          }), t.$el.querySelectorAll("[data-lazy-src]").forEach(function (t) {\n            var e = t.dataset.lazySrc;\n            t instanceof HTMLImageElement ? t.src = e : t.style.backgroundImage = "url(\'".concat(e, "\')");\n          }), (l = t.$el.dataset.lazySrc) && (t.$el.style.backgroundImage = "url(\'".concat(l, "\')")), t.state = "ready");\n        }\n      }\n    }, {\n      key: "removeSlideEl",\n      value: function (t) {\n        t.$el && !t.isDom && (this.trigger("removeSlide", t), t.$el.remove(), t.$el = null);\n      }\n    }, {\n      key: "markSelectedSlides",\n      value: function () {\n        var t = this,\n            e = this.option("classNames.slideSelected"),\n            i = "aria-hidden";\n        this.slides.forEach(function (n, o) {\n          var a = n.$el;\n\n          if (a) {\n            var s = t.pages[t.page];\n            s && s.indexes && s.indexes.indexOf(o) > -1 ? (e && !a.classList.contains(e) && (a.classList.add(e), t.trigger("selectSlide", n)), a.removeAttribute(i)) : (e && a.classList.contains(e) && (a.classList.remove(e), t.trigger("unselectSlide", n)), a.setAttribute(i, !0));\n          }\n        });\n      }\n    }, {\n      key: "updatePage",\n      value: function () {\n        this.updateMetrics(), this.slideTo(this.page, {\n          friction: 0\n        });\n      }\n    }, {\n      key: "onBeforeTransform",\n      value: function () {\n        this.option("infiniteX", this.option("infinite")) && this.manageInfiniteTrack(), this.manageSlideVisiblity();\n      }\n    }, {\n      key: "manageInfiniteTrack",\n      value: function () {\n        var t = this.contentWidth,\n            e = this.viewportWidth;\n\n        if (!(!this.option("infiniteX", this.option("infinite")) || this.pages.length < 2 || t < e)) {\n          var i = this.Panzoom,\n              n = !1;\n          return i.content.x < -1 * (t - e) && (i.content.x += t, this.pageIndex = this.pageIndex - this.pages.length, n = !0), i.content.x > e && (i.content.x -= t, this.pageIndex = this.pageIndex + this.pages.length, n = !0), n && "pointerdown" === i.state && i.resetDragPosition(), n;\n        }\n      }\n    }, {\n      key: "onTouchEnd",\n      value: function (t, e) {\n        var i = this.option("dragFree");\n        if (!i && this.pages.length > 1 && t.dragOffset.time < 350 && Math.abs(t.dragOffset.y) < 1 && Math.abs(t.dragOffset.x) > 5) this[t.dragOffset.x < 0 ? "slideNext" : "slidePrev"]();else if (i) {\n          var n = m(this.getPageFromPosition(-1 * t.transform.x), 2)[1];\n          this.setPage(n);\n        } else this.slideToClosest();\n      }\n    }, {\n      key: "slideToClosest",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            e = this.getPageFromPosition(-1 * this.Panzoom.content.x),\n            i = m(e, 2),\n            n = i[1];\n        this.slideTo(n, t);\n      }\n    }, {\n      key: "getPageFromPosition",\n      value: function (t) {\n        var e = this.pages.length;\n        this.option("center") && (t += .5 * this.viewportWidth);\n        var i = Math.floor(t / this.contentWidth);\n        t -= i * this.contentWidth;\n        var n = this.slides.find(function (e) {\n          return e.left <= t && e.left + e.width > t;\n        });\n\n        if (n) {\n          var o = this.findPageForSlide(n.index);\n          return [o, o + i * e];\n        }\n\n        return [0, 0];\n      }\n    }, {\n      key: "setPage",\n      value: function (t, e) {\n        var i = 0,\n            n = parseInt(t, 10) || 0,\n            o = this.page,\n            a = this.pageIndex,\n            s = this.pages.length,\n            r = this.contentWidth,\n            l = this.viewportWidth;\n\n        if (t = (n % s + s) % s, this.option("infiniteX", this.option("infinite")) && r > l) {\n          var c = Math.floor(n / s) || 0,\n              h = r;\n\n          if (i = this.pages[t].left + c * h, !0 === e && s > 2) {\n            var d = -1 * this.Panzoom.content.x,\n                u = i - h,\n                f = i + h,\n                v = Math.abs(d - i),\n                p = Math.abs(d - u),\n                g = Math.abs(d - f);\n            g < v && g <= p ? (i = f, n += s) : p < v && p < g && (i = u, n -= s);\n          }\n        } else t = n = Math.max(0, Math.min(n, s - 1)), i = this.pages.length ? this.pages[t].left : 0;\n\n        return this.page = t, this.pageIndex = n, null !== o && t !== o && (this.prevPage = o, this.prevPageIndex = a, this.trigger("change", t, o)), i;\n      }\n    }, {\n      key: "destroy",\n      value: function () {\n        var t = this;\n        this.state = "destroy", this.slides.forEach(function (e) {\n          t.removeSlideEl(e);\n        }), this.slides = [], this.Panzoom.destroy(), this.detachPlugins();\n      }\n    }]), n;\n  }(z);\n\n  H.version = "4.0.24", H.Plugins = B;\n\n  var j = !("undefined" == typeof window || !window.document || !window.document.createElement),\n      X = null,\n      q = ["a[href]", "area[href]", \'input:not([disabled]):not([type="hidden"]):not([aria-hidden])\', "select:not([disabled]):not([aria-hidden])", "textarea:not([disabled]):not([aria-hidden])", "button:not([disabled]):not([aria-hidden])", "iframe", "object", "embed", "video", "audio", "[contenteditable]", \'[tabindex]:not([tabindex^="-"]):not([disabled]):not([aria-hidden])\'],\n      U = function (t) {\n    if (t && j) {\n      null === X && document.createElement("div").focus({\n        get preventScroll() {\n          return X = !0, !1;\n        }\n\n      });\n\n      try {\n        if (t.setActive) t.setActive();else if (X) t.focus({\n          preventScroll: !0\n        });else {\n          var e = window.pageXOffset || document.body.scrollTop,\n              i = window.pageYOffset || document.body.scrollLeft;\n          t.focus(), document.body.scrollTo({\n            top: e,\n            left: i,\n            behavior: "auto"\n          });\n        }\n      } catch (t) {}\n    }\n  },\n      Y = function () {\n    function t(e) {\n      o(this, t), this.fancybox = e, this.viewport = null, this.pendingUpdate = null;\n\n      for (var i = 0, n = ["onReady", "onResize", "onTouchstart", "onTouchmove"]; i < n.length; i++) {\n        var a = n[i];\n        this[a] = this[a].bind(this);\n      }\n    }\n\n    return s(t, [{\n      key: "onReady",\n      value: function () {\n        var t = window.visualViewport;\n        t && (this.viewport = t, this.startY = 0, t.addEventListener("resize", this.onResize), this.updateViewport()), window.addEventListener("touchstart", this.onTouchstart, {\n          passive: !1\n        }), window.addEventListener("touchmove", this.onTouchmove, {\n          passive: !1\n        }), window.addEventListener("wheel", this.onWheel, {\n          passive: !1\n        });\n      }\n    }, {\n      key: "onResize",\n      value: function () {\n        this.updateViewport();\n      }\n    }, {\n      key: "updateViewport",\n      value: function () {\n        var t = this.fancybox,\n            e = this.viewport,\n            i = e.scale || 1,\n            n = t.$container;\n\n        if (n) {\n          var o = "",\n              a = "",\n              s = "";\n          i - 1 > .1 && (o = "".concat(e.width * i, "px"), a = "".concat(e.height * i, "px"), s = "translate3d(".concat(e.offsetLeft, "px, ").concat(e.offsetTop, "px, 0) scale(").concat(1 / i, ")")), n.style.width = o, n.style.height = a, n.style.transform = s;\n        }\n      }\n    }, {\n      key: "onTouchstart",\n      value: function (t) {\n        this.startY = t.touches ? t.touches[0].screenY : t.screenY;\n      }\n    }, {\n      key: "onTouchmove",\n      value: function (t) {\n        var e = this.startY,\n            i = window.innerWidth / window.document.documentElement.clientWidth;\n\n        if (t.cancelable && !(t.touches.length > 1 || 1 !== i)) {\n          var n = t.target,\n              o = $(n);\n\n          if (o) {\n            var a = window.getComputedStyle(o),\n                s = parseInt(a.getPropertyValue("height"), 10),\n                r = t.touches ? t.touches[0].screenY : t.screenY,\n                l = e <= r && 0 === o.scrollTop,\n                c = e >= r && o.scrollHeight - o.scrollTop === s;\n            (l || c) && t.preventDefault();\n          } else t.preventDefault();\n        }\n      }\n    }, {\n      key: "onWheel",\n      value: function (t) {\n        $(t.target) || t.preventDefault();\n      }\n    }, {\n      key: "cleanup",\n      value: function () {\n        this.pendingUpdate && (cancelAnimationFrame(this.pendingUpdate), this.pendingUpdate = null);\n        var t = this.viewport;\n        t && (t.removeEventListener("resize", this.onResize), this.viewport = null), window.removeEventListener("touchstart", this.onTouchstart, !1), window.removeEventListener("touchmove", this.onTouchmove, !1), window.removeEventListener("wheel", this.onWheel, {\n          passive: !1\n        });\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.fancybox.on("initLayout", this.onReady);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.fancybox.off("initLayout", this.onReady), this.cleanup();\n      }\n    }]), t;\n  }(),\n      V = function () {\n    function t(e) {\n      o(this, t), this.fancybox = e, this.$container = null, this.state = "init";\n\n      for (var i = 0, n = ["onPrepare", "onClosing", "onKeydown"]; i < n.length; i++) {\n        var a = n[i];\n        this[a] = this[a].bind(this);\n      }\n\n      this.events = {\n        prepare: this.onPrepare,\n        closing: this.onClosing,\n        keydown: this.onKeydown\n      };\n    }\n\n    return s(t, [{\n      key: "onPrepare",\n      value: function () {\n        this.getSlides().length < this.fancybox.option("Thumbs.minSlideCount") ? this.state = "disabled" : !0 === this.fancybox.option("Thumbs.autoStart") && this.fancybox.Carousel.Panzoom.content.height >= this.fancybox.option("Thumbs.minScreenHeight") && this.build();\n      }\n    }, {\n      key: "onClosing",\n      value: function () {\n        this.Carousel && this.Carousel.Panzoom.detachEvents();\n      }\n    }, {\n      key: "onKeydown",\n      value: function (t, e) {\n        e === t.option("Thumbs.key") && this.toggle();\n      }\n    }, {\n      key: "build",\n      value: function () {\n        var t = this;\n\n        if (!this.$container) {\n          var e = document.createElement("div");\n          e.classList.add("fancybox__thumbs"), this.fancybox.$carousel.parentNode.insertBefore(e, this.fancybox.$carousel.nextSibling), this.Carousel = new H(e, S(!0, {\n            Dots: !1,\n            Navigation: !1,\n            Sync: {\n              friction: 0\n            },\n            infinite: !1,\n            center: !0,\n            fill: !0,\n            dragFree: !0,\n            slidesPerPage: 1,\n            preload: 1\n          }, this.fancybox.option("Thumbs.Carousel"), {\n            Sync: {\n              target: this.fancybox.Carousel\n            },\n            slides: this.getSlides()\n          })), this.Carousel.Panzoom.on("wheel", function (e, i) {\n            i.preventDefault(), t.fancybox[i.deltaY < 0 ? "prev" : "next"]();\n          }), this.$container = e, this.state = "visible";\n        }\n      }\n    }, {\n      key: "getSlides",\n      value: function () {\n        var t,\n            e = [],\n            i = w(this.fancybox.items);\n\n        try {\n          for (i.s(); !(t = i.n()).done;) {\n            var n = t.value,\n                o = n.thumb;\n            o && e.push({\n              html: \'<div class="fancybox__thumb" style="background-image:url(\\\'\'.concat(o, "\')\\"></div>"),\n              customClass: "has-thumb has-".concat(n.type || "image")\n            });\n          }\n        } catch (t) {\n          i.e(t);\n        } finally {\n          i.f();\n        }\n\n        return e;\n      }\n    }, {\n      key: "toggle",\n      value: function () {\n        "visible" === this.state ? this.hide() : "hidden" === this.state ? this.show() : this.build();\n      }\n    }, {\n      key: "show",\n      value: function () {\n        "hidden" === this.state && (this.$container.style.display = "", this.Carousel.Panzoom.attachEvents(), this.state = "visible");\n      }\n    }, {\n      key: "hide",\n      value: function () {\n        "visible" === this.state && (this.Carousel.Panzoom.detachEvents(), this.$container.style.display = "none", this.state = "hidden");\n      }\n    }, {\n      key: "cleanup",\n      value: function () {\n        this.Carousel && (this.Carousel.destroy(), this.Carousel = null), this.$container && (this.$container.remove(), this.$container = null), this.state = "init";\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.fancybox.on(this.events);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.fancybox.off(this.events), this.cleanup();\n      }\n    }]), t;\n  }();\n\n  V.defaults = {\n    minSlideCount: 2,\n    minScreenHeight: 500,\n    autoStart: !0,\n    key: "t",\n    Carousel: {}\n  };\n\n  var Z = function (t, e) {\n    for (var i = new URL(t), n = new URLSearchParams(i.search), o = new URLSearchParams(), a = 0, s = [].concat(y(n), y(Object.entries(e))); a < s.length; a++) {\n      var r = m(s[a], 2),\n          l = r[0],\n          c = r[1];\n      "t" === l ? o.set("start", parseInt(c)) : o.set(l, c);\n    }\n\n    o = o.toString();\n    var h = t.match(/#t=((.*)?\\d+s)/);\n    return h && (o += "#t=".concat(h[1])), o;\n  },\n      G = {\n    video: {\n      autoplay: !0,\n      ratio: 16 / 9\n    },\n    youtube: {\n      autohide: 1,\n      fs: 1,\n      rel: 0,\n      hd: 1,\n      wmode: "transparent",\n      enablejsapi: 1,\n      html5: 1\n    },\n    vimeo: {\n      hd: 1,\n      show_title: 1,\n      show_byline: 1,\n      show_portrait: 0,\n      fullscreen: 1\n    },\n    html5video: {\n      tpl: \'<video class="fancybox__html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">\\n  <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\\\'t support embedded videos.</video>\',\n      format: ""\n    }\n  },\n      K = function () {\n    function t(e) {\n      o(this, t), this.fancybox = e;\n\n      for (var i = 0, n = ["onInit", "onReady", "onCreateSlide", "onRemoveSlide", "onSelectSlide", "onUnselectSlide", "onRefresh", "onMessage"]; i < n.length; i++) {\n        var a = n[i];\n        this[a] = this[a].bind(this);\n      }\n\n      this.events = {\n        init: this.onInit,\n        ready: this.onReady,\n        "Carousel.createSlide": this.onCreateSlide,\n        "Carousel.removeSlide": this.onRemoveSlide,\n        "Carousel.selectSlide": this.onSelectSlide,\n        "Carousel.unselectSlide": this.onUnselectSlide,\n        "Carousel.refresh": this.onRefresh\n      };\n    }\n\n    return s(t, [{\n      key: "onInit",\n      value: function () {\n        var t,\n            e = w(this.fancybox.items);\n\n        try {\n          for (e.s(); !(t = e.n()).done;) {\n            var i = t.value;\n            this.processType(i);\n          }\n        } catch (t) {\n          e.e(t);\n        } finally {\n          e.f();\n        }\n      }\n    }, {\n      key: "processType",\n      value: function (t) {\n        if (t.html) return t.src = t.html, t.type = "html", void delete t.html;\n        var e = t.src || "",\n            i = t.type || this.fancybox.options.type,\n            n = null;\n\n        if (!e || "string" == typeof e) {\n          if (n = e.match(/(?:youtube\\.com|youtu\\.be|youtube\\-nocookie\\.com)\\/(?:watch\\?(?:.*&)?v=|v\\/|u\\/|embed\\/?)?(videoseries\\?list=(?:.*)|[\\w-]{11}|\\?listType=(?:.*)&list=(?:.*))(?:.*)/i)) {\n            var o = Z(e, this.fancybox.option("Html.youtube")),\n                a = encodeURIComponent(n[1]);\n            t.videoId = a, t.src = "https://www.youtube-nocookie.com/embed/".concat(a, "?").concat(o), t.thumb = t.thumb || "https://i.ytimg.com/vi/".concat(a, "/mqdefault.jpg"), t.vendor = "youtube", i = "video";\n          } else if (n = e.match(/^.+vimeo.com\\/(?:\\/)?([\\d]+)(.*)?/)) {\n            var s = Z(e, this.fancybox.option("Html.vimeo")),\n                r = encodeURIComponent(n[1]);\n            t.videoId = r, t.src = "https://player.vimeo.com/video/".concat(r, "?").concat(s), t.vendor = "vimeo", i = "video";\n          } else (n = e.match(/(?:maps\\.)?google\\.([a-z]{2,3}(?:\\.[a-z]{2})?)\\/(?:(?:(?:maps\\/(?:place\\/(?:.*)\\/)?\\@(.*),(\\d+.?\\d+?)z))|(?:\\?ll=))(.*)?/i)) ? (t.src = "//maps.google.".concat(n[1], "/?ll=").concat((n[2] ? n[2] + "&z=" + Math.floor(n[3]) + (n[4] ? n[4].replace(/^\\//, "&") : "") : n[4] + "").replace(/\\?/, "&"), "&output=").concat(n[4] && n[4].indexOf("layer=c") > 0 ? "svembed" : "embed"), i = "map") : (n = e.match(/(?:maps\\.)?google\\.([a-z]{2,3}(?:\\.[a-z]{2})?)\\/(?:maps\\/search\\/)(.*)/i)) && (t.src = "//maps.google.".concat(n[1], "/maps?q=").concat(n[2].replace("query=", "q=").replace("api=1", ""), "&output=embed"), i = "map");\n\n          i || ("#" === e.charAt(0) ? i = "inline" : (n = e.match(/\\.(mp4|mov|ogv|webm)((\\?|#).*)?$/i)) ? (i = "html5video", t.format = t.format || "video/" + ("ogv" === n[1] ? "ogg" : n[1])) : e.match(/(^data:image\\/[a-z0-9+\\/=]*,)|(\\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\\?|#).*)?$)/i) ? i = "image" : e.match(/\\.(pdf)((\\?|#).*)?$/i) && (i = "pdf")), t.type = i || this.fancybox.option("defaultType", "image"), "html5video" !== i && "video" !== i || (t.video = S({}, this.fancybox.option("Html.video"), t.video), t._width && t._height ? t.ratio = parseFloat(t._width) / parseFloat(t._height) : t.ratio = t.ratio || t.video.ratio || G.video.ratio);\n        }\n      }\n    }, {\n      key: "onReady",\n      value: function () {\n        var t = this;\n        this.fancybox.Carousel.slides.forEach(function (e) {\n          e.$el && (t.setContent(e), e.index === t.fancybox.getSlide().index && t.playVideo(e));\n        });\n      }\n    }, {\n      key: "onCreateSlide",\n      value: function (t, e, i) {\n        "ready" === this.fancybox.state && this.setContent(i);\n      }\n    }, {\n      key: "loadInlineContent",\n      value: function (t) {\n        var e;\n        if (t.src instanceof HTMLElement) e = t.src;else if ("string" == typeof t.src) {\n          var i = t.src.split("#", 2),\n              n = 2 === i.length && "" === i[0] ? i[1] : i[0];\n          e = document.getElementById(n);\n        }\n\n        if (e) {\n          if ("clone" === t.type || e.$placeHolder) {\n            var o = (e = e.cloneNode(!0)).getAttribute("id");\n            o = o ? "".concat(o, "--clone") : "clone-".concat(this.fancybox.id, "-").concat(t.index), e.setAttribute("id", o);\n          } else {\n            var a = document.createElement("div");\n            a.classList.add("fancybox-placeholder"), e.parentNode.insertBefore(a, e), e.$placeHolder = a;\n          }\n\n          this.fancybox.setContent(t, e);\n        } else this.fancybox.setError(t, "{{ELEMENT_NOT_FOUND}}");\n      }\n    }, {\n      key: "loadAjaxContent",\n      value: function (t) {\n        var e = this.fancybox,\n            i = new XMLHttpRequest();\n        e.showLoading(t), i.onreadystatechange = function () {\n          i.readyState === XMLHttpRequest.DONE && "ready" === e.state && (e.hideLoading(t), 200 === i.status ? e.setContent(t, i.responseText) : e.setError(t, 404 === i.status ? "{{AJAX_NOT_FOUND}}" : "{{AJAX_FORBIDDEN}}"));\n        }, i.open("GET", t.src), i.setRequestHeader("X-Requested-With", "XMLHttpRequest"), i.send(t.ajax || null), t.xhr = i;\n      }\n    }, {\n      key: "loadIframeContent",\n      value: function (t) {\n        var e = this,\n            i = this.fancybox,\n            n = document.createElement("iframe");\n        if (n.className = "fancybox__iframe", n.setAttribute("id", "fancybox__iframe_".concat(i.id, "_").concat(t.index)), n.setAttribute("allow", "autoplay; fullscreen"), n.setAttribute("scrolling", "auto"), t.$iframe = n, "iframe" !== t.type || !1 === t.preload) return n.setAttribute("src", t.src), this.fancybox.setContent(t, n), void this.resizeIframe(t);\n        i.showLoading(t);\n        var o = document.createElement("div");\n        o.style.visibility = "hidden", this.fancybox.setContent(t, o), o.appendChild(n), n.onerror = function () {\n          i.setError(t, "{{IFRAME_ERROR}}");\n        }, n.onload = function () {\n          i.hideLoading(t);\n          var o = !1;\n          n.isReady || (n.isReady = !0, o = !0), n.src.length && (n.parentNode.style.visibility = "", e.resizeIframe(t), o && i.revealContent(t));\n        }, n.setAttribute("src", t.src);\n      }\n    }, {\n      key: "setAspectRatio",\n      value: function (t) {\n        var e = t.$content,\n            i = t.ratio;\n\n        if (e) {\n          var n = t._width,\n              o = t._height;\n\n          if (i || n && o) {\n            Object.assign(e.style, {\n              width: n && o ? "100%" : "",\n              height: n && o ? "100%" : "",\n              maxWidth: "",\n              maxHeight: ""\n            });\n            var a = e.offsetWidth,\n                s = e.offsetHeight;\n\n            if (o = o || s, (n = n || a) > a || o > s) {\n              var r = Math.min(a / n, s / o);\n              n *= r, o *= r;\n            }\n\n            Math.abs(n / o - i) > .01 && (i < n / o ? n = o * i : o = n / i), Object.assign(e.style, {\n              width: "".concat(n, "px"),\n              height: "".concat(o, "px")\n            });\n          }\n        }\n      }\n    }, {\n      key: "resizeIframe",\n      value: function (t) {\n        var e = t.$iframe;\n\n        if (e) {\n          var i = t._width || 0,\n              n = t._height || 0;\n          i && n && (t.autoSize = !1);\n          var o = e.parentNode,\n              a = o.style;\n          if (!1 !== t.preload && !1 !== t.autoSize) try {\n            var s = window.getComputedStyle(o),\n                r = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight),\n                l = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom),\n                c = e.contentWindow.document,\n                h = c.getElementsByTagName("html")[0],\n                d = c.body;\n            a.width = "", d.style.overflow = "hidden", i = i || h.scrollWidth + r, a.width = "".concat(i, "px"), d.style.overflow = "", a.flex = "0 0 auto", a.height = "".concat(d.scrollHeight, "px"), n = h.scrollHeight + l;\n          } catch (t) {}\n\n          if (i || n) {\n            var u = {\n              flex: "0 1 auto"\n            };\n            i && (u.width = "".concat(i, "px")), n && (u.height = "".concat(n, "px")), Object.assign(a, u);\n          }\n        }\n      }\n    }, {\n      key: "onRefresh",\n      value: function (t, e) {\n        var i = this;\n        e.slides.forEach(function (t) {\n          t.$el && (t.$iframe && i.resizeIframe(t), t.ratio && i.setAspectRatio(t));\n        });\n      }\n    }, {\n      key: "setContent",\n      value: function (t) {\n        if (t && !t.isDom) {\n          switch (t.type) {\n            case "html":\n              this.fancybox.setContent(t, t.src);\n              break;\n\n            case "html5video":\n              this.fancybox.setContent(t, this.fancybox.option("Html.html5video.tpl").replace(/\\{\\{src\\}\\}/gi, t.src).replace("{{format}}", t.format || t.html5video && t.html5video.format || "").replace("{{poster}}", t.poster || t.thumb || ""));\n              break;\n\n            case "inline":\n            case "clone":\n              this.loadInlineContent(t);\n              break;\n\n            case "ajax":\n              this.loadAjaxContent(t);\n              break;\n\n            case "pdf":\n            case "video":\n            case "map":\n              t.preload = !1;\n\n            case "iframe":\n              this.loadIframeContent(t);\n          }\n\n          t.ratio && this.setAspectRatio(t);\n        }\n      }\n    }, {\n      key: "onSelectSlide",\n      value: function (t, e, i) {\n        "ready" === t.state && this.playVideo(i);\n      }\n    }, {\n      key: "playVideo",\n      value: function (t) {\n        if ("html5video" === t.type && t.video.autoplay) try {\n          var e = t.$el.querySelector("video");\n\n          if (e) {\n            var i = e.play();\n            void 0 !== i && i.then(function () {}).catch(function (t) {\n              e.muted = !0, e.play();\n            });\n          }\n        } catch (t) {}\n\n        if ("video" === t.type && t.$iframe && t.$iframe.contentWindow) {\n          !function e() {\n            if ("done" === t.state && t.$iframe && t.$iframe.contentWindow) {\n              var i;\n              if (t.$iframe.isReady) return t.video && t.video.autoplay && (i = "youtube" == t.vendor ? {\n                event: "command",\n                func: "playVideo"\n              } : {\n                method: "play",\n                value: "true"\n              }), void (i && t.$iframe.contentWindow.postMessage(JSON.stringify(i), "*"));\n              "youtube" === t.vendor && (i = {\n                event: "listening",\n                id: t.$iframe.getAttribute("id")\n              }, t.$iframe.contentWindow.postMessage(JSON.stringify(i), "*"));\n            }\n\n            t.poller = setTimeout(e, 250);\n          }();\n        }\n      }\n    }, {\n      key: "onUnselectSlide",\n      value: function (t, e, i) {\n        if ("html5video" !== i.type) {\n          var n = !1;\n          "vimeo" == i.vendor ? n = {\n            method: "pause",\n            value: "true"\n          } : "youtube" === i.vendor && (n = {\n            event: "command",\n            func: "pauseVideo"\n          }), n && i.$iframe && i.$iframe.contentWindow && i.$iframe.contentWindow.postMessage(JSON.stringify(n), "*"), clearTimeout(i.poller);\n        } else try {\n          i.$el.querySelector("video").pause();\n        } catch (t) {}\n      }\n    }, {\n      key: "onRemoveSlide",\n      value: function (t, e, i) {\n        i.xhr && (i.xhr.abort(), i.xhr = null), i.$iframe && (i.$iframe.onload = i.$iframe.onerror = null, i.$iframe.src = "//about:blank", i.$iframe = null);\n        var n = i.$content;\n        "inline" === i.type && n && (n.classList.remove("fancybox__content"), "none" !== n.style.display && (n.style.display = "none")), i.$closeButton && (i.$closeButton.remove(), i.$closeButton = null);\n        var o = n && n.$placeHolder;\n        o && (o.parentNode.insertBefore(n, o), o.remove(), n.$placeHolder = null);\n      }\n    }, {\n      key: "onMessage",\n      value: function (t) {\n        try {\n          var e = JSON.parse(t.data);\n\n          if ("https://player.vimeo.com" === t.origin) {\n            if ("ready" === e.event) {\n              var i,\n                  n = w(document.getElementsByClassName("fancybox__iframe"));\n\n              try {\n                for (n.s(); !(i = n.n()).done;) {\n                  var o = i.value;\n                  o.contentWindow === t.source && (o.isReady = 1);\n                }\n              } catch (t) {\n                n.e(t);\n              } finally {\n                n.f();\n              }\n            }\n          } else "https://www.youtube-nocookie.com" === t.origin && "onReady" === e.event && (document.getElementById(e.id).isReady = 1);\n        } catch (t) {}\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.fancybox.on(this.events), window.addEventListener("message", this.onMessage, !1);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.fancybox.off(this.events), window.removeEventListener("message", this.onMessage, !1);\n      }\n    }]), t;\n  }();\n\n  K.defaults = G;\n\n  var J = function () {\n    function t(e) {\n      o(this, t), this.fancybox = e;\n\n      for (var i = 0, n = ["onReady", "onClosing", "onDone", "onPageChange", "onCreateSlide", "onRemoveSlide", "onImageStatusChange"]; i < n.length; i++) {\n        var a = n[i];\n        this[a] = this[a].bind(this);\n      }\n\n      this.events = {\n        ready: this.onReady,\n        closing: this.onClosing,\n        done: this.onDone,\n        "Carousel.change": this.onPageChange,\n        "Carousel.createSlide": this.onCreateSlide,\n        "Carousel.removeSlide": this.onRemoveSlide\n      };\n    }\n\n    return s(t, [{\n      key: "onReady",\n      value: function () {\n        var t = this;\n        this.fancybox.Carousel.slides.forEach(function (e) {\n          e.$el && t.setContent(e);\n        });\n      }\n    }, {\n      key: "onDone",\n      value: function (t, e) {\n        this.handleCursor(e);\n      }\n    }, {\n      key: "onClosing",\n      value: function (t) {\n        clearTimeout(this.clickTimer), this.clickTimer = null, t.Carousel.slides.forEach(function (t) {\n          t.$image && (t.state = "destroy"), t.Panzoom && t.Panzoom.detachEvents();\n        }), "closing" === this.fancybox.state && this.canZoom(t.getSlide()) && this.zoomOut();\n      }\n    }, {\n      key: "onCreateSlide",\n      value: function (t, e, i) {\n        "ready" === this.fancybox.state && this.setContent(i);\n      }\n    }, {\n      key: "onRemoveSlide",\n      value: function (t, e, i) {\n        i.$image && (i.$el.classList.remove(t.option("Image.canZoomInClass")), i.$image.remove(), i.$image = null), i.Panzoom && (i.Panzoom.destroy(), i.Panzoom = null), i.$el && i.$el.dataset && delete i.$el.dataset.imageFit;\n      }\n    }, {\n      key: "setContent",\n      value: function (t) {\n        var e = this;\n\n        if (!(t.isDom || t.html || t.type && "image" !== t.type || t.$image)) {\n          t.type = "image", t.state = "loading";\n          var i = document.createElement("div");\n          i.style.visibility = "hidden";\n          var n = document.createElement("img");\n          n.addEventListener("load", function (i) {\n            i.stopImmediatePropagation(), e.onImageStatusChange(t);\n          }), n.addEventListener("error", function () {\n            e.onImageStatusChange(t);\n          }), n.src = t.src, n.alt = "", n.draggable = !1, n.classList.add("fancybox__image"), t.srcset && n.setAttribute("srcset", t.srcset), t.sizes && n.setAttribute("sizes", t.sizes), t.$image = n;\n          var o = this.fancybox.option("Image.wrap");\n\n          if (o) {\n            var a = document.createElement("div");\n            a.classList.add("string" == typeof o ? o : "fancybox__image-wrap"), a.appendChild(n), i.appendChild(a), t.$wrap = a;\n          } else i.appendChild(n);\n\n          t.$el.dataset.imageFit = this.fancybox.option("Image.fit"), this.fancybox.setContent(t, i), n.complete || n.error ? this.onImageStatusChange(t) : this.fancybox.showLoading(t);\n        }\n      }\n    }, {\n      key: "onImageStatusChange",\n      value: function (t) {\n        var e = this,\n            i = t.$image;\n        i && "loading" === t.state && (i.complete && i.naturalWidth && i.naturalHeight ? (this.fancybox.hideLoading(t), "contain" === this.fancybox.option("Image.fit") && this.initSlidePanzoom(t), t.$el.addEventListener("wheel", function (i) {\n          return e.onWheel(t, i);\n        }, {\n          passive: !1\n        }), t.$content.addEventListener("click", function (i) {\n          return e.onClick(t, i);\n        }, {\n          passive: !1\n        }), this.revealContent(t)) : this.fancybox.setError(t, "{{IMAGE_ERROR}}"));\n      }\n    }, {\n      key: "initSlidePanzoom",\n      value: function (t) {\n        var e = this;\n        t.Panzoom || (t.Panzoom = new I(t.$el, S(!0, this.fancybox.option("Image.Panzoom", {}), {\n          viewport: t.$wrap,\n          content: t.$image,\n          width: t._width,\n          height: t._height,\n          wrapInner: !1,\n          textSelection: !0,\n          touch: this.fancybox.option("Image.touch"),\n          panOnlyZoomed: !0,\n          click: !1,\n          wheel: !1\n        })), t.Panzoom.on("startAnimation", function () {\n          e.fancybox.trigger("Image.startAnimation", t);\n        }), t.Panzoom.on("endAnimation", function () {\n          "zoomIn" === t.state && e.fancybox.done(t), e.handleCursor(t), e.fancybox.trigger("Image.endAnimation", t);\n        }), t.Panzoom.on("afterUpdate", function () {\n          e.handleCursor(t), e.fancybox.trigger("Image.afterUpdate", t);\n        }));\n      }\n    }, {\n      key: "revealContent",\n      value: function (t) {\n        null === this.fancybox.Carousel.prevPage && t.index === this.fancybox.options.startIndex && this.canZoom(t) ? this.zoomIn() : this.fancybox.revealContent(t);\n      }\n    }, {\n      key: "getZoomInfo",\n      value: function (t) {\n        var e = t.$thumb.getBoundingClientRect(),\n            i = e.width,\n            n = e.height,\n            o = t.$content.getBoundingClientRect(),\n            a = o.width,\n            s = o.height,\n            r = o.top - e.top,\n            l = o.left - e.left,\n            c = this.fancybox.option("Image.zoomOpacity");\n        return "auto" === c && (c = Math.abs(i / n - a / s) > .1), {\n          top: r,\n          left: l,\n          scale: a && i ? i / a : 1,\n          opacity: c\n        };\n      }\n    }, {\n      key: "canZoom",\n      value: function (t) {\n        var e = this.fancybox,\n            i = e.$container;\n        if (window.visualViewport && 1 !== window.visualViewport.scale) return !1;\n        if (t.Panzoom && !t.Panzoom.content.width) return !1;\n        if (!e.option("Image.zoom") || "contain" !== e.option("Image.fit")) return !1;\n        var n = t.$thumb;\n        if (!n || "loading" === t.state) return !1;\n        i.classList.add("fancybox__no-click");\n        var o,\n            a = n.getBoundingClientRect();\n\n        if (this.fancybox.option("Image.ignoreCoveredThumbnail")) {\n          var s = document.elementFromPoint(a.left + 1, a.top + 1) === n,\n              r = document.elementFromPoint(a.right - 1, a.bottom - 1) === n;\n          o = s && r;\n        } else o = document.elementFromPoint(a.left + .5 * a.width, a.top + .5 * a.height) === n;\n\n        return i.classList.remove("fancybox__no-click"), o;\n      }\n    }, {\n      key: "zoomIn",\n      value: function () {\n        var t = this.fancybox,\n            e = t.getSlide(),\n            i = e.Panzoom,\n            n = this.getZoomInfo(e),\n            o = n.top,\n            a = n.left,\n            s = n.scale,\n            r = n.opacity;\n        t.trigger("reveal", e), i.panTo({\n          x: -1 * a,\n          y: -1 * o,\n          scale: s,\n          friction: 0,\n          ignoreBounds: !0\n        }), e.$content.style.visibility = "", e.state = "zoomIn", !0 === r && i.on("afterTransform", function (t) {\n          "zoomIn" !== e.state && "zoomOut" !== e.state || (t.$content.style.opacity = Math.min(1, 1 - (1 - t.content.scale) / (1 - s)));\n        }), i.panTo({\n          x: 0,\n          y: 0,\n          scale: 1,\n          friction: this.fancybox.option("Image.zoomFriction")\n        });\n      }\n    }, {\n      key: "zoomOut",\n      value: function () {\n        var t = this,\n            e = this.fancybox,\n            i = e.getSlide(),\n            n = i.Panzoom;\n\n        if (n) {\n          i.state = "zoomOut", e.state = "customClosing", i.$caption && (i.$caption.style.visibility = "hidden");\n\n          var o = this.fancybox.option("Image.zoomFriction"),\n              a = function (e) {\n            var a = t.getZoomInfo(i),\n                s = a.top,\n                r = a.left,\n                l = a.scale,\n                c = a.opacity;\n            e || c || (o *= .82), n.panTo({\n              x: -1 * r,\n              y: -1 * s,\n              scale: l,\n              friction: o,\n              ignoreBounds: !0\n            }), o *= .98;\n          };\n\n          window.addEventListener("scroll", a), n.once("endAnimation", function () {\n            window.removeEventListener("scroll", a), e.destroy();\n          }), a();\n        }\n      }\n    }, {\n      key: "handleCursor",\n      value: function (t) {\n        if ("image" === t.type && t.$el) {\n          var e = t.Panzoom,\n              i = this.fancybox.option("Image.click", !1, t),\n              n = this.fancybox.option("Image.touch"),\n              o = t.$el.classList,\n              a = this.fancybox.option("Image.canZoomInClass"),\n              s = this.fancybox.option("Image.canZoomOutClass");\n          if (o.remove(s), o.remove(a), e && "toggleZoom" === i) e && 1 === e.content.scale && e.option("maxScale") - e.content.scale > .01 ? o.add(a) : e.content.scale > 1 && !n && o.add(s);else "close" === i && o.add(s);\n        }\n      }\n    }, {\n      key: "onWheel",\n      value: function (t, e) {\n        if ("ready" === this.fancybox.state && !1 !== this.fancybox.trigger("Image.wheel", e)) switch (this.fancybox.option("Image.wheel")) {\n          case "zoom":\n            "done" === t.state && t.Panzoom && t.Panzoom.zoomWithWheel(e);\n            break;\n\n          case "close":\n            this.fancybox.close();\n            break;\n\n          case "slide":\n            this.fancybox[e.deltaY < 0 ? "prev" : "next"]();\n        }\n      }\n    }, {\n      key: "onClick",\n      value: function (t, e) {\n        var i = this;\n\n        if ("ready" === this.fancybox.state) {\n          var n = t.Panzoom;\n\n          if (!n || !n.dragPosition.midPoint && 0 === n.dragOffset.x && 0 === n.dragOffset.y && 1 === n.dragOffset.scale) {\n            if (this.fancybox.Carousel.Panzoom.lockAxis) return !1;\n\n            var o = function (n) {\n              switch (n) {\n                case "toggleZoom":\n                  e.stopPropagation(), t.Panzoom && t.Panzoom.zoomWithClick(e);\n                  break;\n\n                case "close":\n                  i.fancybox.close();\n                  break;\n\n                case "next":\n                  e.stopPropagation(), i.fancybox.next();\n              }\n            },\n                a = this.fancybox.option("Image.click"),\n                s = this.fancybox.option("Image.doubleClick");\n\n            s ? this.clickTimer ? (clearTimeout(this.clickTimer), this.clickTimer = null, o(s)) : this.clickTimer = setTimeout(function () {\n              i.clickTimer = null, o(a);\n            }, 300) : o(a);\n          }\n        }\n      }\n    }, {\n      key: "onPageChange",\n      value: function (t, e) {\n        var i = t.getSlide();\n        e.slides.forEach(function (t) {\n          t.Panzoom && "done" === t.state && t.index !== i.index && t.Panzoom.panTo({\n            x: 0,\n            y: 0,\n            scale: 1,\n            friction: .8\n          });\n        });\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.fancybox.on(this.events);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.fancybox.off(this.events);\n      }\n    }]), t;\n  }();\n\n  J.defaults = {\n    canZoomInClass: "can-zoom_in",\n    canZoomOutClass: "can-zoom_out",\n    zoom: !0,\n    zoomOpacity: "auto",\n    zoomFriction: .82,\n    ignoreCoveredThumbnail: !1,\n    touch: !0,\n    click: "toggleZoom",\n    doubleClick: null,\n    wheel: "zoom",\n    fit: "contain",\n    wrap: !1,\n    Panzoom: {\n      ratio: 1\n    }\n  };\n\n  var Q = function () {\n    function t(e) {\n      o(this, t), this.fancybox = e;\n\n      for (var i = 0, n = ["onChange", "onClosing"]; i < n.length; i++) {\n        var a = n[i];\n        this[a] = this[a].bind(this);\n      }\n\n      this.events = {\n        initCarousel: this.onChange,\n        "Carousel.change": this.onChange,\n        closing: this.onClosing\n      }, this.hasCreatedHistory = !1, this.origHash = "", this.timer = null;\n    }\n\n    return s(t, [{\n      key: "onChange",\n      value: function (t) {\n        var e = this,\n            i = t.Carousel;\n        this.timer && clearTimeout(this.timer);\n        var n = null === i.prevPage,\n            o = t.getSlide(),\n            a = new URL(document.URL).hash,\n            s = !1;\n        if (o.slug) s = "#" + o.slug;else {\n          var r = o.$trigger && o.$trigger.dataset,\n              l = t.option("slug") || r && r.fancybox;\n          l && l.length && "true" !== l && (s = "#" + l + (i.slides.length > 1 ? "-" + (o.index + 1) : ""));\n        }\n        n && (this.origHash = a !== s ? a : ""), s && a !== s && (this.timer = setTimeout(function () {\n          try {\n            window.history[n ? "pushState" : "replaceState"]({}, document.title, window.location.pathname + window.location.search + s), n && (e.hasCreatedHistory = !0);\n          } catch (t) {}\n        }, 300));\n      }\n    }, {\n      key: "onClosing",\n      value: function () {\n        if (this.timer && clearTimeout(this.timer), !0 !== this.hasSilentClose) try {\n          return void window.history.replaceState({}, document.title, window.location.pathname + window.location.search + (this.origHash || ""));\n        } catch (t) {}\n      }\n    }, {\n      key: "attach",\n      value: function (t) {\n        t.on(this.events);\n      }\n    }, {\n      key: "detach",\n      value: function (t) {\n        t.off(this.events);\n      }\n    }], [{\n      key: "startFromUrl",\n      value: function () {\n        var e = t.Fancybox;\n\n        if (e && !e.getInstance() && !1 !== e.defaults.Hash) {\n          var i = t.getParsedURL(),\n              n = i.hash,\n              o = i.slug,\n              a = i.index;\n\n          if (o) {\n            var s = document.querySelector(\'[data-slug="\'.concat(n, \'"]\'));\n\n            if (s && s.dispatchEvent(new CustomEvent("click", {\n              bubbles: !0,\n              cancelable: !0\n            })), !e.getInstance()) {\n              var r = document.querySelectorAll(\'[data-fancybox="\'.concat(o, \'"]\'));\n              r.length && (null === a && 1 === r.length ? s = r[0] : a && (s = r[a - 1]), s && s.dispatchEvent(new CustomEvent("click", {\n                bubbles: !0,\n                cancelable: !0\n              })));\n            }\n          }\n        }\n      }\n    }, {\n      key: "onHashChange",\n      value: function () {\n        var e = t.getParsedURL(),\n            i = e.slug,\n            n = e.index,\n            o = t.Fancybox,\n            a = o && o.getInstance();\n\n        if (a && a.plugins.Hash) {\n          if (i) {\n            var s = a.Carousel;\n            if (i === a.option("slug")) return s.slideTo(n - 1);\n            var r,\n                l = w(s.slides);\n\n            try {\n              for (l.s(); !(r = l.n()).done;) {\n                var c = r.value;\n                if (c.slug && c.slug === i) return s.slideTo(c.index);\n              }\n            } catch (t) {\n              l.e(t);\n            } finally {\n              l.f();\n            }\n\n            var h = a.getSlide(),\n                d = h.$trigger && h.$trigger.dataset;\n            if (d && d.fancybox === i) return s.slideTo(n - 1);\n          }\n\n          a.plugins.Hash.hasSilentClose = !0, a.close();\n        }\n\n        t.startFromUrl();\n      }\n    }, {\n      key: "create",\n      value: function (e) {\n        function i() {\n          window.addEventListener("hashchange", t.onHashChange, !1), t.startFromUrl();\n        }\n\n        t.Fancybox = e, j && window.requestAnimationFrame(function () {\n          /complete|interactive|loaded/.test(document.readyState) ? i() : document.addEventListener("DOMContentLoaded", i);\n        });\n      }\n    }, {\n      key: "destroy",\n      value: function () {\n        window.removeEventListener("hashchange", t.onHashChange, !1);\n      }\n    }, {\n      key: "getParsedURL",\n      value: function () {\n        var t = window.location.hash.substr(1),\n            e = t.split("-"),\n            i = e.length > 1 && /^\\+?\\d+$/.test(e[e.length - 1]) && parseInt(e.pop(-1), 10) || null;\n        return {\n          hash: t,\n          slug: e.join("-"),\n          index: i\n        };\n      }\n    }]), t;\n  }(),\n      tt = {\n    pageXOffset: 0,\n    pageYOffset: 0,\n    element: function () {\n      return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n    },\n    activate: function (t) {\n      tt.pageXOffset = window.pageXOffset, tt.pageYOffset = window.pageYOffset, t.requestFullscreen ? t.requestFullscreen() : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : t.msRequestFullscreen && t.msRequestFullscreen();\n    },\n    deactivate: function () {\n      document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen();\n    }\n  },\n      et = function () {\n    function t(e) {\n      o(this, t), this.fancybox = e, this.active = !1, this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n    }\n\n    return s(t, [{\n      key: "isActive",\n      value: function () {\n        return this.active;\n      }\n    }, {\n      key: "setTimer",\n      value: function () {\n        var t = this;\n\n        if (this.active && !this.timer) {\n          var e = this.fancybox.option("slideshow.delay", 3e3);\n          this.timer = setTimeout(function () {\n            t.timer = null, t.fancybox.option("infinite") || t.fancybox.getSlide().index !== t.fancybox.Carousel.slides.length - 1 ? t.fancybox.next() : t.fancybox.jumpTo(0, {\n              friction: 0\n            });\n          }, e);\n          var i = this.$progress;\n          i || ((i = document.createElement("div")).classList.add("fancybox__progress"), this.fancybox.$carousel.parentNode.insertBefore(i, this.fancybox.$carousel), this.$progress = i, i.offsetHeight), i.style.transitionDuration = "".concat(e, "ms"), i.style.transform = "scaleX(1)";\n        }\n      }\n    }, {\n      key: "clearTimer",\n      value: function () {\n        clearTimeout(this.timer), this.timer = null, this.$progress && (this.$progress.style.transitionDuration = "", this.$progress.style.transform = "", this.$progress.offsetHeight);\n      }\n    }, {\n      key: "activate",\n      value: function () {\n        this.active || (this.active = !0, this.fancybox.$container.classList.add("has-slideshow"), "done" === this.fancybox.getSlide().state && this.setTimer(), document.addEventListener("visibilitychange", this.handleVisibilityChange, !1));\n      }\n    }, {\n      key: "handleVisibilityChange",\n      value: function () {\n        this.deactivate();\n      }\n    }, {\n      key: "deactivate",\n      value: function () {\n        this.active = !1, this.clearTimer(), this.fancybox.$container.classList.remove("has-slideshow"), document.removeEventListener("visibilitychange", this.handleVisibilityChange, !1);\n      }\n    }, {\n      key: "toggle",\n      value: function () {\n        this.active ? this.deactivate() : this.fancybox.Carousel.slides.length > 1 && this.activate();\n      }\n    }]), t;\n  }(),\n      it = {\n    display: ["counter", "zoom", "slideshow", "fullscreen", "thumbs", "close"],\n    autoEnable: !0,\n    items: {\n      counter: {\n        position: "left",\n        type: "div",\n        class: "fancybox__counter",\n        html: \'<span data-fancybox-index=""></span>&nbsp;/&nbsp;<span data-fancybox-count=""></span>\',\n        attr: {\n          tabindex: -1\n        }\n      },\n      prev: {\n        type: "button",\n        class: "fancybox__button--prev",\n        label: "PREV",\n        html: \'<svg viewBox="0 0 24 24"><path d="M15 4l-8 8 8 8"/></svg>\',\n        attr: {\n          "data-fancybox-prev": ""\n        }\n      },\n      next: {\n        type: "button",\n        class: "fancybox__button--next",\n        label: "NEXT",\n        html: \'<svg viewBox="0 0 24 24"><path d="M8 4l8 8-8 8"/></svg>\',\n        attr: {\n          "data-fancybox-next": ""\n        }\n      },\n      fullscreen: {\n        type: "button",\n        class: "fancybox__button--fullscreen",\n        label: "TOGGLE_FULLSCREEN",\n        html: \'<svg viewBox="0 0 24 24">\\n                <g><path d="M3 8 V3h5"></path><path d="M21 8V3h-5"></path><path d="M8 21H3v-5"></path><path d="M16 21h5v-5"></path></g>\\n                <g><path d="M7 2v5H2M17 2v5h5M2 17h5v5M22 17h-5v5"/></g>\\n            </svg>\',\n        click: function (t) {\n          t.preventDefault(), tt.element() ? tt.deactivate() : tt.activate(this.fancybox.$container);\n        }\n      },\n      slideshow: {\n        type: "button",\n        class: "fancybox__button--slideshow",\n        label: "TOGGLE_SLIDESHOW",\n        html: \'<svg viewBox="0 0 24 24">\\n                <g><path d="M6 4v16"/><path d="M20 12L6 20"/><path d="M20 12L6 4"/></g>\\n                <g><path d="M7 4v15M17 4v15"/></g>\\n            </svg>\',\n        click: function (t) {\n          t.preventDefault(), this.Slideshow.toggle();\n        }\n      },\n      zoom: {\n        type: "button",\n        class: "fancybox__button--zoom",\n        label: "TOGGLE_ZOOM",\n        html: \'<svg viewBox="0 0 24 24"><circle cx="10" cy="10" r="7"></circle><path d="M16 16 L21 21"></svg>\',\n        click: function (t) {\n          t.preventDefault();\n          var e = this.fancybox.getSlide().Panzoom;\n          e && e.toggleZoom();\n        }\n      },\n      download: {\n        type: "link",\n        label: "DOWNLOAD",\n        class: "fancybox__button--download",\n        html: \'<svg viewBox="0 0 24 24"><path d="M12 15V3m0 12l-4-4m4 4l4-4M2 17l.62 2.48A2 2 0 004.56 21h14.88a2 2 0 001.94-1.51L22 17"/></svg>\',\n        click: function (t) {\n          t.stopPropagation();\n        }\n      },\n      thumbs: {\n        type: "button",\n        label: "TOGGLE_THUMBS",\n        class: "fancybox__button--thumbs",\n        html: \'<svg viewBox="0 0 24 24"><circle cx="4" cy="4" r="1" /><circle cx="12" cy="4" r="1" transform="rotate(90 12 4)"/><circle cx="20" cy="4" r="1" transform="rotate(90 20 4)"/><circle cx="4" cy="12" r="1" transform="rotate(90 4 12)"/><circle cx="12" cy="12" r="1" transform="rotate(90 12 12)"/><circle cx="20" cy="12" r="1" transform="rotate(90 20 12)"/><circle cx="4" cy="20" r="1" transform="rotate(90 4 20)"/><circle cx="12" cy="20" r="1" transform="rotate(90 12 20)"/><circle cx="20" cy="20" r="1" transform="rotate(90 20 20)"/></svg>\',\n        click: function (t) {\n          t.stopPropagation();\n          var e = this.fancybox.plugins.Thumbs;\n          e && e.toggle();\n        }\n      },\n      close: {\n        type: "button",\n        label: "CLOSE",\n        class: "fancybox__button--close",\n        html: \'<svg viewBox="0 0 24 24"><path d="M20 20L4 4m16 0L4 20"></path></svg>\',\n        attr: {\n          "data-fancybox-close": "",\n          tabindex: 0\n        }\n      }\n    }\n  },\n      nt = function () {\n    function t(e) {\n      var i = this;\n      o(this, t), this.fancybox = e, this.$container = null, this.state = "init";\n\n      for (var n = 0, a = ["onInit", "onPrepare", "onDone", "onKeydown", "onClosing", "onChange", "onSettle", "onRefresh"]; n < a.length; n++) {\n        var s = a[n];\n        this[s] = this[s].bind(this);\n      }\n\n      this.events = {\n        init: this.onInit,\n        prepare: this.onPrepare,\n        done: this.onDone,\n        keydown: this.onKeydown,\n        closing: this.onClosing,\n        "Carousel.change": this.onChange,\n        "Carousel.settle": this.onSettle,\n        "Carousel.Panzoom.touchStart": function () {\n          return i.onRefresh();\n        },\n        "Image.startAnimation": function (t, e) {\n          return i.onRefresh(e);\n        },\n        "Image.afterUpdate": function (t, e) {\n          return i.onRefresh(e);\n        }\n      };\n    }\n\n    return s(t, [{\n      key: "onInit",\n      value: function () {\n        if (this.fancybox.option("Toolbar.autoEnable")) {\n          var t,\n              e = !1,\n              i = w(this.fancybox.items);\n\n          try {\n            for (i.s(); !(t = i.n()).done;) {\n              if ("image" === t.value.type) {\n                e = !0;\n                break;\n              }\n            }\n          } catch (t) {\n            i.e(t);\n          } finally {\n            i.f();\n          }\n\n          if (!e) return void (this.state = "disabled");\n        }\n\n        var n,\n            o = w(this.fancybox.option("Toolbar.display"));\n\n        try {\n          for (o.s(); !(n = o.n()).done;) {\n            var a = n.value;\n\n            if ("close" === (k(a) ? a.id : a)) {\n              this.fancybox.options.closeButton = !1;\n              break;\n            }\n          }\n        } catch (t) {\n          o.e(t);\n        } finally {\n          o.f();\n        }\n      }\n    }, {\n      key: "onPrepare",\n      value: function () {\n        var t = this.fancybox;\n        if ("init" === this.state && (this.build(), this.update(), this.Slideshow = new et(t), !t.Carousel.prevPage && (t.option("slideshow.autoStart") && this.Slideshow.activate(), t.option("fullscreen.autoStart") && !tt.element()))) try {\n          tt.activate(t.$container);\n        } catch (t) {}\n      }\n    }, {\n      key: "onFsChange",\n      value: function () {\n        window.scrollTo(tt.pageXOffset, tt.pageYOffset);\n      }\n    }, {\n      key: "onSettle",\n      value: function () {\n        var t = this.fancybox,\n            e = this.Slideshow;\n        e && e.isActive() && (t.getSlide().index !== t.Carousel.slides.length - 1 || t.option("infinite") ? "done" === t.getSlide().state && e.setTimer() : e.deactivate());\n      }\n    }, {\n      key: "onChange",\n      value: function () {\n        this.update(), this.Slideshow && this.Slideshow.isActive() && this.Slideshow.clearTimer();\n      }\n    }, {\n      key: "onDone",\n      value: function (t, e) {\n        var i = this.Slideshow;\n        e.index === t.getSlide().index && (this.update(), i && i.isActive() && (t.option("infinite") || e.index !== t.Carousel.slides.length - 1 ? i.setTimer() : i.deactivate()));\n      }\n    }, {\n      key: "onRefresh",\n      value: function (t) {\n        t && t.index !== this.fancybox.getSlide().index || (this.update(), !this.Slideshow || !this.Slideshow.isActive() || t && "done" !== t.state || this.Slideshow.deactivate());\n      }\n    }, {\n      key: "onKeydown",\n      value: function (t, e, i) {\n        " " === e && this.Slideshow && (this.Slideshow.toggle(), i.preventDefault());\n      }\n    }, {\n      key: "onClosing",\n      value: function () {\n        this.Slideshow && this.Slideshow.deactivate(), document.removeEventListener("fullscreenchange", this.onFsChange);\n      }\n    }, {\n      key: "createElement",\n      value: function (t) {\n        var e, i;\n        ("div" === t.type ? e = document.createElement("div") : (e = document.createElement("link" === t.type ? "a" : "button")).classList.add("carousel__button"), e.innerHTML = t.html, e.setAttribute("tabindex", t.tabindex || 0), t.class) && (i = e.classList).add.apply(i, y(t.class.split(" ")));\n\n        for (var n in t.attr) e.setAttribute(n, t.attr[n]);\n\n        t.label && e.setAttribute("title", this.fancybox.localize("{{".concat(t.label, "}}"))), t.click && e.addEventListener("click", t.click.bind(this)), "prev" === t.id && e.setAttribute("data-fancybox-prev", ""), "next" === t.id && e.setAttribute("data-fancybox-next", "");\n        var o = e.querySelector("svg");\n        return o && (o.setAttribute("role", "img"), o.setAttribute("tabindex", "-1"), o.setAttribute("xmlns", "http://www.w3.org/2000/svg")), e;\n      }\n    }, {\n      key: "build",\n      value: function () {\n        var t = this;\n        this.cleanup();\n        var e,\n            i = this.fancybox.option("Toolbar.items"),\n            n = [{\n          position: "left",\n          items: []\n        }, {\n          position: "center",\n          items: []\n        }, {\n          position: "right",\n          items: []\n        }],\n            o = this.fancybox.plugins.Thumbs,\n            a = w(this.fancybox.option("Toolbar.display"));\n\n        try {\n          var s = function () {\n            var a = e.value,\n                s = void 0,\n                r = void 0;\n            if (k(a) ? (s = a.id, r = S({}, i[s], a)) : r = i[s = a], ["counter", "next", "prev", "slideshow"].includes(s) && t.fancybox.items.length < 2) return "continue";\n\n            if ("fullscreen" === s) {\n              if (!document.fullscreenEnabled || window.fullScreen) return "continue";\n              document.addEventListener("fullscreenchange", t.onFsChange);\n            }\n\n            if ("thumbs" === s && (!o || "disabled" === o.state)) return "continue";\n            if (!r) return "continue";\n            var l = r.position || "right",\n                c = n.find(function (t) {\n              return t.position === l;\n            });\n            c && c.items.push(r);\n          };\n\n          for (a.s(); !(e = a.n()).done;) s();\n        } catch (t) {\n          a.e(t);\n        } finally {\n          a.f();\n        }\n\n        var r = document.createElement("div");\n        r.classList.add("fancybox__toolbar");\n\n        for (var l = 0, c = n; l < c.length; l++) {\n          var h = c[l];\n\n          if (h.items.length) {\n            var d = document.createElement("div");\n            d.classList.add("fancybox__toolbar__items"), d.classList.add("fancybox__toolbar__items--".concat(h.position));\n            var u,\n                f = w(h.items);\n\n            try {\n              for (f.s(); !(u = f.n()).done;) {\n                var v = u.value;\n                d.appendChild(this.createElement(v));\n              }\n            } catch (t) {\n              f.e(t);\n            } finally {\n              f.f();\n            }\n\n            r.appendChild(d);\n          }\n        }\n\n        this.fancybox.$carousel.parentNode.insertBefore(r, this.fancybox.$carousel), this.$container = r;\n      }\n    }, {\n      key: "update",\n      value: function () {\n        var t,\n            e = this.fancybox.getSlide(),\n            i = e.index,\n            n = this.fancybox.items.length,\n            o = e.downloadSrc || ("image" !== e.type || e.error ? null : e.src),\n            a = w(this.fancybox.$container.querySelectorAll("a.fancybox__button--download"));\n\n        try {\n          for (a.s(); !(t = a.n()).done;) {\n            var s = t.value;\n            o ? (s.removeAttribute("disabled"), s.removeAttribute("tabindex"), s.setAttribute("href", o), s.setAttribute("download", o), s.setAttribute("target", "_blank")) : (s.setAttribute("disabled", ""), s.setAttribute("tabindex", -1), s.removeAttribute("href"), s.removeAttribute("download"));\n          }\n        } catch (t) {\n          a.e(t);\n        } finally {\n          a.f();\n        }\n\n        var r,\n            l = e.Panzoom,\n            c = l && l.option("maxScale") > l.option("baseScale"),\n            h = w(this.fancybox.$container.querySelectorAll(".fancybox__button--zoom"));\n\n        try {\n          for (h.s(); !(r = h.n()).done;) {\n            var d = r.value;\n            c ? d.removeAttribute("disabled") : d.setAttribute("disabled", "");\n          }\n        } catch (t) {\n          h.e(t);\n        } finally {\n          h.f();\n        }\n\n        var u,\n            f = w(this.fancybox.$container.querySelectorAll("[data-fancybox-index]"));\n\n        try {\n          for (f.s(); !(u = f.n()).done;) {\n            u.value.innerHTML = e.index + 1;\n          }\n        } catch (t) {\n          f.e(t);\n        } finally {\n          f.f();\n        }\n\n        var v,\n            p = w(this.fancybox.$container.querySelectorAll("[data-fancybox-count]"));\n\n        try {\n          for (p.s(); !(v = p.n()).done;) {\n            v.value.innerHTML = n;\n          }\n        } catch (t) {\n          p.e(t);\n        } finally {\n          p.f();\n        }\n\n        if (!this.fancybox.option("infinite")) {\n          var g,\n              m = w(this.fancybox.$container.querySelectorAll("[data-fancybox-prev]"));\n\n          try {\n            for (m.s(); !(g = m.n()).done;) {\n              var y = g.value;\n              0 === i ? y.setAttribute("disabled", "") : y.removeAttribute("disabled");\n            }\n          } catch (t) {\n            m.e(t);\n          } finally {\n            m.f();\n          }\n\n          var b,\n              x = w(this.fancybox.$container.querySelectorAll("[data-fancybox-next]"));\n\n          try {\n            for (x.s(); !(b = x.n()).done;) {\n              var k = b.value;\n              i === n - 1 ? k.setAttribute("disabled", "") : k.removeAttribute("disabled");\n            }\n          } catch (t) {\n            x.e(t);\n          } finally {\n            x.f();\n          }\n        }\n      }\n    }, {\n      key: "cleanup",\n      value: function () {\n        this.Slideshow && this.Slideshow.isActive() && this.Slideshow.clearTimer(), this.$container && this.$container.remove(), this.$container = null;\n      }\n    }, {\n      key: "attach",\n      value: function () {\n        this.fancybox.on(this.events);\n      }\n    }, {\n      key: "detach",\n      value: function () {\n        this.fancybox.off(this.events), this.cleanup();\n      }\n    }]), t;\n  }();\n\n  nt.defaults = it;\n\n  var ot = {\n    ScrollLock: Y,\n    Thumbs: V,\n    Html: K,\n    Toolbar: nt,\n    Image: J,\n    Hash: Q\n  },\n      at = {\n    startIndex: 0,\n    preload: 1,\n    infinite: !0,\n    showClass: "fancybox-zoomInUp",\n    hideClass: "fancybox-fadeOut",\n    animated: !0,\n    hideScrollbar: !0,\n    parentEl: null,\n    mainClass: null,\n    autoFocus: !0,\n    trapFocus: !0,\n    placeFocusBack: !0,\n    click: "close",\n    closeButton: "inside",\n    dragToClose: !0,\n    keyboard: {\n      Escape: "close",\n      Delete: "close",\n      Backspace: "close",\n      PageUp: "next",\n      PageDown: "prev",\n      ArrowUp: "next",\n      ArrowDown: "prev",\n      ArrowRight: "next",\n      ArrowLeft: "prev"\n    },\n    template: {\n      closeButton: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M20 20L4 4m16 0L4 20"/></svg>\',\n      spinner: \'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="25 25 50 50" tabindex="-1"><circle cx="50" cy="50" r="20"/></svg>\',\n      main: null\n    },\n    l10n: {\n      CLOSE: "Close",\n      NEXT: "Next",\n      PREV: "Previous",\n      MODAL: "You can close this modal content with the ESC key",\n      ERROR: "Something Went Wrong, Please Try Again Later",\n      IMAGE_ERROR: "Image Not Found",\n      ELEMENT_NOT_FOUND: "HTML Element Not Found",\n      AJAX_NOT_FOUND: "Error Loading AJAX : Not Found",\n      AJAX_FORBIDDEN: "Error Loading AJAX : Forbidden",\n      IFRAME_ERROR: "Error Loading Page",\n      TOGGLE_ZOOM: "Toggle zoom level",\n      TOGGLE_THUMBS: "Toggle thumbnails",\n      TOGGLE_SLIDESHOW: "Toggle slideshow",\n      TOGGLE_FULLSCREEN: "Toggle full-screen mode",\n      DOWNLOAD: "Download"\n    }\n  },\n      st = new Map(),\n      rt = 0,\n      lt = function (t) {\n    l(i, t);\n    var e = f(i);\n\n    function i(t) {\n      var n,\n          a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      return o(this, i), t = t.map(function (t) {\n        return t.width && (t._width = t.width), t.height && (t._height = t.height), t;\n      }), (n = e.call(this, S(!0, {}, at, a))).bindHandlers(), n.state = "init", n.setItems(t), n.attachPlugins(i.Plugins), n.trigger("init"), !0 === n.option("hideScrollbar") && n.hideScrollbar(), n.initLayout(), n.initCarousel(), n.attachEvents(), st.set(n.id, d(n)), n.trigger("prepare"), n.state = "ready", n.trigger("ready"), n.$container.setAttribute("aria-hidden", "false"), n.option("trapFocus") && n.focus(), n;\n    }\n\n    return s(i, [{\n      key: "option",\n      value: function (t) {\n        for (var e, n = this.getSlide(), o = n ? n[t] : void 0, a = arguments.length, s = new Array(a > 1 ? a - 1 : 0), r = 1; r < a; r++) s[r - 1] = arguments[r];\n\n        if (void 0 !== o) {\n          var l;\n          if ("function" == typeof o) (l = o).call.apply(l, [this, this].concat(s)), g("value");\n          return o;\n        }\n\n        return (e = p(c(i.prototype), "option", this)).call.apply(e, [this, t].concat(s));\n      }\n    }, {\n      key: "bindHandlers",\n      value: function () {\n        for (var t = 0, e = ["onMousedown", "onKeydown", "onClick", "onFocus", "onCreateSlide", "onSettle", "onTouchMove", "onTouchEnd", "onTransform"]; t < e.length; t++) {\n          var i = e[t];\n          this[i] = this[i].bind(this);\n        }\n      }\n    }, {\n      key: "attachEvents",\n      value: function () {\n        document.addEventListener("mousedown", this.onMousedown), document.addEventListener("keydown", this.onKeydown, !0), this.option("trapFocus") && document.addEventListener("focus", this.onFocus, !0), this.$container.addEventListener("click", this.onClick);\n      }\n    }, {\n      key: "detachEvents",\n      value: function () {\n        document.removeEventListener("mousedown", this.onMousedown), document.removeEventListener("keydown", this.onKeydown, !0), document.removeEventListener("focus", this.onFocus, !0), this.$container.removeEventListener("click", this.onClick);\n      }\n    }, {\n      key: "initLayout",\n      value: function () {\n        var t = this;\n        this.$root = this.option("parentEl") || document.body;\n        var e = this.option("template.main");\n        e && (this.$root.insertAdjacentHTML("beforeend", this.localize(e)), this.$container = this.$root.querySelector(".fancybox__container")), this.$container || (this.$container = document.createElement("div"), this.$root.appendChild(this.$container)), this.$container.onscroll = function () {\n          return t.$container.scrollLeft = 0, !1;\n        }, Object.entries({\n          class: "fancybox__container",\n          role: "dialog",\n          tabIndex: "-1",\n          "aria-modal": "true",\n          "aria-hidden": "true",\n          "aria-label": this.localize("{{MODAL}}")\n        }).forEach(function (e) {\n          var i;\n          return (i = t.$container).setAttribute.apply(i, y(e));\n        }), this.option("animated") && this.$container.classList.add("is-animated"), this.$backdrop = this.$container.querySelector(".fancybox__backdrop"), this.$backdrop || (this.$backdrop = document.createElement("div"), this.$backdrop.classList.add("fancybox__backdrop"), this.$container.appendChild(this.$backdrop)), this.$carousel = this.$container.querySelector(".fancybox__carousel"), this.$carousel || (this.$carousel = document.createElement("div"), this.$carousel.classList.add("fancybox__carousel"), this.$container.appendChild(this.$carousel)), this.$container.Fancybox = this, this.id = this.$container.getAttribute("id"), this.id || (this.id = this.options.id || ++rt, this.$container.setAttribute("id", "fancybox-" + this.id));\n        var i,\n            n = this.option("mainClass");\n        n && (i = this.$container.classList).add.apply(i, y(n.split(" ")));\n        return document.documentElement.classList.add("with-fancybox"), this.trigger("initLayout"), this;\n      }\n    }, {\n      key: "setItems",\n      value: function (t) {\n        var e,\n            i = [],\n            n = w(t);\n\n        try {\n          for (n.s(); !(e = n.n()).done;) {\n            var o = e.value,\n                a = o.$trigger;\n\n            if (a) {\n              var s = a.dataset || {};\n              o.src = s.src || a.getAttribute("href") || o.src, o.type = s.type || o.type, !o.src && a instanceof HTMLImageElement && (o.src = a.currentSrc || o.$trigger.src);\n            }\n\n            var r = o.$thumb;\n\n            if (!r) {\n              var l = o.$trigger && o.$trigger.origTarget;\n              l && (r = l instanceof HTMLImageElement ? l : l.querySelector("img:not([aria-hidden])")), !r && o.$trigger && (r = o.$trigger instanceof HTMLImageElement ? o.$trigger : o.$trigger.querySelector("img:not([aria-hidden])"));\n            }\n\n            o.$thumb = r || null;\n            var c = o.thumb;\n            !c && r && !(c = r.currentSrc || r.src) && r.dataset && (c = r.dataset.lazySrc || r.dataset.src), c || "image" !== o.type || (c = o.src), o.thumb = c || null, o.caption = o.caption || "", i.push(o);\n          }\n        } catch (t) {\n          n.e(t);\n        } finally {\n          n.f();\n        }\n\n        this.items = i;\n      }\n    }, {\n      key: "initCarousel",\n      value: function () {\n        var t = this;\n        return this.Carousel = new H(this.$carousel, S(!0, {}, {\n          prefix: "",\n          classNames: {\n            viewport: "fancybox__viewport",\n            track: "fancybox__track",\n            slide: "fancybox__slide"\n          },\n          textSelection: !0,\n          preload: this.option("preload"),\n          friction: .88,\n          slides: this.items,\n          initialPage: this.options.startIndex,\n          slidesPerPage: 1,\n          infiniteX: this.option("infinite"),\n          infiniteY: !0,\n          l10n: this.option("l10n"),\n          Dots: !1,\n          Navigation: {\n            classNames: {\n              main: "fancybox__nav",\n              button: "carousel__button",\n              next: "is-next",\n              prev: "is-prev"\n            }\n          },\n          Panzoom: {\n            textSelection: !0,\n            panOnlyZoomed: function () {\n              return t.Carousel && t.Carousel.pages && t.Carousel.pages.length < 2 && !t.option("dragToClose");\n            },\n            lockAxis: function () {\n              if (t.Carousel) {\n                var e = "x";\n                return t.option("dragToClose") && (e += "y"), e;\n              }\n            }\n          },\n          on: {\n            "*": function (e) {\n              for (var i = arguments.length, n = new Array(i > 1 ? i - 1 : 0), o = 1; o < i; o++) n[o - 1] = arguments[o];\n\n              return t.trigger.apply(t, ["Carousel.".concat(e)].concat(n));\n            },\n            init: function (e) {\n              return t.Carousel = e;\n            },\n            createSlide: this.onCreateSlide,\n            settle: this.onSettle\n          }\n        }, this.option("Carousel"))), this.option("dragToClose") && this.Carousel.Panzoom.on({\n          touchMove: this.onTouchMove,\n          afterTransform: this.onTransform,\n          touchEnd: this.onTouchEnd\n        }), this.trigger("initCarousel"), this;\n      }\n    }, {\n      key: "onCreateSlide",\n      value: function (t, e) {\n        var i = e.caption || "";\n\n        if ("function" == typeof this.options.caption && (i = this.options.caption.call(this, this, this.Carousel, e)), "string" == typeof i && i.length) {\n          var n = document.createElement("div"),\n              o = "fancybox__caption_".concat(this.id, "_").concat(e.index);\n          n.className = "fancybox__caption", n.innerHTML = i, n.setAttribute("id", o), e.$caption = e.$el.appendChild(n), e.$el.classList.add("has-caption"), e.$el.setAttribute("aria-labelledby", o);\n        }\n      }\n    }, {\n      key: "onSettle",\n      value: function () {\n        this.option("autoFocus") && this.focus();\n      }\n    }, {\n      key: "onFocus",\n      value: function (t) {\n        this.focus(t);\n      }\n    }, {\n      key: "onClick",\n      value: function (t) {\n        if (!t.defaultPrevented) {\n          var e = t.target;\n          if (e.matches("[data-fancybox-close]")) return t.preventDefault(), void i.close(!1, t);\n          if (e.matches("[data-fancybox-next]")) return t.preventDefault(), void i.next();\n          if (e.matches("[data-fancybox-prev]")) return t.preventDefault(), void i.prev();\n          var n = ".fancybox__content";\n          if (e.closest(n)) e.matches(n) && document.activeElement.blur();else if (!getSelection().toString().length) if (!1 !== this.trigger("click", t)) switch (this.option("click")) {\n            case "close":\n              this.close();\n              break;\n\n            case "next":\n              this.next();\n          }\n        }\n      }\n    }, {\n      key: "onTouchMove",\n      value: function () {\n        var t = this.getSlide().Panzoom;\n        return !t || 1 === t.content.scale;\n      }\n    }, {\n      key: "onTouchEnd",\n      value: function (t) {\n        var e = t.dragOffset.y;\n        Math.abs(e) >= 150 || Math.abs(e) >= 35 && t.dragOffset.time < 350 ? (this.option("hideClass") && (this.getSlide().hideClass = "fancybox-throwOut".concat(t.content.y < 0 ? "Up" : "Down")), this.close()) : "y" === t.lockAxis && t.panTo({\n          y: 0\n        });\n      }\n    }, {\n      key: "onTransform",\n      value: function (t) {\n        if (this.$backdrop) {\n          var e = Math.abs(t.content.y),\n              i = e < 1 ? "" : Math.max(.33, Math.min(1, 1 - e / t.content.fitHeight * 1.5));\n          this.$container.style.setProperty("--fancybox-ts", i ? "0s" : ""), this.$container.style.setProperty("--fancybox-opacity", i);\n        }\n      }\n    }, {\n      key: "onMousedown",\n      value: function () {\n        "ready" === this.state && document.body.classList.add("is-using-mouse");\n      }\n    }, {\n      key: "onKeydown",\n      value: function (t) {\n        if (i.getInstance().id === this.id) {\n          document.body.classList.remove("is-using-mouse");\n          var e = t.key,\n              n = this.option("keyboard");\n\n          if (n && !t.ctrlKey && !t.altKey && !t.shiftKey) {\n            var o = document.activeElement && document.activeElement.classList,\n                a = o && o.contains("carousel__button");\n            if ("Escape" !== e && !a) if (t.target.isContentEditable || -1 !== ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(t.target.nodeName)) return;\n\n            if (!1 !== this.trigger("keydown", e, t)) {\n              var s = n[e];\n              "function" == typeof this[s] && this[s]();\n            }\n          }\n        }\n      }\n    }, {\n      key: "getSlide",\n      value: function () {\n        var t = this.Carousel;\n        if (!t) return null;\n        var e = null === t.page ? t.option("initialPage") : t.page,\n            i = t.pages || [];\n        return i.length && i[e] ? i[e].slides[0] : null;\n      }\n    }, {\n      key: "focus",\n      value: function (t) {\n        if (!(i.ignoreFocusChange || ["init", "closing", "customClosing", "destroy"].indexOf(this.state) > -1)) {\n          t && t.preventDefault(), i.ignoreFocusChange = !0;\n\n          for (var e, n = this.$container, o = this.getSlide(), a = "done" === o.state ? o.$el : null, s = [], r = 0, l = Array.from(n.querySelectorAll(q)); r < l.length; r++) {\n            var c = l[r],\n                h = c.offsetParent,\n                d = a && a.contains(c),\n                u = !this.Carousel.$viewport.contains(c);\n            h && (d || u) ? (s.push(c), void 0 !== c.dataset.origTabindex && (c.tabIndex = c.dataset.origTabindex, c.removeAttribute("data-orig-tabindex")), (c.hasAttribute("autoFocus") || !e && d && !c.classList.contains("carousel__button")) && (e = c)) : (c.dataset.origTabindex = void 0 === c.dataset.origTabindex ? c.getAttribute("tabindex") : c.dataset.origTabindex, c.tabIndex = -1);\n          }\n\n          t ? s.indexOf(t.target) > -1 ? this.lastFocus = t.target : this.lastFocus === n ? U(s[s.length - 1]) : U(n) : this.option("autoFocus") && e ? U(e) : s.indexOf(document.activeElement) < 0 && U(n), this.lastFocus = document.activeElement, i.ignoreFocusChange = !1;\n        }\n      }\n    }, {\n      key: "hideScrollbar",\n      value: function () {\n        if (j) {\n          var t = window.innerWidth - document.documentElement.getBoundingClientRect().width,\n              e = "fancybox-style-noscroll",\n              i = document.getElementById(e);\n          i || t > 0 && ((i = document.createElement("style")).id = e, i.type = "text/css", i.innerHTML = ".compensate-for-scrollbar {padding-right: ".concat(t, "px;}"), document.getElementsByTagName("head")[0].appendChild(i), document.body.classList.add("compensate-for-scrollbar"));\n        }\n      }\n    }, {\n      key: "revealScrollbar",\n      value: function () {\n        document.body.classList.remove("compensate-for-scrollbar");\n        var t = document.getElementById("fancybox-style-noscroll");\n        t && t.remove();\n      }\n    }, {\n      key: "clearContent",\n      value: function (t) {\n        this.Carousel.trigger("removeSlide", t), t.$content && (t.$content.remove(), t.$content = null), t.$closeButton && (t.$closeButton.remove(), t.$closeButton = null), t._className && t.$el.classList.remove(t._className);\n      }\n    }, {\n      key: "setContent",\n      value: function (t, e) {\n        var i,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n            o = t.$el;\n        if (e instanceof HTMLElement) ["img", "iframe", "video", "audio"].indexOf(e.nodeName.toLowerCase()) > -1 ? (i = document.createElement("div")).appendChild(e) : i = e;else {\n          var a = document.createRange().createContextualFragment(e);\n          (i = document.createElement("div")).appendChild(a);\n        }\n        if (t.filter && !t.error && (i = i.querySelector(t.filter)), i instanceof Element) return t._className = "has-".concat(n.suffix || t.type || "unknown"), o.classList.add(t._className), i.classList.add("fancybox__content"), "none" !== i.style.display && "none" !== getComputedStyle(i).getPropertyValue("display") || (i.style.display = t.display || this.option("defaultDisplay") || "flex"), t.id && i.setAttribute("id", t.id), t.$content = i, o.prepend(i), this.manageCloseButton(t), "loading" !== t.state && this.revealContent(t), i;\n        this.setError(t, "{{ELEMENT_NOT_FOUND}}");\n      }\n    }, {\n      key: "manageCloseButton",\n      value: function (t) {\n        var e = this,\n            i = void 0 === t.closeButton ? this.option("closeButton") : t.closeButton;\n\n        if (i && ("top" !== i || !this.$closeButton)) {\n          var n = document.createElement("button");\n          n.classList.add("carousel__button", "is-close"), n.setAttribute("title", this.options.l10n.CLOSE), n.innerHTML = this.option("template.closeButton"), n.addEventListener("click", function (t) {\n            return e.close(t);\n          }), "inside" === i ? (t.$closeButton && t.$closeButton.remove(), t.$closeButton = t.$content.appendChild(n)) : this.$closeButton = this.$container.insertBefore(n, this.$container.firstChild);\n        }\n      }\n    }, {\n      key: "revealContent",\n      value: function (t) {\n        var e = this;\n        this.trigger("reveal", t), t.$content.style.visibility = "";\n        var i = !1;\n        t.error || "loading" === t.state || null !== this.Carousel.prevPage || t.index !== this.options.startIndex || (i = void 0 === t.showClass ? this.option("showClass") : t.showClass), i ? (t.state = "animating", this.animateCSS(t.$content, i, function () {\n          e.done(t);\n        })) : this.done(t);\n      }\n    }, {\n      key: "animateCSS",\n      value: function (t, e, i) {\n        if (t && t.dispatchEvent(new CustomEvent("animationend", {\n          bubbles: !0,\n          cancelable: !0\n        })), t && e) {\n          t.addEventListener("animationend", function n(o) {\n            o.currentTarget === this && (t.removeEventListener("animationend", n), i && i(), t.classList.remove(e));\n          }), t.classList.add(e);\n        } else "function" == typeof i && i();\n      }\n    }, {\n      key: "done",\n      value: function (t) {\n        t.state = "done", this.trigger("done", t);\n        var e = this.getSlide();\n        e && t.index === e.index && this.option("autoFocus") && this.focus();\n      }\n    }, {\n      key: "setError",\n      value: function (t, e) {\n        t.error = e, this.hideLoading(t), this.clearContent(t);\n        var i = document.createElement("div");\n        i.classList.add("fancybox-error"), i.innerHTML = this.localize(e || "<p>{{ERROR}}</p>"), this.setContent(t, i, {\n          suffix: "error"\n        });\n      }\n    }, {\n      key: "showLoading",\n      value: function (t) {\n        var e = this;\n        t.state = "loading", t.$el.classList.add("is-loading");\n        var i = t.$el.querySelector(".fancybox__spinner");\n        i || ((i = document.createElement("div")).classList.add("fancybox__spinner"), i.innerHTML = this.option("template.spinner"), i.addEventListener("click", function () {\n          e.Carousel.Panzoom.velocity || e.close();\n        }), t.$el.prepend(i));\n      }\n    }, {\n      key: "hideLoading",\n      value: function (t) {\n        var e = t.$el && t.$el.querySelector(".fancybox__spinner");\n        e && (e.remove(), t.$el.classList.remove("is-loading")), "loading" === t.state && (this.trigger("load", t), t.state = "ready");\n      }\n    }, {\n      key: "next",\n      value: function () {\n        var t = this.Carousel;\n        t && t.pages.length > 1 && t.slideNext();\n      }\n    }, {\n      key: "prev",\n      value: function () {\n        var t = this.Carousel;\n        t && t.pages.length > 1 && t.slidePrev();\n      }\n    }, {\n      key: "jumpTo",\n      value: function () {\n        var t;\n        this.Carousel && (t = this.Carousel).slideTo.apply(t, arguments);\n      }\n    }, {\n      key: "close",\n      value: function (t) {\n        var e = this;\n\n        if (t && t.preventDefault(), !["closing", "customClosing", "destroy"].includes(this.state) && !1 !== this.trigger("shouldClose", t) && (this.state = "closing", this.Carousel.Panzoom.destroy(), this.detachEvents(), this.trigger("closing", t), "destroy" !== this.state)) {\n          this.$container.setAttribute("aria-hidden", "true"), this.$container.classList.add("is-closing");\n          var i = this.getSlide();\n\n          if (this.Carousel.slides.forEach(function (t) {\n            t.$content && t.index !== i.index && e.Carousel.trigger("removeSlide", t);\n          }), "closing" === this.state) {\n            var n = void 0 === i.hideClass ? this.option("hideClass") : i.hideClass;\n            this.animateCSS(i.$content, n, function () {\n              e.destroy();\n            }, !0);\n          }\n        }\n      }\n    }, {\n      key: "destroy",\n      value: function () {\n        if ("destroy" !== this.state) {\n          this.state = "destroy", this.trigger("destroy");\n          var t = this.option("placeFocusBack") ? this.getSlide().$trigger : null;\n          this.Carousel.destroy(), this.detachPlugins(), this.Carousel = null, this.options = {}, this.events = {}, this.$container.remove(), this.$container = this.$backdrop = this.$carousel = null, t && U(t), st.delete(this.id);\n          var e = i.getInstance();\n          e ? e.focus() : (document.documentElement.classList.remove("with-fancybox"), document.body.classList.remove("is-using-mouse"), this.revealScrollbar());\n        }\n      }\n    }], [{\n      key: "show",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n        return new i(t, e);\n      }\n    }, {\n      key: "fromEvent",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n\n        if (!t.defaultPrevented && !(t.button && 0 !== t.button || t.ctrlKey || t.metaKey || t.shiftKey)) {\n          var n,\n              o,\n              a,\n              s = t.target;\n\n          if ((s.matches("[data-fancybox-trigger]") || (s = s.closest("[data-fancybox-trigger]"))) && (n = s && s.dataset && s.dataset.fancyboxTrigger), n) {\n            var r = document.querySelectorAll(\'[data-fancybox="\'.concat(n, \'"]\')),\n                l = parseInt(s.dataset.fancyboxIndex, 10) || 0;\n            s = r.length ? r[l] : s;\n          }\n\n          s || (s = t.target), Array.from(i.openers.keys()).reverse().some(function (e) {\n            a = s;\n            var i = !1;\n\n            try {\n              a instanceof Element && ("string" == typeof e || e instanceof String) && (i = a.matches(e) || (a = a.closest(e)));\n            } catch (t) {}\n\n            return !!i && (t.preventDefault(), o = e, !0);\n          });\n          var c = !1;\n\n          if (o) {\n            e.event = t, e.target = a, a.origTarget = t.target, c = i.fromOpener(o, e);\n            var h = i.getInstance();\n            h && "ready" === h.state && t.detail && document.body.classList.add("is-using-mouse");\n          }\n\n          return c;\n        }\n      }\n    }, {\n      key: "fromOpener",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n            n = function (t) {\n          for (var e = ["false", "0", "no", "null", "undefined"], i = ["true", "1", "yes"], n = Object.assign({}, t.dataset), o = {}, a = 0, s = Object.entries(n); a < s.length; a++) {\n            var r = m(s[a], 2),\n                l = r[0],\n                c = r[1];\n            if ("fancybox" !== l) if ("width" === l || "height" === l) o["_".concat(l)] = c;else if ("string" == typeof c || c instanceof String) {\n              if (e.indexOf(c) > -1) o[l] = !1;else if (i.indexOf(o[l]) > -1) o[l] = !0;else try {\n                o[l] = JSON.parse(c);\n              } catch (t) {\n                o[l] = c;\n              }\n            } else o[l] = c;\n          }\n\n          return t instanceof Element && (o.$trigger = t), o;\n        },\n            o = [],\n            a = e.startIndex || 0,\n            s = e.target || null,\n            r = void 0 !== (e = S({}, e, i.openers.get(t))).groupAll && e.groupAll,\n            l = void 0 === e.groupAttr ? "data-fancybox" : e.groupAttr,\n            c = l && s ? s.getAttribute("".concat(l)) : "";\n\n        if ((!s || c || r) && (o = [].slice.call(document.querySelectorAll(t))), s && !r && (o = c ? o.filter(function (t) {\n          return t.getAttribute("".concat(l)) === c;\n        }) : [s]), !o.length) return !1;\n        var h = i.getInstance();\n        return !(h && o.indexOf(h.options.$trigger) > -1) && (a = s ? o.indexOf(s) : a, new i(o = o.map(n), S({}, e, {\n          startIndex: a,\n          $trigger: s\n        })));\n      }\n    }, {\n      key: "bind",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n\n        function n() {\n          document.body.addEventListener("click", i.fromEvent, !1);\n        }\n\n        j && (i.openers.size || (/complete|interactive|loaded/.test(document.readyState) ? n() : document.addEventListener("DOMContentLoaded", n)), i.openers.set(t, e));\n      }\n    }, {\n      key: "unbind",\n      value: function (t) {\n        i.openers.delete(t), i.openers.size || i.destroy();\n      }\n    }, {\n      key: "destroy",\n      value: function () {\n        for (var t; t = i.getInstance();) t.destroy();\n\n        i.openers = new Map(), document.body.removeEventListener("click", i.fromEvent, !1);\n      }\n    }, {\n      key: "getInstance",\n      value: function (t) {\n        return t ? st.get(t) : Array.from(st.values()).reverse().find(function (t) {\n          return !["closing", "customClosing", "destroy"].includes(t.state) && t;\n        }) || null;\n      }\n    }, {\n      key: "close",\n      value: function () {\n        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n            e = arguments.length > 1 ? arguments[1] : void 0;\n\n        if (t) {\n          var n,\n              o = w(st.values());\n\n          try {\n            for (o.s(); !(n = o.n()).done;) {\n              var a = n.value;\n              a.close(e);\n            }\n          } catch (t) {\n            o.e(t);\n          } finally {\n            o.f();\n          }\n        } else {\n          var s = i.getInstance();\n          s && s.close(e);\n        }\n      }\n    }, {\n      key: "next",\n      value: function () {\n        var t = i.getInstance();\n        t && t.next();\n      }\n    }, {\n      key: "prev",\n      value: function () {\n        var t = i.getInstance();\n        t && t.prev();\n      }\n    }]), i;\n  }(z);\n\n  lt.version = "4.0.24", lt.defaults = at, lt.openers = new Map(), lt.Plugins = ot, lt.bind("[data-fancybox]");\n\n  for (var ct = 0, ht = Object.entries(lt.Plugins || {}); ct < ht.length; ct++) {\n    var dt = m(ht[ct], 2);\n    dt[0];\n    var ut = dt[1];\n    "function" == typeof ut.create && ut.create(lt);\n  }\n\n  t.Carousel = H, t.Fancybox = lt, t.Panzoom = I;\n});\n\n//# sourceURL=webpack:///./src/js/fancybox.umd.js?')},"./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./swiper-bundle.js */ \"./src/js/swiper-bundle.js\");\n/* harmony import */ var _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _fancybox_umd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fancybox.umd */ \"./src/js/fancybox.umd.js\");\n/* harmony import */ var _fancybox_umd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_fancybox_umd__WEBPACK_IMPORTED_MODULE_1__);\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const tabsHandlerItems = document.querySelectorAll('[data-tabs-handler]');\n  const tabsFormItems = document.querySelectorAll('[data-tabs-form]');\n  const deleteUser = document.querySelectorAll('.delete_user');\n  const deleteFilm = document.querySelectorAll('.delete_film'); // const submitBtn = document.querySelector('.film_submit');\n  // const addForm = document.querySelector('#add__film');\n\n  const slider__horror = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__horror', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-horror\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__drama = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__drama', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-drama\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__comedy = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__comedy', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-comedy\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__historical = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__historical', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-history\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__action = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__action', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-action\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__sci_fi = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__sci-fi', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-sci\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__romance = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__romance', {\n    slidesPerView: 5,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-romance\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__channel = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__channel', {\n    slidesPerView: 4,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-channel\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const slider__actors = new _swiper_bundle_js__WEBPACK_IMPORTED_MODULE_0___default.a('.slider__actors', {\n    slidesPerView: 6,\n    loop: true,\n    spaceBetween: 30,\n    navigation: {\n      nextEl: \".swiper-button-next-actors\",\n      prevEl: \".swiper-button-prev\"\n    }\n  });\n  const gradient = ['linear-gradient(109.31deg, #FD093F 2.4%, #F383F1 100%)', 'linear-gradient(114.5deg, #0FFFDA 2.22%, #3CDB77 68.84%)', 'linear-gradient(109.31deg, #B936FF 2.4%, #57DEDA 100%)', 'linear-gradient(109.31deg, #FD093F 2.4%, #FB1378 2.41%, #FCCB1A 100%)', 'linear-gradient(109.31deg, #FF6472 2.4%, #FDA75D 100%)', 'linear-gradient(110.16deg, #13547A 2.37%, #80D0C7 96.77%)', 'linear-gradient(109.93deg, #FFF77B 2.37%, #FFBF42 50%)', 'linear-gradient(109.31deg, #1FA2FF 2.4%, #1FA2FF 2.41%, #1F535C 97.46%)'];\n  const popular = document.querySelectorAll('.popular__item');\n  const channels = document.querySelectorAll('.slider__channel-item');\n  popular.forEach(item => {\n    item.style.background = gradient[changeGradient()];\n  });\n  channels.forEach(item => {\n    item.style.background = gradient[changeGradient()];\n  });\n\n  function changeGradient() {\n    return Math.floor(Math.random() * gradient.length);\n  }\n\n  for (const tab of tabsHandlerItems) {\n    tab.addEventListener('click', () => {\n      tabsHandlerItems.forEach(item => {\n        if (tab === item) {\n          item.classList.add('authorization__button-active');\n        } else {\n          item.classList.remove('authorization__button-active');\n        }\n      });\n      tabsFormItems.forEach(item => {\n        if (item.dataset.tabsForm === tab.dataset.tabsHandler) {\n          item.classList.remove('hidden');\n        } else {\n          item.classList.add('hidden');\n        }\n      });\n    });\n  }\n\n  deleteUser.forEach(item => {\n    item.addEventListener('click', () => {\n      item.parentElement.remove();\n    });\n  });\n  deleteFilm.forEach(item => {\n    item.addEventListener('click', () => {\n      item.parentElement.parentElement.remove();\n    });\n  }); // submitBtn.addEventListener('click', (e)=> {\n  //     e.preventDefault();\n  //     const obj = {};\n  //     const input = document.querySelectorAll('input');\n  //     const select = document.querySelector('select');\n  //     obj['category'] = select.value;\n  //     input.forEach(item => {\n  //         let key=item.id;\n  //         obj[key] = item.value\n  //     });\n  //\n  //     let url = 'https://jsonplaceholder.typicode.com/posts';\n  //\n  //     fetch(url, {\n  //         method: 'post',\n  //         headers: {\n  //             \"Content-type\": \"application/json; charset=UTF-8\"\n  //         },\n  //         body: JSON.stringify(obj)\n  //\n  //     }).then(response => response.json())\n  //         .then(res => console.log(res))\n  //         .catch(function(err) {\n  //             // Error :(\n  //         });\n  //\n  //\n  // })\n});\n\n//# sourceURL=webpack:///./src/js/main.js?")},"./src/js/swiper-bundle.js":
/*!*********************************!*\
  !*** ./src/js/swiper-bundle.js ***!
  \*********************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("/**\n * Swiper 8.0.3\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2022 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: February 3, 2022\n */\n(function (global, factory) {\n   true ? module.exports = factory() : undefined;\n})(this, function () {\n  'use strict';\n  /**\n   * SSR Window 4.0.2\n   * Better handling for window object in SSR environment\n   * https://github.com/nolimits4web/ssr-window\n   *\n   * Copyright 2021, Vladimir Kharlampidi\n   *\n   * Licensed under MIT\n   *\n   * Released on: December 13, 2021\n   */\n\n  /* eslint-disable no-param-reassign */\n\n  function isObject$1(obj) {\n    return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;\n  }\n\n  function extend$1(target, src) {\n    if (target === void 0) {\n      target = {};\n    }\n\n    if (src === void 0) {\n      src = {};\n    }\n\n    Object.keys(src).forEach(key => {\n      if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject$1(src[key]) && isObject$1(target[key]) && Object.keys(src[key]).length > 0) {\n        extend$1(target[key], src[key]);\n      }\n    });\n  }\n\n  const ssrDocument = {\n    body: {},\n\n    addEventListener() {},\n\n    removeEventListener() {},\n\n    activeElement: {\n      blur() {},\n\n      nodeName: ''\n    },\n\n    querySelector() {\n      return null;\n    },\n\n    querySelectorAll() {\n      return [];\n    },\n\n    getElementById() {\n      return null;\n    },\n\n    createEvent() {\n      return {\n        initEvent() {}\n\n      };\n    },\n\n    createElement() {\n      return {\n        children: [],\n        childNodes: [],\n        style: {},\n\n        setAttribute() {},\n\n        getElementsByTagName() {\n          return [];\n        }\n\n      };\n    },\n\n    createElementNS() {\n      return {};\n    },\n\n    importNode() {\n      return null;\n    },\n\n    location: {\n      hash: '',\n      host: '',\n      hostname: '',\n      href: '',\n      origin: '',\n      pathname: '',\n      protocol: '',\n      search: ''\n    }\n  };\n\n  function getDocument() {\n    const doc = typeof document !== 'undefined' ? document : {};\n    extend$1(doc, ssrDocument);\n    return doc;\n  }\n\n  const ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n      userAgent: ''\n    },\n    location: {\n      hash: '',\n      host: '',\n      hostname: '',\n      href: '',\n      origin: '',\n      pathname: '',\n      protocol: '',\n      search: ''\n    },\n    history: {\n      replaceState() {},\n\n      pushState() {},\n\n      go() {},\n\n      back() {}\n\n    },\n    CustomEvent: function CustomEvent() {\n      return this;\n    },\n\n    addEventListener() {},\n\n    removeEventListener() {},\n\n    getComputedStyle() {\n      return {\n        getPropertyValue() {\n          return '';\n        }\n\n      };\n    },\n\n    Image() {},\n\n    Date() {},\n\n    screen: {},\n\n    setTimeout() {},\n\n    clearTimeout() {},\n\n    matchMedia() {\n      return {};\n    },\n\n    requestAnimationFrame(callback) {\n      if (typeof setTimeout === 'undefined') {\n        callback();\n        return null;\n      }\n\n      return setTimeout(callback, 0);\n    },\n\n    cancelAnimationFrame(id) {\n      if (typeof setTimeout === 'undefined') {\n        return;\n      }\n\n      clearTimeout(id);\n    }\n\n  };\n\n  function getWindow() {\n    const win = typeof window !== 'undefined' ? window : {};\n    extend$1(win, ssrWindow);\n    return win;\n  }\n  /**\n   * Dom7 4.0.4\n   * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n   * https://framework7.io/docs/dom7.html\n   *\n   * Copyright 2022, Vladimir Kharlampidi\n   *\n   * Licensed under MIT\n   *\n   * Released on: January 11, 2022\n   */\n\n  /* eslint-disable no-proto */\n\n\n  function makeReactive(obj) {\n    const proto = obj.__proto__;\n    Object.defineProperty(obj, '__proto__', {\n      get() {\n        return proto;\n      },\n\n      set(value) {\n        proto.__proto__ = value;\n      }\n\n    });\n  }\n\n  class Dom7 extends Array {\n    constructor(items) {\n      if (typeof items === 'number') {\n        super(items);\n      } else {\n        super(...(items || []));\n        makeReactive(this);\n      }\n    }\n\n  }\n\n  function arrayFlat(arr) {\n    if (arr === void 0) {\n      arr = [];\n    }\n\n    const res = [];\n    arr.forEach(el => {\n      if (Array.isArray(el)) {\n        res.push(...arrayFlat(el));\n      } else {\n        res.push(el);\n      }\n    });\n    return res;\n  }\n\n  function arrayFilter(arr, callback) {\n    return Array.prototype.filter.call(arr, callback);\n  }\n\n  function arrayUnique(arr) {\n    const uniqueArray = [];\n\n    for (let i = 0; i < arr.length; i += 1) {\n      if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n    }\n\n    return uniqueArray;\n  }\n\n  function qsa(selector, context) {\n    if (typeof selector !== 'string') {\n      return [selector];\n    }\n\n    const a = [];\n    const res = context.querySelectorAll(selector);\n\n    for (let i = 0; i < res.length; i += 1) {\n      a.push(res[i]);\n    }\n\n    return a;\n  }\n\n  function $(selector, context) {\n    const window = getWindow();\n    const document = getDocument();\n    let arr = [];\n\n    if (!context && selector instanceof Dom7) {\n      return selector;\n    }\n\n    if (!selector) {\n      return new Dom7(arr);\n    }\n\n    if (typeof selector === 'string') {\n      const html = selector.trim();\n\n      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n        let toCreate = 'div';\n        if (html.indexOf('<li') === 0) toCreate = 'ul';\n        if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n        if (html.indexOf('<tbody') === 0) toCreate = 'table';\n        if (html.indexOf('<option') === 0) toCreate = 'select';\n        const tempParent = document.createElement(toCreate);\n        tempParent.innerHTML = html;\n\n        for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n          arr.push(tempParent.childNodes[i]);\n        }\n      } else {\n        arr = qsa(selector.trim(), context || document);\n      } // arr = qsa(selector, document);\n\n    } else if (selector.nodeType || selector === window || selector === document) {\n      arr.push(selector);\n    } else if (Array.isArray(selector)) {\n      if (selector instanceof Dom7) return selector;\n      arr = selector;\n    }\n\n    return new Dom7(arrayUnique(arr));\n  }\n\n  $.fn = Dom7.prototype; // eslint-disable-next-line\n\n  function addClass() {\n    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n      classes[_key] = arguments[_key];\n    }\n\n    const classNames = arrayFlat(classes.map(c => c.split(' ')));\n    this.forEach(el => {\n      el.classList.add(...classNames);\n    });\n    return this;\n  }\n\n  function removeClass() {\n    for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      classes[_key2] = arguments[_key2];\n    }\n\n    const classNames = arrayFlat(classes.map(c => c.split(' ')));\n    this.forEach(el => {\n      el.classList.remove(...classNames);\n    });\n    return this;\n  }\n\n  function toggleClass() {\n    for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      classes[_key3] = arguments[_key3];\n    }\n\n    const classNames = arrayFlat(classes.map(c => c.split(' ')));\n    this.forEach(el => {\n      classNames.forEach(className => {\n        el.classList.toggle(className);\n      });\n    });\n  }\n\n  function hasClass() {\n    for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      classes[_key4] = arguments[_key4];\n    }\n\n    const classNames = arrayFlat(classes.map(c => c.split(' ')));\n    return arrayFilter(this, el => {\n      return classNames.filter(className => el.classList.contains(className)).length > 0;\n    }).length > 0;\n  }\n\n  function attr(attrs, value) {\n    if (arguments.length === 1 && typeof attrs === 'string') {\n      // Get attr\n      if (this[0]) return this[0].getAttribute(attrs);\n      return undefined;\n    } // Set attrs\n\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i].setAttribute(attrs, value);\n      } else {\n        // Object\n        for (const attrName in attrs) {\n          this[i][attrName] = attrs[attrName];\n          this[i].setAttribute(attrName, attrs[attrName]);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function removeAttr(attr) {\n    for (let i = 0; i < this.length; i += 1) {\n      this[i].removeAttribute(attr);\n    }\n\n    return this;\n  }\n\n  function transform(transform) {\n    for (let i = 0; i < this.length; i += 1) {\n      this[i].style.transform = transform;\n    }\n\n    return this;\n  }\n\n  function transition$1(duration) {\n    for (let i = 0; i < this.length; i += 1) {\n      this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;\n    }\n\n    return this;\n  }\n\n  function on() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    let [eventType, targetSelector, listener, capture] = args;\n\n    if (typeof args[1] === 'function') {\n      [eventType, listener, capture] = args;\n      targetSelector = undefined;\n    }\n\n    if (!capture) capture = false;\n\n    function handleLiveEvent(e) {\n      const target = e.target;\n      if (!target) return;\n      const eventData = e.target.dom7EventData || [];\n\n      if (eventData.indexOf(e) < 0) {\n        eventData.unshift(e);\n      }\n\n      if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n        const parents = $(target).parents(); // eslint-disable-line\n\n        for (let k = 0; k < parents.length; k += 1) {\n          if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n        }\n      }\n    }\n\n    function handleEvent(e) {\n      const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n      if (eventData.indexOf(e) < 0) {\n        eventData.unshift(e);\n      }\n\n      listener.apply(this, eventData);\n    }\n\n    const events = eventType.split(' ');\n    let j;\n\n    for (let i = 0; i < this.length; i += 1) {\n      const el = this[i];\n\n      if (!targetSelector) {\n        for (j = 0; j < events.length; j += 1) {\n          const event = events[j];\n          if (!el.dom7Listeners) el.dom7Listeners = {};\n          if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n          el.dom7Listeners[event].push({\n            listener,\n            proxyListener: handleEvent\n          });\n          el.addEventListener(event, handleEvent, capture);\n        }\n      } else {\n        // Live events\n        for (j = 0; j < events.length; j += 1) {\n          const event = events[j];\n          if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n          if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n          el.dom7LiveListeners[event].push({\n            listener,\n            proxyListener: handleLiveEvent\n          });\n          el.addEventListener(event, handleLiveEvent, capture);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function off() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    let [eventType, targetSelector, listener, capture] = args;\n\n    if (typeof args[1] === 'function') {\n      [eventType, listener, capture] = args;\n      targetSelector = undefined;\n    }\n\n    if (!capture) capture = false;\n    const events = eventType.split(' ');\n\n    for (let i = 0; i < events.length; i += 1) {\n      const event = events[i];\n\n      for (let j = 0; j < this.length; j += 1) {\n        const el = this[j];\n        let handlers;\n\n        if (!targetSelector && el.dom7Listeners) {\n          handlers = el.dom7Listeners[event];\n        } else if (targetSelector && el.dom7LiveListeners) {\n          handlers = el.dom7LiveListeners[event];\n        }\n\n        if (handlers && handlers.length) {\n          for (let k = handlers.length - 1; k >= 0; k -= 1) {\n            const handler = handlers[k];\n\n            if (listener && handler.listener === listener) {\n              el.removeEventListener(event, handler.proxyListener, capture);\n              handlers.splice(k, 1);\n            } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n              el.removeEventListener(event, handler.proxyListener, capture);\n              handlers.splice(k, 1);\n            } else if (!listener) {\n              el.removeEventListener(event, handler.proxyListener, capture);\n              handlers.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function trigger() {\n    const window = getWindow();\n\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    const events = args[0].split(' ');\n    const eventData = args[1];\n\n    for (let i = 0; i < events.length; i += 1) {\n      const event = events[i];\n\n      for (let j = 0; j < this.length; j += 1) {\n        const el = this[j];\n\n        if (window.CustomEvent) {\n          const evt = new window.CustomEvent(event, {\n            detail: eventData,\n            bubbles: true,\n            cancelable: true\n          });\n          el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n          el.dispatchEvent(evt);\n          el.dom7EventData = [];\n          delete el.dom7EventData;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function transitionEnd$1(callback) {\n    const dom = this;\n\n    function fireCallBack(e) {\n      if (e.target !== this) return;\n      callback.call(this, e);\n      dom.off('transitionend', fireCallBack);\n    }\n\n    if (callback) {\n      dom.on('transitionend', fireCallBack);\n    }\n\n    return this;\n  }\n\n  function outerWidth(includeMargins) {\n    if (this.length > 0) {\n      if (includeMargins) {\n        const styles = this.styles();\n        return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n      }\n\n      return this[0].offsetWidth;\n    }\n\n    return null;\n  }\n\n  function outerHeight(includeMargins) {\n    if (this.length > 0) {\n      if (includeMargins) {\n        const styles = this.styles();\n        return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n      }\n\n      return this[0].offsetHeight;\n    }\n\n    return null;\n  }\n\n  function offset() {\n    if (this.length > 0) {\n      const window = getWindow();\n      const document = getDocument();\n      const el = this[0];\n      const box = el.getBoundingClientRect();\n      const body = document.body;\n      const clientTop = el.clientTop || body.clientTop || 0;\n      const clientLeft = el.clientLeft || body.clientLeft || 0;\n      const scrollTop = el === window ? window.scrollY : el.scrollTop;\n      const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n      return {\n        top: box.top + scrollTop - clientTop,\n        left: box.left + scrollLeft - clientLeft\n      };\n    }\n\n    return null;\n  }\n\n  function styles() {\n    const window = getWindow();\n    if (this[0]) return window.getComputedStyle(this[0], null);\n    return {};\n  }\n\n  function css(props, value) {\n    const window = getWindow();\n    let i;\n\n    if (arguments.length === 1) {\n      if (typeof props === 'string') {\n        // .css('width')\n        if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n      } else {\n        // .css({ width: '100px' })\n        for (i = 0; i < this.length; i += 1) {\n          for (const prop in props) {\n            this[i].style[prop] = props[prop];\n          }\n        }\n\n        return this;\n      }\n    }\n\n    if (arguments.length === 2 && typeof props === 'string') {\n      // .css('width', '100px')\n      for (i = 0; i < this.length; i += 1) {\n        this[i].style[props] = value;\n      }\n\n      return this;\n    }\n\n    return this;\n  }\n\n  function each(callback) {\n    if (!callback) return this;\n    this.forEach((el, index) => {\n      callback.apply(el, [el, index]);\n    });\n    return this;\n  }\n\n  function filter(callback) {\n    const result = arrayFilter(this, callback);\n    return $(result);\n  }\n\n  function html(html) {\n    if (typeof html === 'undefined') {\n      return this[0] ? this[0].innerHTML : null;\n    }\n\n    for (let i = 0; i < this.length; i += 1) {\n      this[i].innerHTML = html;\n    }\n\n    return this;\n  }\n\n  function text(text) {\n    if (typeof text === 'undefined') {\n      return this[0] ? this[0].textContent.trim() : null;\n    }\n\n    for (let i = 0; i < this.length; i += 1) {\n      this[i].textContent = text;\n    }\n\n    return this;\n  }\n\n  function is(selector) {\n    const window = getWindow();\n    const document = getDocument();\n    const el = this[0];\n    let compareWith;\n    let i;\n    if (!el || typeof selector === 'undefined') return false;\n\n    if (typeof selector === 'string') {\n      if (el.matches) return el.matches(selector);\n      if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n      if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n      compareWith = $(selector);\n\n      for (i = 0; i < compareWith.length; i += 1) {\n        if (compareWith[i] === el) return true;\n      }\n\n      return false;\n    }\n\n    if (selector === document) {\n      return el === document;\n    }\n\n    if (selector === window) {\n      return el === window;\n    }\n\n    if (selector.nodeType || selector instanceof Dom7) {\n      compareWith = selector.nodeType ? [selector] : selector;\n\n      for (i = 0; i < compareWith.length; i += 1) {\n        if (compareWith[i] === el) return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  function index() {\n    let child = this[0];\n    let i;\n\n    if (child) {\n      i = 0; // eslint-disable-next-line\n\n      while ((child = child.previousSibling) !== null) {\n        if (child.nodeType === 1) i += 1;\n      }\n\n      return i;\n    }\n\n    return undefined;\n  }\n\n  function eq(index) {\n    if (typeof index === 'undefined') return this;\n    const length = this.length;\n\n    if (index > length - 1) {\n      return $([]);\n    }\n\n    if (index < 0) {\n      const returnIndex = length + index;\n      if (returnIndex < 0) return $([]);\n      return $([this[returnIndex]]);\n    }\n\n    return $([this[index]]);\n  }\n\n  function append() {\n    let newChild;\n    const document = getDocument();\n\n    for (let k = 0; k < arguments.length; k += 1) {\n      newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];\n\n      for (let i = 0; i < this.length; i += 1) {\n        if (typeof newChild === 'string') {\n          const tempDiv = document.createElement('div');\n          tempDiv.innerHTML = newChild;\n\n          while (tempDiv.firstChild) {\n            this[i].appendChild(tempDiv.firstChild);\n          }\n        } else if (newChild instanceof Dom7) {\n          for (let j = 0; j < newChild.length; j += 1) {\n            this[i].appendChild(newChild[j]);\n          }\n        } else {\n          this[i].appendChild(newChild);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function prepend(newChild) {\n    const document = getDocument();\n    let i;\n    let j;\n\n    for (i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n          this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (j = 0; j < newChild.length; j += 1) {\n          this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n        }\n      } else {\n        this[i].insertBefore(newChild, this[i].childNodes[0]);\n      }\n    }\n\n    return this;\n  }\n\n  function next(selector) {\n    if (this.length > 0) {\n      if (selector) {\n        if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n          return $([this[0].nextElementSibling]);\n        }\n\n        return $([]);\n      }\n\n      if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n      return $([]);\n    }\n\n    return $([]);\n  }\n\n  function nextAll(selector) {\n    const nextEls = [];\n    let el = this[0];\n    if (!el) return $([]);\n\n    while (el.nextElementSibling) {\n      const next = el.nextElementSibling; // eslint-disable-line\n\n      if (selector) {\n        if ($(next).is(selector)) nextEls.push(next);\n      } else nextEls.push(next);\n\n      el = next;\n    }\n\n    return $(nextEls);\n  }\n\n  function prev(selector) {\n    if (this.length > 0) {\n      const el = this[0];\n\n      if (selector) {\n        if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n          return $([el.previousElementSibling]);\n        }\n\n        return $([]);\n      }\n\n      if (el.previousElementSibling) return $([el.previousElementSibling]);\n      return $([]);\n    }\n\n    return $([]);\n  }\n\n  function prevAll(selector) {\n    const prevEls = [];\n    let el = this[0];\n    if (!el) return $([]);\n\n    while (el.previousElementSibling) {\n      const prev = el.previousElementSibling; // eslint-disable-line\n\n      if (selector) {\n        if ($(prev).is(selector)) prevEls.push(prev);\n      } else prevEls.push(prev);\n\n      el = prev;\n    }\n\n    return $(prevEls);\n  }\n\n  function parent(selector) {\n    const parents = []; // eslint-disable-line\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (this[i].parentNode !== null) {\n        if (selector) {\n          if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n        } else {\n          parents.push(this[i].parentNode);\n        }\n      }\n    }\n\n    return $(parents);\n  }\n\n  function parents(selector) {\n    const parents = []; // eslint-disable-line\n\n    for (let i = 0; i < this.length; i += 1) {\n      let parent = this[i].parentNode; // eslint-disable-line\n\n      while (parent) {\n        if (selector) {\n          if ($(parent).is(selector)) parents.push(parent);\n        } else {\n          parents.push(parent);\n        }\n\n        parent = parent.parentNode;\n      }\n    }\n\n    return $(parents);\n  }\n\n  function closest(selector) {\n    let closest = this; // eslint-disable-line\n\n    if (typeof selector === 'undefined') {\n      return $([]);\n    }\n\n    if (!closest.is(selector)) {\n      closest = closest.parents(selector).eq(0);\n    }\n\n    return closest;\n  }\n\n  function find(selector) {\n    const foundElements = [];\n\n    for (let i = 0; i < this.length; i += 1) {\n      const found = this[i].querySelectorAll(selector);\n\n      for (let j = 0; j < found.length; j += 1) {\n        foundElements.push(found[j]);\n      }\n    }\n\n    return $(foundElements);\n  }\n\n  function children(selector) {\n    const children = []; // eslint-disable-line\n\n    for (let i = 0; i < this.length; i += 1) {\n      const childNodes = this[i].children;\n\n      for (let j = 0; j < childNodes.length; j += 1) {\n        if (!selector || $(childNodes[j]).is(selector)) {\n          children.push(childNodes[j]);\n        }\n      }\n    }\n\n    return $(children);\n  }\n\n  function remove() {\n    for (let i = 0; i < this.length; i += 1) {\n      if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n    }\n\n    return this;\n  }\n\n  const Methods = {\n    addClass,\n    removeClass,\n    hasClass,\n    toggleClass,\n    attr,\n    removeAttr,\n    transform,\n    transition: transition$1,\n    on,\n    off,\n    trigger,\n    transitionEnd: transitionEnd$1,\n    outerWidth,\n    outerHeight,\n    styles,\n    offset,\n    css,\n    each,\n    html,\n    text,\n    is,\n    index,\n    eq,\n    append,\n    prepend,\n    next,\n    nextAll,\n    prev,\n    prevAll,\n    parent,\n    parents,\n    closest,\n    find,\n    children,\n    filter,\n    remove\n  };\n  Object.keys(Methods).forEach(methodName => {\n    Object.defineProperty($.fn, methodName, {\n      value: Methods[methodName],\n      writable: true\n    });\n  });\n\n  function deleteProps(obj) {\n    const object = obj;\n    Object.keys(object).forEach(key => {\n      try {\n        object[key] = null;\n      } catch (e) {// no getter for object\n      }\n\n      try {\n        delete object[key];\n      } catch (e) {// something got wrong\n      }\n    });\n  }\n\n  function nextTick(callback, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return setTimeout(callback, delay);\n  }\n\n  function now() {\n    return Date.now();\n  }\n\n  function getComputedStyle$1(el) {\n    const window = getWindow();\n    let style;\n\n    if (window.getComputedStyle) {\n      style = window.getComputedStyle(el, null);\n    }\n\n    if (!style && el.currentStyle) {\n      style = el.currentStyle;\n    }\n\n    if (!style) {\n      style = el.style;\n    }\n\n    return style;\n  }\n\n  function getTranslate(el, axis) {\n    if (axis === void 0) {\n      axis = 'x';\n    }\n\n    const window = getWindow();\n    let matrix;\n    let curTransform;\n    let transformMatrix;\n    const curStyle = getComputedStyle$1(el);\n\n    if (window.WebKitCSSMatrix) {\n      curTransform = curStyle.transform || curStyle.webkitTransform;\n\n      if (curTransform.split(',').length > 6) {\n        curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n      } // Some old versions of Webkit choke when 'none' is passed; pass\n      // empty string instead in this case\n\n\n      transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n    } else {\n      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n      matrix = transformMatrix.toString().split(',');\n    }\n\n    if (axis === 'x') {\n      // Latest Chrome and webkits Fix\n      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix\n      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers\n        else curTransform = parseFloat(matrix[4]);\n    }\n\n    if (axis === 'y') {\n      // Latest Chrome and webkits Fix\n      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix\n      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers\n        else curTransform = parseFloat(matrix[5]);\n    }\n\n    return curTransform || 0;\n  }\n\n  function isObject(o) {\n    return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n  }\n\n  function isNode(node) {\n    // eslint-disable-next-line\n    if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n      return node instanceof HTMLElement;\n    }\n\n    return node && (node.nodeType === 1 || node.nodeType === 11);\n  }\n\n  function extend() {\n    const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n    const noExtend = ['__proto__', 'constructor', 'prototype'];\n\n    for (let i = 1; i < arguments.length; i += 1) {\n      const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n      if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n        const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n\n        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n          const nextKey = keysArray[nextIndex];\n          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n          if (desc !== undefined && desc.enumerable) {\n            if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n              if (nextSource[nextKey].__swiper__) {\n                to[nextKey] = nextSource[nextKey];\n              } else {\n                extend(to[nextKey], nextSource[nextKey]);\n              }\n            } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n              to[nextKey] = {};\n\n              if (nextSource[nextKey].__swiper__) {\n                to[nextKey] = nextSource[nextKey];\n              } else {\n                extend(to[nextKey], nextSource[nextKey]);\n              }\n            } else {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n    }\n\n    return to;\n  }\n\n  function setCSSProperty(el, varName, varValue) {\n    el.style.setProperty(varName, varValue);\n  }\n\n  function animateCSSModeScroll(_ref) {\n    let {\n      swiper,\n      targetPosition,\n      side\n    } = _ref;\n    const window = getWindow();\n    const startPosition = -swiper.translate;\n    let startTime = null;\n    let time;\n    const duration = swiper.params.speed;\n    swiper.wrapperEl.style.scrollSnapType = 'none';\n    window.cancelAnimationFrame(swiper.cssModeFrameID);\n    const dir = targetPosition > startPosition ? 'next' : 'prev';\n\n    const isOutOfBound = (current, target) => {\n      return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n    };\n\n    const animate = () => {\n      time = new Date().getTime();\n\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n      let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n\n      if (isOutOfBound(currentPosition, targetPosition)) {\n        currentPosition = targetPosition;\n      }\n\n      swiper.wrapperEl.scrollTo({\n        [side]: currentPosition\n      });\n\n      if (isOutOfBound(currentPosition, targetPosition)) {\n        swiper.wrapperEl.style.overflow = 'hidden';\n        swiper.wrapperEl.style.scrollSnapType = '';\n        setTimeout(() => {\n          swiper.wrapperEl.style.overflow = '';\n          swiper.wrapperEl.scrollTo({\n            [side]: currentPosition\n          });\n        });\n        window.cancelAnimationFrame(swiper.cssModeFrameID);\n        return;\n      }\n\n      swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n    };\n\n    animate();\n  }\n\n  let support;\n\n  function calcSupport() {\n    const window = getWindow();\n    const document = getDocument();\n    return {\n      smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,\n      touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n      passiveListener: function checkPassiveListener() {\n        let supportsPassive = false;\n\n        try {\n          const opts = Object.defineProperty({}, 'passive', {\n            // eslint-disable-next-line\n            get() {\n              supportsPassive = true;\n            }\n\n          });\n          window.addEventListener('testPassiveListener', null, opts);\n        } catch (e) {// No support\n        }\n\n        return supportsPassive;\n      }(),\n      gestures: function checkGestures() {\n        return 'ongesturestart' in window;\n      }()\n    };\n  }\n\n  function getSupport() {\n    if (!support) {\n      support = calcSupport();\n    }\n\n    return support;\n  }\n\n  let deviceCached;\n\n  function calcDevice(_temp) {\n    let {\n      userAgent\n    } = _temp === void 0 ? {} : _temp;\n    const support = getSupport();\n    const window = getWindow();\n    const platform = window.navigator.platform;\n    const ua = userAgent || window.navigator.userAgent;\n    const device = {\n      ios: false,\n      android: false\n    };\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n\n    let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n    const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n    const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n    const windows = platform === 'Win32';\n    let macos = platform === 'MacIntel'; // iPadOs 13 fix\n\n    const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n\n    if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n      ipad = ua.match(/(Version)\\/([\\d.]+)/);\n      if (!ipad) ipad = [0, 1, '13_0_0'];\n      macos = false;\n    } // Android\n\n\n    if (android && !windows) {\n      device.os = 'android';\n      device.android = true;\n    }\n\n    if (ipad || iphone || ipod) {\n      device.os = 'ios';\n      device.ios = true;\n    } // Export object\n\n\n    return device;\n  }\n\n  function getDevice(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    if (!deviceCached) {\n      deviceCached = calcDevice(overrides);\n    }\n\n    return deviceCached;\n  }\n\n  let browser;\n\n  function calcBrowser() {\n    const window = getWindow();\n\n    function isSafari() {\n      const ua = window.navigator.userAgent.toLowerCase();\n      return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n    }\n\n    return {\n      isSafari: isSafari(),\n      isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n    };\n  }\n\n  function getBrowser() {\n    if (!browser) {\n      browser = calcBrowser();\n    }\n\n    return browser;\n  }\n\n  function Resize(_ref) {\n    let {\n      swiper,\n      on,\n      emit\n    } = _ref;\n    const window = getWindow();\n    let observer = null;\n\n    const resizeHandler = () => {\n      if (!swiper || swiper.destroyed || !swiper.initialized) return;\n      emit('beforeResize');\n      emit('resize');\n    };\n\n    const createObserver = () => {\n      if (!swiper || swiper.destroyed || !swiper.initialized) return;\n      observer = new ResizeObserver(entries => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach(_ref2 => {\n          let {\n            contentBoxSize,\n            contentRect,\n            target\n          } = _ref2;\n          if (target && target !== swiper.el) return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n      observer.observe(swiper.el);\n    };\n\n    const removeObserver = () => {\n      if (observer && observer.unobserve && swiper.el) {\n        observer.unobserve(swiper.el);\n        observer = null;\n      }\n    };\n\n    const orientationChangeHandler = () => {\n      if (!swiper || swiper.destroyed || !swiper.initialized) return;\n      emit('orientationchange');\n    };\n\n    on('init', () => {\n      if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n        createObserver();\n        return;\n      }\n\n      window.addEventListener('resize', resizeHandler);\n      window.addEventListener('orientationchange', orientationChangeHandler);\n    });\n    on('destroy', () => {\n      removeObserver();\n      window.removeEventListener('resize', resizeHandler);\n      window.removeEventListener('orientationchange', orientationChangeHandler);\n    });\n  }\n\n  function Observer(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    const observers = [];\n    const window = getWindow();\n\n    const attach = function (target, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n      const observer = new ObserverFunc(mutations => {\n        // The observerUpdate event should only be triggered\n        // once despite the number of mutations.  Additional\n        // triggers are redundant and are very costly\n        if (mutations.length === 1) {\n          emit('observerUpdate', mutations[0]);\n          return;\n        }\n\n        const observerUpdate = function observerUpdate() {\n          emit('observerUpdate', mutations[0]);\n        };\n\n        if (window.requestAnimationFrame) {\n          window.requestAnimationFrame(observerUpdate);\n        } else {\n          window.setTimeout(observerUpdate, 0);\n        }\n      });\n      observer.observe(target, {\n        attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n        childList: typeof options.childList === 'undefined' ? true : options.childList,\n        characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n      });\n      observers.push(observer);\n    };\n\n    const init = () => {\n      if (!swiper.params.observer) return;\n\n      if (swiper.params.observeParents) {\n        const containerParents = swiper.$el.parents();\n\n        for (let i = 0; i < containerParents.length; i += 1) {\n          attach(containerParents[i]);\n        }\n      } // Observe container\n\n\n      attach(swiper.$el[0], {\n        childList: swiper.params.observeSlideChildren\n      }); // Observe wrapper\n\n      attach(swiper.$wrapperEl[0], {\n        attributes: false\n      });\n    };\n\n    const destroy = () => {\n      observers.forEach(observer => {\n        observer.disconnect();\n      });\n      observers.splice(0, observers.length);\n    };\n\n    extendParams({\n      observer: false,\n      observeParents: false,\n      observeSlideChildren: false\n    });\n    on('init', init);\n    on('destroy', destroy);\n  }\n  /* eslint-disable no-underscore-dangle */\n\n\n  var eventsEmitter = {\n    on(events, handler, priority) {\n      const self = this;\n      if (typeof handler !== 'function') return self;\n      const method = priority ? 'unshift' : 'push';\n      events.split(' ').forEach(event => {\n        if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n        self.eventsListeners[event][method](handler);\n      });\n      return self;\n    },\n\n    once(events, handler, priority) {\n      const self = this;\n      if (typeof handler !== 'function') return self;\n\n      function onceHandler() {\n        self.off(events, onceHandler);\n\n        if (onceHandler.__emitterProxy) {\n          delete onceHandler.__emitterProxy;\n        }\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        handler.apply(self, args);\n      }\n\n      onceHandler.__emitterProxy = handler;\n      return self.on(events, onceHandler, priority);\n    },\n\n    onAny(handler, priority) {\n      const self = this;\n      if (typeof handler !== 'function') return self;\n      const method = priority ? 'unshift' : 'push';\n\n      if (self.eventsAnyListeners.indexOf(handler) < 0) {\n        self.eventsAnyListeners[method](handler);\n      }\n\n      return self;\n    },\n\n    offAny(handler) {\n      const self = this;\n      if (!self.eventsAnyListeners) return self;\n      const index = self.eventsAnyListeners.indexOf(handler);\n\n      if (index >= 0) {\n        self.eventsAnyListeners.splice(index, 1);\n      }\n\n      return self;\n    },\n\n    off(events, handler) {\n      const self = this;\n      if (!self.eventsListeners) return self;\n      events.split(' ').forEach(event => {\n        if (typeof handler === 'undefined') {\n          self.eventsListeners[event] = [];\n        } else if (self.eventsListeners[event]) {\n          self.eventsListeners[event].forEach((eventHandler, index) => {\n            if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n              self.eventsListeners[event].splice(index, 1);\n            }\n          });\n        }\n      });\n      return self;\n    },\n\n    emit() {\n      const self = this;\n      if (!self.eventsListeners) return self;\n      let events;\n      let data;\n      let context;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n        events = args[0];\n        data = args.slice(1, args.length);\n        context = self;\n      } else {\n        events = args[0].events;\n        data = args[0].data;\n        context = args[0].context || self;\n      }\n\n      data.unshift(context);\n      const eventsArray = Array.isArray(events) ? events : events.split(' ');\n      eventsArray.forEach(event => {\n        if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n          self.eventsAnyListeners.forEach(eventHandler => {\n            eventHandler.apply(context, [event, ...data]);\n          });\n        }\n\n        if (self.eventsListeners && self.eventsListeners[event]) {\n          self.eventsListeners[event].forEach(eventHandler => {\n            eventHandler.apply(context, data);\n          });\n        }\n      });\n      return self;\n    }\n\n  };\n\n  function updateSize() {\n    const swiper = this;\n    let width;\n    let height;\n    const $el = swiper.$el;\n\n    if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n      width = swiper.params.width;\n    } else {\n      width = $el[0].clientWidth;\n    }\n\n    if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n      height = swiper.params.height;\n    } else {\n      height = $el[0].clientHeight;\n    }\n\n    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n      return;\n    } // Subtract paddings\n\n\n    width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);\n    height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);\n    if (Number.isNaN(width)) width = 0;\n    if (Number.isNaN(height)) height = 0;\n    Object.assign(swiper, {\n      width,\n      height,\n      size: swiper.isHorizontal() ? width : height\n    });\n  }\n\n  function updateSlides() {\n    const swiper = this;\n\n    function getDirectionLabel(property) {\n      if (swiper.isHorizontal()) {\n        return property;\n      } // prettier-ignore\n\n\n      return {\n        'width': 'height',\n        'margin-top': 'margin-left',\n        'margin-bottom ': 'margin-right',\n        'margin-left': 'margin-top',\n        'margin-right': 'margin-bottom',\n        'padding-left': 'padding-top',\n        'padding-right': 'padding-bottom',\n        'marginRight': 'marginBottom'\n      }[property];\n    }\n\n    function getDirectionPropertyValue(node, label) {\n      return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n    }\n\n    const params = swiper.params;\n    const {\n      $wrapperEl,\n      size: swiperSize,\n      rtlTranslate: rtl,\n      wrongRTL\n    } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n    const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n    let snapGrid = [];\n    const slidesGrid = [];\n    const slidesSizesGrid = [];\n    let offsetBefore = params.slidesOffsetBefore;\n\n    if (typeof offsetBefore === 'function') {\n      offsetBefore = params.slidesOffsetBefore.call(swiper);\n    }\n\n    let offsetAfter = params.slidesOffsetAfter;\n\n    if (typeof offsetAfter === 'function') {\n      offsetAfter = params.slidesOffsetAfter.call(swiper);\n    }\n\n    const previousSnapGridLength = swiper.snapGrid.length;\n    const previousSlidesGridLength = swiper.slidesGrid.length;\n    let spaceBetween = params.spaceBetween;\n    let slidePosition = -offsetBefore;\n    let prevSlideSize = 0;\n    let index = 0;\n\n    if (typeof swiperSize === 'undefined') {\n      return;\n    }\n\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n    }\n\n    swiper.virtualSize = -spaceBetween; // reset margins\n\n    if (rtl) slides.css({\n      marginLeft: '',\n      marginBottom: '',\n      marginTop: ''\n    });else slides.css({\n      marginRight: '',\n      marginBottom: '',\n      marginTop: ''\n    }); // reset cssMode offsets\n\n    if (params.centeredSlides && params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n      setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n    }\n\n    const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n    if (gridEnabled) {\n      swiper.grid.initSlides(slidesLength);\n    } // Calc slides\n\n\n    let slideSize;\n    const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n      return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n    }).length > 0;\n\n    for (let i = 0; i < slidesLength; i += 1) {\n      slideSize = 0;\n      const slide = slides.eq(i);\n\n      if (gridEnabled) {\n        swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n      }\n\n      if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n      if (params.slidesPerView === 'auto') {\n        if (shouldResetSlideSize) {\n          slides[i].style[getDirectionLabel('width')] = ``;\n        }\n\n        const slideStyles = getComputedStyle(slide[0]);\n        const currentTransform = slide[0].style.transform;\n        const currentWebKitTransform = slide[0].style.webkitTransform;\n\n        if (currentTransform) {\n          slide[0].style.transform = 'none';\n        }\n\n        if (currentWebKitTransform) {\n          slide[0].style.webkitTransform = 'none';\n        }\n\n        if (params.roundLengths) {\n          slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n        } else {\n          // eslint-disable-next-line\n          const width = getDirectionPropertyValue(slideStyles, 'width');\n          const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n          const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n          const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n          const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = width + marginLeft + marginRight;\n          } else {\n            const {\n              clientWidth,\n              offsetWidth\n            } = slide[0];\n            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n          }\n        }\n\n        if (currentTransform) {\n          slide[0].style.transform = currentTransform;\n        }\n\n        if (currentWebKitTransform) {\n          slide[0].style.webkitTransform = currentWebKitTransform;\n        }\n\n        if (params.roundLengths) slideSize = Math.floor(slideSize);\n      } else {\n        slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n        if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n        if (slides[i]) {\n          slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n        }\n      }\n\n      if (slides[i]) {\n        slides[i].swiperSlideSize = slideSize;\n      }\n\n      slidesSizesGrid.push(slideSize);\n\n      if (params.centeredSlides) {\n        slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n        if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n        if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n        if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n        if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n        if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n        slidesGrid.push(slidePosition);\n      } else {\n        if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n        if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n        slidesGrid.push(slidePosition);\n        slidePosition = slidePosition + slideSize + spaceBetween;\n      }\n\n      swiper.virtualSize += slideSize + spaceBetween;\n      prevSlideSize = slideSize;\n      index += 1;\n    }\n\n    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n    if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n      $wrapperEl.css({\n        width: `${swiper.virtualSize + params.spaceBetween}px`\n      });\n    }\n\n    if (params.setWrapperSize) {\n      $wrapperEl.css({\n        [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n      });\n    }\n\n    if (gridEnabled) {\n      swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n    } // Remove last grid elements depending on width\n\n\n    if (!params.centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n        if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n          newSlidesGrid.push(slidesGridItem);\n        }\n      }\n\n      snapGrid = newSlidesGrid;\n\n      if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n        snapGrid.push(swiper.virtualSize - swiperSize);\n      }\n    }\n\n    if (snapGrid.length === 0) snapGrid = [0];\n\n    if (params.spaceBetween !== 0) {\n      const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n      slides.filter((_, slideIndex) => {\n        if (!params.cssMode) return true;\n\n        if (slideIndex === slides.length - 1) {\n          return false;\n        }\n\n        return true;\n      }).css({\n        [key]: `${spaceBetween}px`\n      });\n    }\n\n    if (params.centeredSlides && params.centeredSlidesBounds) {\n      let allSlidesSize = 0;\n      slidesSizesGrid.forEach(slideSizeValue => {\n        allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n      });\n      allSlidesSize -= params.spaceBetween;\n      const maxSnap = allSlidesSize - swiperSize;\n      snapGrid = snapGrid.map(snap => {\n        if (snap < 0) return -offsetBefore;\n        if (snap > maxSnap) return maxSnap + offsetAfter;\n        return snap;\n      });\n    }\n\n    if (params.centerInsufficientSlides) {\n      let allSlidesSize = 0;\n      slidesSizesGrid.forEach(slideSizeValue => {\n        allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n      });\n      allSlidesSize -= params.spaceBetween;\n\n      if (allSlidesSize < swiperSize) {\n        const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n        snapGrid.forEach((snap, snapIndex) => {\n          snapGrid[snapIndex] = snap - allSlidesOffset;\n        });\n        slidesGrid.forEach((snap, snapIndex) => {\n          slidesGrid[snapIndex] = snap + allSlidesOffset;\n        });\n      }\n    }\n\n    Object.assign(swiper, {\n      slides,\n      snapGrid,\n      slidesGrid,\n      slidesSizesGrid\n    });\n\n    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n      setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n      setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n      const addToSnapGrid = -swiper.snapGrid[0];\n      const addToSlidesGrid = -swiper.slidesGrid[0];\n      swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n      swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n    }\n\n    if (slidesLength !== previousSlidesLength) {\n      swiper.emit('slidesLengthChange');\n    }\n\n    if (snapGrid.length !== previousSnapGridLength) {\n      if (swiper.params.watchOverflow) swiper.checkOverflow();\n      swiper.emit('snapGridLengthChange');\n    }\n\n    if (slidesGrid.length !== previousSlidesGridLength) {\n      swiper.emit('slidesGridLengthChange');\n    }\n\n    if (params.watchSlidesProgress) {\n      swiper.updateSlidesOffset();\n    }\n\n    if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n      const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n      const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n\n      if (slidesLength <= params.maxBackfaceHiddenSlides) {\n        if (!hasClassBackfaceClassAdded) swiper.$el.addClass(backFaceHiddenClass);\n      } else if (hasClassBackfaceClassAdded) {\n        swiper.$el.removeClass(backFaceHiddenClass);\n      }\n    }\n  }\n\n  function updateAutoHeight(speed) {\n    const swiper = this;\n    const activeSlides = [];\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let newHeight = 0;\n    let i;\n\n    if (typeof speed === 'number') {\n      swiper.setTransition(speed);\n    } else if (speed === true) {\n      swiper.setTransition(swiper.params.speed);\n    }\n\n    const getSlideByIndex = index => {\n      if (isVirtual) {\n        return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];\n      }\n\n      return swiper.slides.eq(index)[0];\n    }; // Find slides currently in view\n\n\n    if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n      if (swiper.params.centeredSlides) {\n        swiper.visibleSlides.each(slide => {\n          activeSlides.push(slide);\n        });\n      } else {\n        for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n          const index = swiper.activeIndex + i;\n          if (index > swiper.slides.length && !isVirtual) break;\n          activeSlides.push(getSlideByIndex(index));\n        }\n      }\n    } else {\n      activeSlides.push(getSlideByIndex(swiper.activeIndex));\n    } // Find new height from highest slide in view\n\n\n    for (i = 0; i < activeSlides.length; i += 1) {\n      if (typeof activeSlides[i] !== 'undefined') {\n        const height = activeSlides[i].offsetHeight;\n        newHeight = height > newHeight ? height : newHeight;\n      }\n    } // Update Height\n\n\n    if (newHeight || newHeight === 0) swiper.$wrapperEl.css('height', `${newHeight}px`);\n  }\n\n  function updateSlidesOffset() {\n    const swiper = this;\n    const slides = swiper.slides;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n    }\n  }\n\n  function updateSlidesProgress(translate) {\n    if (translate === void 0) {\n      translate = this && this.translate || 0;\n    }\n\n    const swiper = this;\n    const params = swiper.params;\n    const {\n      slides,\n      rtlTranslate: rtl,\n      snapGrid\n    } = swiper;\n    if (slides.length === 0) return;\n    if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n    let offsetCenter = -translate;\n    if (rtl) offsetCenter = translate; // Visible Slides\n\n    slides.removeClass(params.slideVisibleClass);\n    swiper.visibleSlidesIndexes = [];\n    swiper.visibleSlides = [];\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const slide = slides[i];\n      let slideOffset = slide.swiperSlideOffset;\n\n      if (params.cssMode && params.centeredSlides) {\n        slideOffset -= slides[0].swiperSlideOffset;\n      }\n\n      const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n      const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n      const slideBefore = -(offsetCenter - slideOffset);\n      const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n      const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n\n      if (isVisible) {\n        swiper.visibleSlides.push(slide);\n        swiper.visibleSlidesIndexes.push(i);\n        slides.eq(i).addClass(params.slideVisibleClass);\n      }\n\n      slide.progress = rtl ? -slideProgress : slideProgress;\n      slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n    }\n\n    swiper.visibleSlides = $(swiper.visibleSlides);\n  }\n\n  function updateProgress(translate) {\n    const swiper = this;\n\n    if (typeof translate === 'undefined') {\n      const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n      translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n    }\n\n    const params = swiper.params;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    let {\n      progress,\n      isBeginning,\n      isEnd\n    } = swiper;\n    const wasBeginning = isBeginning;\n    const wasEnd = isEnd;\n\n    if (translatesDiff === 0) {\n      progress = 0;\n      isBeginning = true;\n      isEnd = true;\n    } else {\n      progress = (translate - swiper.minTranslate()) / translatesDiff;\n      isBeginning = progress <= 0;\n      isEnd = progress >= 1;\n    }\n\n    Object.assign(swiper, {\n      progress,\n      isBeginning,\n      isEnd\n    });\n    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n    if (isBeginning && !wasBeginning) {\n      swiper.emit('reachBeginning toEdge');\n    }\n\n    if (isEnd && !wasEnd) {\n      swiper.emit('reachEnd toEdge');\n    }\n\n    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n      swiper.emit('fromEdge');\n    }\n\n    swiper.emit('progress', progress);\n  }\n\n  function updateSlidesClasses() {\n    const swiper = this;\n    const {\n      slides,\n      params,\n      $wrapperEl,\n      activeIndex,\n      realIndex\n    } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n    let activeSlide;\n\n    if (isVirtual) {\n      activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n    } else {\n      activeSlide = slides.eq(activeIndex);\n    } // Active classes\n\n\n    activeSlide.addClass(params.slideActiveClass);\n\n    if (params.loop) {\n      // Duplicate to all looped slides\n      if (activeSlide.hasClass(params.slideDuplicateClass)) {\n        $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n      } else {\n        $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n      }\n    } // Next Slide\n\n\n    let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n\n    if (params.loop && nextSlide.length === 0) {\n      nextSlide = slides.eq(0);\n      nextSlide.addClass(params.slideNextClass);\n    } // Prev Slide\n\n\n    let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n\n    if (params.loop && prevSlide.length === 0) {\n      prevSlide = slides.eq(-1);\n      prevSlide.addClass(params.slidePrevClass);\n    }\n\n    if (params.loop) {\n      // Duplicate to all looped slides\n      if (nextSlide.hasClass(params.slideDuplicateClass)) {\n        $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n      } else {\n        $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n      }\n\n      if (prevSlide.hasClass(params.slideDuplicateClass)) {\n        $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n      } else {\n        $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n      }\n    }\n\n    swiper.emitSlidesClasses();\n  }\n\n  function updateActiveIndex(newActiveIndex) {\n    const swiper = this;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    const {\n      slidesGrid,\n      snapGrid,\n      params,\n      activeIndex: previousIndex,\n      realIndex: previousRealIndex,\n      snapIndex: previousSnapIndex\n    } = swiper;\n    let activeIndex = newActiveIndex;\n    let snapIndex;\n\n    if (typeof activeIndex === 'undefined') {\n      for (let i = 0; i < slidesGrid.length; i += 1) {\n        if (typeof slidesGrid[i + 1] !== 'undefined') {\n          if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n            activeIndex = i;\n          } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n            activeIndex = i + 1;\n          }\n        } else if (translate >= slidesGrid[i]) {\n          activeIndex = i;\n        }\n      } // Normalize slideIndex\n\n\n      if (params.normalizeSlideIndex) {\n        if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n      }\n    }\n\n    if (snapGrid.indexOf(translate) >= 0) {\n      snapIndex = snapGrid.indexOf(translate);\n    } else {\n      const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n      snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n    }\n\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n    if (activeIndex === previousIndex) {\n      if (snapIndex !== previousSnapIndex) {\n        swiper.snapIndex = snapIndex;\n        swiper.emit('snapIndexChange');\n      }\n\n      return;\n    } // Get real index\n\n\n    const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n    Object.assign(swiper, {\n      snapIndex,\n      realIndex,\n      previousIndex,\n      activeIndex\n    });\n    swiper.emit('activeIndexChange');\n    swiper.emit('snapIndexChange');\n\n    if (previousRealIndex !== realIndex) {\n      swiper.emit('realIndexChange');\n    }\n\n    if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n      swiper.emit('slideChange');\n    }\n  }\n\n  function updateClickedSlide(e) {\n    const swiper = this;\n    const params = swiper.params;\n    const slide = $(e).closest(`.${params.slideClass}`)[0];\n    let slideFound = false;\n    let slideIndex;\n\n    if (slide) {\n      for (let i = 0; i < swiper.slides.length; i += 1) {\n        if (swiper.slides[i] === slide) {\n          slideFound = true;\n          slideIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (slide && slideFound) {\n      swiper.clickedSlide = slide;\n\n      if (swiper.virtual && swiper.params.virtual.enabled) {\n        swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);\n      } else {\n        swiper.clickedIndex = slideIndex;\n      }\n    } else {\n      swiper.clickedSlide = undefined;\n      swiper.clickedIndex = undefined;\n      return;\n    }\n\n    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n      swiper.slideToClickedSlide();\n    }\n  }\n\n  var update = {\n    updateSize,\n    updateSlides,\n    updateAutoHeight,\n    updateSlidesOffset,\n    updateSlidesProgress,\n    updateProgress,\n    updateSlidesClasses,\n    updateActiveIndex,\n    updateClickedSlide\n  };\n\n  function getSwiperTranslate(axis) {\n    if (axis === void 0) {\n      axis = this.isHorizontal() ? 'x' : 'y';\n    }\n\n    const swiper = this;\n    const {\n      params,\n      rtlTranslate: rtl,\n      translate,\n      $wrapperEl\n    } = swiper;\n\n    if (params.virtualTranslate) {\n      return rtl ? -translate : translate;\n    }\n\n    if (params.cssMode) {\n      return translate;\n    }\n\n    let currentTranslate = getTranslate($wrapperEl[0], axis);\n    if (rtl) currentTranslate = -currentTranslate;\n    return currentTranslate || 0;\n  }\n\n  function setTranslate(translate, byController) {\n    const swiper = this;\n    const {\n      rtlTranslate: rtl,\n      params,\n      $wrapperEl,\n      wrapperEl,\n      progress\n    } = swiper;\n    let x = 0;\n    let y = 0;\n    const z = 0;\n\n    if (swiper.isHorizontal()) {\n      x = rtl ? -translate : translate;\n    } else {\n      y = translate;\n    }\n\n    if (params.roundLengths) {\n      x = Math.floor(x);\n      y = Math.floor(y);\n    }\n\n    if (params.cssMode) {\n      wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n    } else if (!params.virtualTranslate) {\n      $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n    }\n\n    swiper.previousTranslate = swiper.translate;\n    swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\n\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n    if (translatesDiff === 0) {\n      newProgress = 0;\n    } else {\n      newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n    }\n\n    if (newProgress !== progress) {\n      swiper.updateProgress(translate);\n    }\n\n    swiper.emit('setTranslate', swiper.translate, byController);\n  }\n\n  function minTranslate() {\n    return -this.snapGrid[0];\n  }\n\n  function maxTranslate() {\n    return -this.snapGrid[this.snapGrid.length - 1];\n  }\n\n  function translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n    if (translate === void 0) {\n      translate = 0;\n    }\n\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    if (translateBounds === void 0) {\n      translateBounds = true;\n    }\n\n    const swiper = this;\n    const {\n      params,\n      wrapperEl\n    } = swiper;\n\n    if (swiper.animating && params.preventInteractionOnTransition) {\n      return false;\n    }\n\n    const minTranslate = swiper.minTranslate();\n    const maxTranslate = swiper.maxTranslate();\n    let newTranslate;\n    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n    swiper.updateProgress(newTranslate);\n\n    if (params.cssMode) {\n      const isH = swiper.isHorizontal();\n\n      if (speed === 0) {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n      } else {\n        if (!swiper.support.smoothScroll) {\n          animateCSSModeScroll({\n            swiper,\n            targetPosition: -newTranslate,\n            side: isH ? 'left' : 'top'\n          });\n          return true;\n        }\n\n        wrapperEl.scrollTo({\n          [isH ? 'left' : 'top']: -newTranslate,\n          behavior: 'smooth'\n        });\n      }\n\n      return true;\n    }\n\n    if (speed === 0) {\n      swiper.setTransition(0);\n      swiper.setTranslate(newTranslate);\n\n      if (runCallbacks) {\n        swiper.emit('beforeTransitionStart', speed, internal);\n        swiper.emit('transitionEnd');\n      }\n    } else {\n      swiper.setTransition(speed);\n      swiper.setTranslate(newTranslate);\n\n      if (runCallbacks) {\n        swiper.emit('beforeTransitionStart', speed, internal);\n        swiper.emit('transitionStart');\n      }\n\n      if (!swiper.animating) {\n        swiper.animating = true;\n\n        if (!swiper.onTranslateToWrapperTransitionEnd) {\n          swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n            if (!swiper || swiper.destroyed) return;\n            if (e.target !== this) return;\n            swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n            swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n            swiper.onTranslateToWrapperTransitionEnd = null;\n            delete swiper.onTranslateToWrapperTransitionEnd;\n\n            if (runCallbacks) {\n              swiper.emit('transitionEnd');\n            }\n          };\n        }\n\n        swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n      }\n    }\n\n    return true;\n  }\n\n  var translate = {\n    getTranslate: getSwiperTranslate,\n    setTranslate,\n    minTranslate,\n    maxTranslate,\n    translateTo\n  };\n\n  function setTransition(duration, byController) {\n    const swiper = this;\n\n    if (!swiper.params.cssMode) {\n      swiper.$wrapperEl.transition(duration);\n    }\n\n    swiper.emit('setTransition', duration, byController);\n  }\n\n  function transitionEmit(_ref) {\n    let {\n      swiper,\n      runCallbacks,\n      direction,\n      step\n    } = _ref;\n    const {\n      activeIndex,\n      previousIndex\n    } = swiper;\n    let dir = direction;\n\n    if (!dir) {\n      if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n    }\n\n    swiper.emit(`transition${step}`);\n\n    if (runCallbacks && activeIndex !== previousIndex) {\n      if (dir === 'reset') {\n        swiper.emit(`slideResetTransition${step}`);\n        return;\n      }\n\n      swiper.emit(`slideChangeTransition${step}`);\n\n      if (dir === 'next') {\n        swiper.emit(`slideNextTransition${step}`);\n      } else {\n        swiper.emit(`slidePrevTransition${step}`);\n      }\n    }\n  }\n\n  function transitionStart(runCallbacks, direction) {\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    const swiper = this;\n    const {\n      params\n    } = swiper;\n    if (params.cssMode) return;\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    transitionEmit({\n      swiper,\n      runCallbacks,\n      direction,\n      step: 'Start'\n    });\n  }\n\n  function transitionEnd(runCallbacks, direction) {\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    const swiper = this;\n    const {\n      params\n    } = swiper;\n    swiper.animating = false;\n    if (params.cssMode) return;\n    swiper.setTransition(0);\n    transitionEmit({\n      swiper,\n      runCallbacks,\n      direction,\n      step: 'End'\n    });\n  }\n\n  var transition = {\n    setTransition,\n    transitionStart,\n    transitionEnd\n  };\n\n  function slideTo(index, speed, runCallbacks, internal, initial) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    if (typeof index !== 'number' && typeof index !== 'string') {\n      throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n    }\n\n    if (typeof index === 'string') {\n      /**\n       * The `index` argument converted from `string` to `number`.\n       * @type {number}\n       */\n      const indexAsNumber = parseInt(index, 10);\n      /**\n       * Determines whether the `index` argument is a valid `number`\n       * after being converted from the `string` type.\n       * @type {boolean}\n       */\n\n      const isValidNumber = isFinite(indexAsNumber);\n\n      if (!isValidNumber) {\n        throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n      } // Knowing that the converted `index` is a valid number,\n      // we can update the original argument's value.\n\n\n      index = indexAsNumber;\n    }\n\n    const swiper = this;\n    let slideIndex = index;\n    if (slideIndex < 0) slideIndex = 0;\n    const {\n      params,\n      snapGrid,\n      slidesGrid,\n      previousIndex,\n      activeIndex,\n      rtlTranslate: rtl,\n      wrapperEl,\n      enabled\n    } = swiper;\n\n    if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n      return false;\n    }\n\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n    if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n      swiper.emit('beforeSlideChangeStart');\n    }\n\n    const translate = -snapGrid[snapIndex]; // Update progress\n\n    swiper.updateProgress(translate); // Normalize slideIndex\n\n    if (params.normalizeSlideIndex) {\n      for (let i = 0; i < slidesGrid.length; i += 1) {\n        const normalizedTranslate = -Math.floor(translate * 100);\n        const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n        const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n        if (typeof slidesGrid[i + 1] !== 'undefined') {\n          if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n            slideIndex = i;\n          } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n            slideIndex = i + 1;\n          }\n        } else if (normalizedTranslate >= normalizedGrid) {\n          slideIndex = i;\n        }\n      }\n    } // Directions locks\n\n\n    if (swiper.initialized && slideIndex !== activeIndex) {\n      if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n        return false;\n      }\n\n      if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n        if ((activeIndex || 0) !== slideIndex) return false;\n      }\n    }\n\n    let direction;\n    if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n    if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n      swiper.updateActiveIndex(slideIndex); // Update Height\n\n      if (params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n\n      swiper.updateSlidesClasses();\n\n      if (params.effect !== 'slide') {\n        swiper.setTranslate(translate);\n      }\n\n      if (direction !== 'reset') {\n        swiper.transitionStart(runCallbacks, direction);\n        swiper.transitionEnd(runCallbacks, direction);\n      }\n\n      return false;\n    }\n\n    if (params.cssMode) {\n      const isH = swiper.isHorizontal();\n      const t = rtl ? translate : -translate;\n\n      if (speed === 0) {\n        const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n        if (isVirtual) {\n          swiper.wrapperEl.style.scrollSnapType = 'none';\n          swiper._immediateVirtual = true;\n        }\n\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n        if (isVirtual) {\n          requestAnimationFrame(() => {\n            swiper.wrapperEl.style.scrollSnapType = '';\n            swiper._swiperImmediateVirtual = false;\n          });\n        }\n      } else {\n        if (!swiper.support.smoothScroll) {\n          animateCSSModeScroll({\n            swiper,\n            targetPosition: t,\n            side: isH ? 'left' : 'top'\n          });\n          return true;\n        }\n\n        wrapperEl.scrollTo({\n          [isH ? 'left' : 'top']: t,\n          behavior: 'smooth'\n        });\n      }\n\n      return true;\n    }\n\n    swiper.setTransition(speed);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit('beforeTransitionStart', speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n\n    if (speed === 0) {\n      swiper.transitionEnd(runCallbacks, direction);\n    } else if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onSlideToWrapperTransitionEnd) {\n        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n          swiper.onSlideToWrapperTransitionEnd = null;\n          delete swiper.onSlideToWrapperTransitionEnd;\n          swiper.transitionEnd(runCallbacks, direction);\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n    }\n\n    return true;\n  }\n\n  function slideToLoop(index, speed, runCallbacks, internal) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    const swiper = this;\n    let newIndex = index;\n\n    if (swiper.params.loop) {\n      newIndex += swiper.loopedSlides;\n    }\n\n    return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n  }\n  /* eslint no-unused-vars: \"off\" */\n\n\n  function slideNext(speed, runCallbacks, internal) {\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    const swiper = this;\n    const {\n      animating,\n      enabled,\n      params\n    } = swiper;\n    if (!enabled) return swiper;\n    let perGroup = params.slidesPerGroup;\n\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n    }\n\n    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n\n    if (params.loop) {\n      if (animating && params.loopPreventsSlide) return false;\n      swiper.loopFix(); // eslint-disable-next-line\n\n      swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n    }\n\n    if (params.rewind && swiper.isEnd) {\n      return swiper.slideTo(0, speed, runCallbacks, internal);\n    }\n\n    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n  }\n  /* eslint no-unused-vars: \"off\" */\n\n\n  function slidePrev(speed, runCallbacks, internal) {\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    const swiper = this;\n    const {\n      params,\n      animating,\n      snapGrid,\n      slidesGrid,\n      rtlTranslate,\n      enabled\n    } = swiper;\n    if (!enabled) return swiper;\n\n    if (params.loop) {\n      if (animating && params.loopPreventsSlide) return false;\n      swiper.loopFix(); // eslint-disable-next-line\n\n      swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n    }\n\n    const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n\n    function normalize(val) {\n      if (val < 0) return -Math.floor(Math.abs(val));\n      return Math.floor(val);\n    }\n\n    const normalizedTranslate = normalize(translate);\n    const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n\n    if (typeof prevSnap === 'undefined' && params.cssMode) {\n      let prevSnapIndex;\n      snapGrid.forEach((snap, snapIndex) => {\n        if (normalizedTranslate >= snap) {\n          // prevSnap = snap;\n          prevSnapIndex = snapIndex;\n        }\n      });\n\n      if (typeof prevSnapIndex !== 'undefined') {\n        prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n      }\n    }\n\n    let prevIndex = 0;\n\n    if (typeof prevSnap !== 'undefined') {\n      prevIndex = slidesGrid.indexOf(prevSnap);\n      if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n\n      if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n        prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n        prevIndex = Math.max(prevIndex, 0);\n      }\n    }\n\n    if (params.rewind && swiper.isBeginning) {\n      const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n      return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n    }\n\n    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n  }\n  /* eslint no-unused-vars: \"off\" */\n\n\n  function slideReset(speed, runCallbacks, internal) {\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    const swiper = this;\n    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n  }\n  /* eslint no-unused-vars: \"off\" */\n\n\n  function slideToClosest(speed, runCallbacks, internal, threshold) {\n    if (speed === void 0) {\n      speed = this.params.speed;\n    }\n\n    if (runCallbacks === void 0) {\n      runCallbacks = true;\n    }\n\n    if (threshold === void 0) {\n      threshold = 0.5;\n    }\n\n    const swiper = this;\n    let index = swiper.activeIndex;\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n    if (translate >= swiper.snapGrid[snapIndex]) {\n      // The current translate is on or after the current snap index, so the choice\n      // is between the current index and the one after it.\n      const currentSnap = swiper.snapGrid[snapIndex];\n      const nextSnap = swiper.snapGrid[snapIndex + 1];\n\n      if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n        index += swiper.params.slidesPerGroup;\n      }\n    } else {\n      // The current translate is before the current snap index, so the choice\n      // is between the current index and the one before it.\n      const prevSnap = swiper.snapGrid[snapIndex - 1];\n      const currentSnap = swiper.snapGrid[snapIndex];\n\n      if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n        index -= swiper.params.slidesPerGroup;\n      }\n    }\n\n    index = Math.max(index, 0);\n    index = Math.min(index, swiper.slidesGrid.length - 1);\n    return swiper.slideTo(index, speed, runCallbacks, internal);\n  }\n\n  function slideToClickedSlide() {\n    const swiper = this;\n    const {\n      params,\n      $wrapperEl\n    } = swiper;\n    const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n    let slideToIndex = swiper.clickedIndex;\n    let realIndex;\n\n    if (params.loop) {\n      if (swiper.animating) return;\n      realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n      if (params.centeredSlides) {\n        if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n          swiper.loopFix();\n          slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n          nextTick(() => {\n            swiper.slideTo(slideToIndex);\n          });\n        } else {\n          swiper.slideTo(slideToIndex);\n        }\n      } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  }\n\n  var slide = {\n    slideTo,\n    slideToLoop,\n    slideNext,\n    slidePrev,\n    slideReset,\n    slideToClosest,\n    slideToClickedSlide\n  };\n\n  function loopCreate() {\n    const swiper = this;\n    const document = getDocument();\n    const {\n      params,\n      $wrapperEl\n    } = swiper; // Remove duplicated slides\n\n    const $selector = $wrapperEl.children().length > 0 ? $($wrapperEl.children()[0].parentNode) : $wrapperEl;\n    $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n    let slides = $selector.children(`.${params.slideClass}`);\n\n    if (params.loopFillGroupWithBlank) {\n      const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n\n      if (blankSlidesNum !== params.slidesPerGroup) {\n        for (let i = 0; i < blankSlidesNum; i += 1) {\n          const blankNode = $(document.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n          $selector.append(blankNode);\n        }\n\n        slides = $selector.children(`.${params.slideClass}`);\n      }\n    }\n\n    if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n    swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n    swiper.loopedSlides += params.loopAdditionalSlides;\n\n    if (swiper.loopedSlides > slides.length) {\n      swiper.loopedSlides = slides.length;\n    }\n\n    const prependSlides = [];\n    const appendSlides = [];\n    slides.each((el, index) => {\n      const slide = $(el);\n\n      if (index < swiper.loopedSlides) {\n        appendSlides.push(el);\n      }\n\n      if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n        prependSlides.push(el);\n      }\n\n      slide.attr('data-swiper-slide-index', index);\n    });\n\n    for (let i = 0; i < appendSlides.length; i += 1) {\n      $selector.append($(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n    }\n\n    for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n      $selector.prepend($(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n    }\n  }\n\n  function loopFix() {\n    const swiper = this;\n    swiper.emit('beforeLoopFix');\n    const {\n      activeIndex,\n      slides,\n      loopedSlides,\n      allowSlidePrev,\n      allowSlideNext,\n      snapGrid,\n      rtlTranslate: rtl\n    } = swiper;\n    let newIndex;\n    swiper.allowSlidePrev = true;\n    swiper.allowSlideNext = true;\n    const snapTranslate = -snapGrid[activeIndex];\n    const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding\n\n    if (activeIndex < loopedSlides) {\n      newIndex = slides.length - loopedSlides * 3 + activeIndex;\n      newIndex += loopedSlides;\n      const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n      if (slideChanged && diff !== 0) {\n        swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n      }\n    } else if (activeIndex >= slides.length - loopedSlides) {\n      // Fix For Positive Oversliding\n      newIndex = -slides.length + activeIndex + loopedSlides;\n      newIndex += loopedSlides;\n      const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n      if (slideChanged && diff !== 0) {\n        swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n      }\n    }\n\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    swiper.emit('loopFix');\n  }\n\n  function loopDestroy() {\n    const swiper = this;\n    const {\n      $wrapperEl,\n      params,\n      slides\n    } = swiper;\n    $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n    slides.removeAttr('data-swiper-slide-index');\n  }\n\n  var loop = {\n    loopCreate,\n    loopFix,\n    loopDestroy\n  };\n\n  function setGrabCursor(moving) {\n    const swiper = this;\n    if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n    const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n    el.style.cursor = 'move';\n    el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n    el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n    el.style.cursor = moving ? 'grabbing' : 'grab';\n  }\n\n  function unsetGrabCursor() {\n    const swiper = this;\n\n    if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n      return;\n    }\n\n    swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n  }\n\n  var grabCursor = {\n    setGrabCursor,\n    unsetGrabCursor\n  };\n\n  function closestElement(selector, base) {\n    if (base === void 0) {\n      base = this;\n    }\n\n    function __closestFrom(el) {\n      if (!el || el === getDocument() || el === getWindow()) return null;\n      if (el.assignedSlot) el = el.assignedSlot;\n      const found = el.closest(selector);\n      return found || __closestFrom(el.getRootNode().host);\n    }\n\n    return __closestFrom(base);\n  }\n\n  function onTouchStart(event) {\n    const swiper = this;\n    const document = getDocument();\n    const window = getWindow();\n    const data = swiper.touchEventsData;\n    const {\n      params,\n      touches,\n      enabled\n    } = swiper;\n    if (!enabled) return;\n\n    if (swiper.animating && params.preventInteractionOnTransition) {\n      return;\n    }\n\n    if (!swiper.animating && params.cssMode && params.loop) {\n      swiper.loopFix();\n    }\n\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    let $targetEl = $(e.target);\n\n    if (params.touchEventsTarget === 'wrapper') {\n      if (!$targetEl.closest(swiper.wrapperEl).length) return;\n    }\n\n    data.isTouchEvent = e.type === 'touchstart';\n    if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n    if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n    if (data.isTouched && data.isMoved) return; // change target el for shadow root component\n\n    const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n\n    if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {\n      $targetEl = $(event.path[0]);\n    }\n\n    const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n    const isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element\n\n    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, e.target) : $targetEl.closest(noSwipingSelector)[0])) {\n      swiper.allowClick = true;\n      return;\n    }\n\n    if (params.swipeHandler) {\n      if (!$targetEl.closest(params.swipeHandler)[0]) return;\n    }\n\n    touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    const startX = touches.currentX;\n    const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n    const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n    const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n\n    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n      if (edgeSwipeDetection === 'prevent') {\n        event.preventDefault();\n      } else {\n        return;\n      }\n    }\n\n    Object.assign(data, {\n      isTouched: true,\n      isMoved: false,\n      allowTouchCallbacks: true,\n      isScrolling: undefined,\n      startMoving: undefined\n    });\n    touches.startX = startX;\n    touches.startY = startY;\n    data.touchStartTime = now();\n    swiper.allowClick = true;\n    swiper.updateSize();\n    swiper.swipeDirection = undefined;\n    if (params.threshold > 0) data.allowThresholdMove = false;\n\n    if (e.type !== 'touchstart') {\n      let preventDefault = true;\n\n      if ($targetEl.is(data.focusableElements)) {\n        preventDefault = false;\n\n        if ($targetEl[0].nodeName === 'SELECT') {\n          data.isTouched = false;\n        }\n      }\n\n      if (document.activeElement && $(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {\n        document.activeElement.blur();\n      }\n\n      const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n\n      if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n        e.preventDefault();\n      }\n    }\n\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n      swiper.freeMode.onTouchStart();\n    }\n\n    swiper.emit('touchStart', e);\n  }\n\n  function onTouchMove(event) {\n    const document = getDocument();\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    const {\n      params,\n      touches,\n      rtlTranslate: rtl,\n      enabled\n    } = swiper;\n    if (!enabled) return;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n\n    if (!data.isTouched) {\n      if (data.startMoving && data.isScrolling) {\n        swiper.emit('touchMoveOpposite', e);\n      }\n\n      return;\n    }\n\n    if (data.isTouchEvent && e.type !== 'touchmove') return;\n    const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n    const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n    const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n\n    if (e.preventedByNestedSwiper) {\n      touches.startX = pageX;\n      touches.startY = pageY;\n      return;\n    }\n\n    if (!swiper.allowTouchMove) {\n      if (!$(e.target).is(data.focusableElements)) {\n        swiper.allowClick = false;\n      }\n\n      if (data.isTouched) {\n        Object.assign(touches, {\n          startX: pageX,\n          startY: pageY,\n          currentX: pageX,\n          currentY: pageY\n        });\n        data.touchStartTime = now();\n      }\n\n      return;\n    }\n\n    if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n      if (swiper.isVertical()) {\n        // Vertical\n        if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n          data.isTouched = false;\n          data.isMoved = false;\n          return;\n        }\n      } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n        return;\n      }\n    }\n\n    if (data.isTouchEvent && document.activeElement) {\n      if (e.target === document.activeElement && $(e.target).is(data.focusableElements)) {\n        data.isMoved = true;\n        swiper.allowClick = false;\n        return;\n      }\n    }\n\n    if (data.allowTouchCallbacks) {\n      swiper.emit('touchMove', e);\n    }\n\n    if (e.targetTouches && e.targetTouches.length > 1) return;\n    touches.currentX = pageX;\n    touches.currentY = pageY;\n    const diffX = touches.currentX - touches.startX;\n    const diffY = touches.currentY - touches.startY;\n    if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n\n    if (typeof data.isScrolling === 'undefined') {\n      let touchAngle;\n\n      if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n        data.isScrolling = false;\n      } else {\n        // eslint-disable-next-line\n        if (diffX * diffX + diffY * diffY >= 25) {\n          touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n          data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n        }\n      }\n    }\n\n    if (data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n\n    if (typeof data.startMoving === 'undefined') {\n      if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n        data.startMoving = true;\n      }\n    }\n\n    if (data.isScrolling) {\n      data.isTouched = false;\n      return;\n    }\n\n    if (!data.startMoving) {\n      return;\n    }\n\n    swiper.allowClick = false;\n\n    if (!params.cssMode && e.cancelable) {\n      e.preventDefault();\n    }\n\n    if (params.touchMoveStopPropagation && !params.nested) {\n      e.stopPropagation();\n    }\n\n    if (!data.isMoved) {\n      if (params.loop && !params.cssMode) {\n        swiper.loopFix();\n      }\n\n      data.startTranslate = swiper.getTranslate();\n      swiper.setTransition(0);\n\n      if (swiper.animating) {\n        swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n      }\n\n      data.allowMomentumBounce = false; // Grab Cursor\n\n      if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n        swiper.setGrabCursor(true);\n      }\n\n      swiper.emit('sliderFirstMove', e);\n    }\n\n    swiper.emit('sliderMove', e);\n    data.isMoved = true;\n    let diff = swiper.isHorizontal() ? diffX : diffY;\n    touches.diff = diff;\n    diff *= params.touchRatio;\n    if (rtl) diff = -diff;\n    swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n    data.currentTranslate = diff + data.startTranslate;\n    let disableParentSwiper = true;\n    let resistanceRatio = params.resistanceRatio;\n\n    if (params.touchReleaseOnEdges) {\n      resistanceRatio = 0;\n    }\n\n    if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n      disableParentSwiper = false;\n      if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n    } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n      disableParentSwiper = false;\n      if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n    }\n\n    if (disableParentSwiper) {\n      e.preventedByNestedSwiper = true;\n    } // Directions locks\n\n\n    if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n      data.currentTranslate = data.startTranslate;\n    }\n\n    if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n      data.currentTranslate = data.startTranslate;\n    }\n\n    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n      data.currentTranslate = data.startTranslate;\n    } // Threshold\n\n\n    if (params.threshold > 0) {\n      if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n        if (!data.allowThresholdMove) {\n          data.allowThresholdMove = true;\n          touches.startX = touches.currentX;\n          touches.startY = touches.currentY;\n          data.currentTranslate = data.startTranslate;\n          touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n          return;\n        }\n      } else {\n        data.currentTranslate = data.startTranslate;\n        return;\n      }\n    }\n\n    if (!params.followFinger || params.cssMode) return; // Update active index in free mode\n\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n      swiper.freeMode.onTouchMove();\n    } // Update progress\n\n\n    swiper.updateProgress(data.currentTranslate); // Update translate\n\n    swiper.setTranslate(data.currentTranslate);\n  }\n\n  function onTouchEnd(event) {\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    const {\n      params,\n      touches,\n      rtlTranslate: rtl,\n      slidesGrid,\n      enabled\n    } = swiper;\n    if (!enabled) return;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n\n    if (data.allowTouchCallbacks) {\n      swiper.emit('touchEnd', e);\n    }\n\n    data.allowTouchCallbacks = false;\n\n    if (!data.isTouched) {\n      if (data.isMoved && params.grabCursor) {\n        swiper.setGrabCursor(false);\n      }\n\n      data.isMoved = false;\n      data.startMoving = false;\n      return;\n    } // Return Grab Cursor\n\n\n    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(false);\n    } // Time diff\n\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n    if (swiper.allowClick) {\n      const pathTree = e.path || e.composedPath && e.composedPath();\n      swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n      swiper.emit('tap click', e);\n\n      if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n        swiper.emit('doubleTap doubleClick', e);\n      }\n    }\n\n    data.lastClickTime = now();\n    nextTick(() => {\n      if (!swiper.destroyed) swiper.allowClick = true;\n    });\n\n    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n      data.isTouched = false;\n      data.isMoved = false;\n      data.startMoving = false;\n      return;\n    }\n\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    let currentPos;\n\n    if (params.followFinger) {\n      currentPos = rtl ? swiper.translate : -swiper.translate;\n    } else {\n      currentPos = -data.currentTranslate;\n    }\n\n    if (params.cssMode) {\n      return;\n    }\n\n    if (swiper.params.freeMode && params.freeMode.enabled) {\n      swiper.freeMode.onTouchEnd({\n        currentPos\n      });\n      return;\n    } // Find current slide\n\n\n    let stopIndex = 0;\n    let groupSize = swiper.slidesSizesGrid[0];\n\n    for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n      const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n      if (typeof slidesGrid[i + increment] !== 'undefined') {\n        if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n          stopIndex = i;\n          groupSize = slidesGrid[i + increment] - slidesGrid[i];\n        }\n      } else if (currentPos >= slidesGrid[i]) {\n        stopIndex = i;\n        groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n      }\n    } // Find current slide size\n\n\n    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n    const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (timeDiff > params.longSwipesMs) {\n      // Long touches\n      if (!params.longSwipes) {\n        swiper.slideTo(swiper.activeIndex);\n        return;\n      }\n\n      if (swiper.swipeDirection === 'next') {\n        if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n      }\n    } else {\n      // Short swipes\n      if (!params.shortSwipes) {\n        swiper.slideTo(swiper.activeIndex);\n        return;\n      }\n\n      const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n      if (!isNavButtonTarget) {\n        if (swiper.swipeDirection === 'next') {\n          swiper.slideTo(stopIndex + increment);\n        }\n\n        if (swiper.swipeDirection === 'prev') {\n          swiper.slideTo(stopIndex);\n        }\n      } else if (e.target === swiper.navigation.nextEl) {\n        swiper.slideTo(stopIndex + increment);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  }\n\n  function onResize() {\n    const swiper = this;\n    const {\n      params,\n      el\n    } = swiper;\n    if (el && el.offsetWidth === 0) return; // Breakpoints\n\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    } // Save locks\n\n\n    const {\n      allowSlideNext,\n      allowSlidePrev,\n      snapGrid\n    } = swiper; // Disable locks on resize\n\n    swiper.allowSlideNext = true;\n    swiper.allowSlidePrev = true;\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateSlidesClasses();\n\n    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n      swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n    } else {\n      swiper.slideTo(swiper.activeIndex, 0, false, true);\n    }\n\n    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n      swiper.autoplay.run();\n    } // Return locks after resize\n\n\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n\n    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n  }\n\n  function onClick(e) {\n    const swiper = this;\n    if (!swiper.enabled) return;\n\n    if (!swiper.allowClick) {\n      if (swiper.params.preventClicks) e.preventDefault();\n\n      if (swiper.params.preventClicksPropagation && swiper.animating) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n  }\n\n  function onScroll() {\n    const swiper = this;\n    const {\n      wrapperEl,\n      rtlTranslate,\n      enabled\n    } = swiper;\n    if (!enabled) return;\n    swiper.previousTranslate = swiper.translate;\n\n    if (swiper.isHorizontal()) {\n      swiper.translate = -wrapperEl.scrollLeft;\n    } else {\n      swiper.translate = -wrapperEl.scrollTop;\n    } // eslint-disable-next-line\n\n\n    if (swiper.translate === -0) swiper.translate = 0;\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n    if (translatesDiff === 0) {\n      newProgress = 0;\n    } else {\n      newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n    }\n\n    if (newProgress !== swiper.progress) {\n      swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n    }\n\n    swiper.emit('setTranslate', swiper.translate, false);\n  }\n\n  let dummyEventAttached = false;\n\n  function dummyEventListener() {}\n\n  const events = (swiper, method) => {\n    const document = getDocument();\n    const {\n      params,\n      touchEvents,\n      el,\n      wrapperEl,\n      device,\n      support\n    } = swiper;\n    const capture = !!params.nested;\n    const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n    const swiperMethod = method; // Touch Events\n\n    if (!support.touch) {\n      el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n      document[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n      document[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n    } else {\n      const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {\n        passive: true,\n        capture: false\n      } : false;\n      el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n      el[domMethod](touchEvents.move, swiper.onTouchMove, support.passiveListener ? {\n        passive: false,\n        capture\n      } : capture);\n      el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n      if (touchEvents.cancel) {\n        el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n      }\n    } // Prevent Links Clicks\n\n\n    if (params.preventClicks || params.preventClicksPropagation) {\n      el[domMethod]('click', swiper.onClick, true);\n    }\n\n    if (params.cssMode) {\n      wrapperEl[domMethod]('scroll', swiper.onScroll);\n    } // Resize handler\n\n\n    if (params.updateOnWindowResize) {\n      swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n    } else {\n      swiper[swiperMethod]('observerUpdate', onResize, true);\n    }\n  };\n\n  function attachEvents() {\n    const swiper = this;\n    const document = getDocument();\n    const {\n      params,\n      support\n    } = swiper;\n    swiper.onTouchStart = onTouchStart.bind(swiper);\n    swiper.onTouchMove = onTouchMove.bind(swiper);\n    swiper.onTouchEnd = onTouchEnd.bind(swiper);\n\n    if (params.cssMode) {\n      swiper.onScroll = onScroll.bind(swiper);\n    }\n\n    swiper.onClick = onClick.bind(swiper);\n\n    if (support.touch && !dummyEventAttached) {\n      document.addEventListener('touchstart', dummyEventListener);\n      dummyEventAttached = true;\n    }\n\n    events(swiper, 'on');\n  }\n\n  function detachEvents() {\n    const swiper = this;\n    events(swiper, 'off');\n  }\n\n  var events$1 = {\n    attachEvents,\n    detachEvents\n  };\n\n  const isGridEnabled = (swiper, params) => {\n    return swiper.grid && params.grid && params.grid.rows > 1;\n  };\n\n  function setBreakpoint() {\n    const swiper = this;\n    const {\n      activeIndex,\n      initialized,\n      loopedSlides = 0,\n      params,\n      $el\n    } = swiper;\n    const breakpoints = params.breakpoints;\n    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n    const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = isGridEnabled(swiper, params);\n    const isMultiRow = isGridEnabled(swiper, breakpointParams);\n    const wasEnabled = params.enabled;\n\n    if (wasMultiRow && !isMultiRow) {\n      $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      $el.addClass(`${params.containerModifierClass}grid`);\n\n      if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n        $el.addClass(`${params.containerModifierClass}grid-column`);\n      }\n\n      swiper.emitContainerClasses();\n    }\n\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n    if (directionChanged && initialized) {\n      swiper.changeDirection();\n    }\n\n    extend(swiper.params, breakpointParams);\n    const isEnabled = swiper.params.enabled;\n    Object.assign(swiper, {\n      allowTouchMove: swiper.params.allowTouchMove,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev\n    });\n\n    if (wasEnabled && !isEnabled) {\n      swiper.disable();\n    } else if (!wasEnabled && isEnabled) {\n      swiper.enable();\n    }\n\n    swiper.currentBreakpoint = breakpoint;\n    swiper.emit('_beforeBreakpoint', breakpointParams);\n\n    if (needsReLoop && initialized) {\n      swiper.loopDestroy();\n      swiper.loopCreate();\n      swiper.updateSlides();\n      swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n    }\n\n    swiper.emit('breakpoint', breakpointParams);\n  }\n\n  function getBreakpoint(breakpoints, base, containerEl) {\n    if (base === void 0) {\n      base = 'window';\n    }\n\n    if (!breakpoints || base === 'container' && !containerEl) return undefined;\n    let breakpoint = false;\n    const window = getWindow();\n    const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n    const points = Object.keys(breakpoints).map(point => {\n      if (typeof point === 'string' && point.indexOf('@') === 0) {\n        const minRatio = parseFloat(point.substr(1));\n        const value = currentHeight * minRatio;\n        return {\n          value,\n          point\n        };\n      }\n\n      return {\n        value: point,\n        point\n      };\n    });\n    points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n    for (let i = 0; i < points.length; i += 1) {\n      const {\n        point,\n        value\n      } = points[i];\n\n      if (base === 'window') {\n        if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n          breakpoint = point;\n        }\n      } else if (value <= containerEl.clientWidth) {\n        breakpoint = point;\n      }\n    }\n\n    return breakpoint || 'max';\n  }\n\n  var breakpoints = {\n    setBreakpoint,\n    getBreakpoint\n  };\n\n  function prepareClasses(entries, prefix) {\n    const resultClasses = [];\n    entries.forEach(item => {\n      if (typeof item === 'object') {\n        Object.keys(item).forEach(classNames => {\n          if (item[classNames]) {\n            resultClasses.push(prefix + classNames);\n          }\n        });\n      } else if (typeof item === 'string') {\n        resultClasses.push(prefix + item);\n      }\n    });\n    return resultClasses;\n  }\n\n  function addClasses() {\n    const swiper = this;\n    const {\n      classNames,\n      params,\n      rtl,\n      $el,\n      device,\n      support\n    } = swiper; // prettier-ignore\n\n    const suffixes = prepareClasses(['initialized', params.direction, {\n      'pointer-events': !support.touch\n    }, {\n      'free-mode': swiper.params.freeMode && params.freeMode.enabled\n    }, {\n      'autoheight': params.autoHeight\n    }, {\n      'rtl': rtl\n    }, {\n      'grid': params.grid && params.grid.rows > 1\n    }, {\n      'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n    }, {\n      'android': device.android\n    }, {\n      'ios': device.ios\n    }, {\n      'css-mode': params.cssMode\n    }, {\n      'centered': params.cssMode && params.centeredSlides\n    }], params.containerModifierClass);\n    classNames.push(...suffixes);\n    $el.addClass([...classNames].join(' '));\n    swiper.emitContainerClasses();\n  }\n\n  function removeClasses() {\n    const swiper = this;\n    const {\n      $el,\n      classNames\n    } = swiper;\n    $el.removeClass(classNames.join(' '));\n    swiper.emitContainerClasses();\n  }\n\n  var classes = {\n    addClasses,\n    removeClasses\n  };\n\n  function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n    const window = getWindow();\n    let image;\n\n    function onReady() {\n      if (callback) callback();\n    }\n\n    const isPicture = $(imageEl).parent('picture')[0];\n\n    if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n      if (src) {\n        image = new window.Image();\n        image.onload = onReady;\n        image.onerror = onReady;\n\n        if (sizes) {\n          image.sizes = sizes;\n        }\n\n        if (srcset) {\n          image.srcset = srcset;\n        }\n\n        if (src) {\n          image.src = src;\n        }\n      } else {\n        onReady();\n      }\n    } else {\n      // image already loaded...\n      onReady();\n    }\n  }\n\n  function preloadImages() {\n    const swiper = this;\n    swiper.imagesToLoad = swiper.$el.find('img');\n\n    function onReady() {\n      if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n      if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n\n      if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n        if (swiper.params.updateOnImagesReady) swiper.update();\n        swiper.emit('imagesReady');\n      }\n    }\n\n    for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n      const imageEl = swiper.imagesToLoad[i];\n      swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n    }\n  }\n\n  var images = {\n    loadImage,\n    preloadImages\n  };\n\n  function checkOverflow() {\n    const swiper = this;\n    const {\n      isLocked: wasLocked,\n      params\n    } = swiper;\n    const {\n      slidesOffsetBefore\n    } = params;\n\n    if (slidesOffsetBefore) {\n      const lastSlideIndex = swiper.slides.length - 1;\n      const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n      swiper.isLocked = swiper.size > lastSlideRightEdge;\n    } else {\n      swiper.isLocked = swiper.snapGrid.length === 1;\n    }\n\n    if (params.allowSlideNext === true) {\n      swiper.allowSlideNext = !swiper.isLocked;\n    }\n\n    if (params.allowSlidePrev === true) {\n      swiper.allowSlidePrev = !swiper.isLocked;\n    }\n\n    if (wasLocked && wasLocked !== swiper.isLocked) {\n      swiper.isEnd = false;\n    }\n\n    if (wasLocked !== swiper.isLocked) {\n      swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n    }\n  }\n\n  var checkOverflow$1 = {\n    checkOverflow\n  };\n  var defaults = {\n    init: true,\n    direction: 'horizontal',\n    touchEventsTarget: 'wrapper',\n    initialSlide: 0,\n    speed: 300,\n    cssMode: false,\n    updateOnWindowResize: true,\n    resizeObserver: true,\n    nested: false,\n    createElements: false,\n    enabled: true,\n    focusableElements: 'input, select, option, textarea, button, video, label',\n    // Overrides\n    width: null,\n    height: null,\n    //\n    preventInteractionOnTransition: false,\n    // ssr\n    userAgent: null,\n    url: null,\n    // To support iOS's swipe-to-go-back gesture (when being used in-app).\n    edgeSwipeDetection: false,\n    edgeSwipeThreshold: 20,\n    // Autoheight\n    autoHeight: false,\n    // Set wrapper width\n    setWrapperSize: false,\n    // Virtual Translate\n    virtualTranslate: false,\n    // Effects\n    effect: 'slide',\n    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n    // Breakpoints\n    breakpoints: undefined,\n    breakpointsBase: 'window',\n    // Slides grid\n    spaceBetween: 0,\n    slidesPerView: 1,\n    slidesPerGroup: 1,\n    slidesPerGroupSkip: 0,\n    slidesPerGroupAuto: false,\n    centeredSlides: false,\n    centeredSlidesBounds: false,\n    slidesOffsetBefore: 0,\n    // in px\n    slidesOffsetAfter: 0,\n    // in px\n    normalizeSlideIndex: true,\n    centerInsufficientSlides: false,\n    // Disable swiper and hide navigation when container not overflow\n    watchOverflow: true,\n    // Round length\n    roundLengths: false,\n    // Touches\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: true,\n    shortSwipes: true,\n    longSwipes: true,\n    longSwipesRatio: 0.5,\n    longSwipesMs: 300,\n    followFinger: true,\n    allowTouchMove: true,\n    threshold: 0,\n    touchMoveStopPropagation: false,\n    touchStartPreventDefault: true,\n    touchStartForcePreventDefault: false,\n    touchReleaseOnEdges: false,\n    // Unique Navigation Elements\n    uniqueNavElements: true,\n    // Resistance\n    resistance: true,\n    resistanceRatio: 0.85,\n    // Progress\n    watchSlidesProgress: false,\n    // Cursor\n    grabCursor: false,\n    // Clicks\n    preventClicks: true,\n    preventClicksPropagation: true,\n    slideToClickedSlide: false,\n    // Images\n    preloadImages: true,\n    updateOnImagesReady: true,\n    // loop\n    loop: false,\n    loopAdditionalSlides: 0,\n    loopedSlides: null,\n    loopFillGroupWithBlank: false,\n    loopPreventsSlide: true,\n    // rewind\n    rewind: false,\n    // Swiping/no swiping\n    allowSlidePrev: true,\n    allowSlideNext: true,\n    swipeHandler: null,\n    // '.swipe-handler',\n    noSwiping: true,\n    noSwipingClass: 'swiper-no-swiping',\n    noSwipingSelector: null,\n    // Passive Listeners\n    passiveListeners: true,\n    maxBackfaceHiddenSlides: 10,\n    // NS\n    containerModifierClass: 'swiper-',\n    // NEW\n    slideClass: 'swiper-slide',\n    slideBlankClass: 'swiper-slide-invisible-blank',\n    slideActiveClass: 'swiper-slide-active',\n    slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n    slideVisibleClass: 'swiper-slide-visible',\n    slideDuplicateClass: 'swiper-slide-duplicate',\n    slideNextClass: 'swiper-slide-next',\n    slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n    slidePrevClass: 'swiper-slide-prev',\n    slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n    wrapperClass: 'swiper-wrapper',\n    // Callbacks\n    runCallbacksOnInit: true,\n    // Internals\n    _emitClasses: false\n  };\n\n  function moduleExtendParams(params, allModulesParams) {\n    return function extendParams(obj) {\n      if (obj === void 0) {\n        obj = {};\n      }\n\n      const moduleParamName = Object.keys(obj)[0];\n      const moduleParams = obj[moduleParamName];\n\n      if (typeof moduleParams !== 'object' || moduleParams === null) {\n        extend(allModulesParams, obj);\n        return;\n      }\n\n      if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n        params[moduleParamName] = {\n          auto: true\n        };\n      }\n\n      if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n        extend(allModulesParams, obj);\n        return;\n      }\n\n      if (params[moduleParamName] === true) {\n        params[moduleParamName] = {\n          enabled: true\n        };\n      }\n\n      if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n        params[moduleParamName].enabled = true;\n      }\n\n      if (!params[moduleParamName]) params[moduleParamName] = {\n        enabled: false\n      };\n      extend(allModulesParams, obj);\n    };\n  }\n  /* eslint no-param-reassign: \"off\" */\n\n\n  const prototypes = {\n    eventsEmitter,\n    update,\n    translate,\n    transition,\n    slide,\n    loop,\n    grabCursor,\n    events: events$1,\n    breakpoints,\n    checkOverflow: checkOverflow$1,\n    classes,\n    images\n  };\n  const extendedDefaults = {};\n\n  class Swiper {\n    constructor() {\n      let el;\n      let params;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n        params = args[0];\n      } else {\n        [el, params] = args;\n      }\n\n      if (!params) params = {};\n      params = extend({}, params);\n      if (el && !params.el) params.el = el;\n\n      if (params.el && $(params.el).length > 1) {\n        const swipers = [];\n        $(params.el).each(containerEl => {\n          const newParams = extend({}, params, {\n            el: containerEl\n          });\n          swipers.push(new Swiper(newParams));\n        });\n        return swipers;\n      } // Swiper Instance\n\n\n      const swiper = this;\n      swiper.__swiper__ = true;\n      swiper.support = getSupport();\n      swiper.device = getDevice({\n        userAgent: params.userAgent\n      });\n      swiper.browser = getBrowser();\n      swiper.eventsListeners = {};\n      swiper.eventsAnyListeners = [];\n      swiper.modules = [...swiper.__modules__];\n\n      if (params.modules && Array.isArray(params.modules)) {\n        swiper.modules.push(...params.modules);\n      }\n\n      const allModulesParams = {};\n      swiper.modules.forEach(mod => {\n        mod({\n          swiper,\n          extendParams: moduleExtendParams(params, allModulesParams),\n          on: swiper.on.bind(swiper),\n          once: swiper.once.bind(swiper),\n          off: swiper.off.bind(swiper),\n          emit: swiper.emit.bind(swiper)\n        });\n      }); // Extend defaults with modules params\n\n      const swiperParams = extend({}, defaults, allModulesParams); // Extend defaults with passed params\n\n      swiper.params = extend({}, swiperParams, extendedDefaults, params);\n      swiper.originalParams = extend({}, swiper.params);\n      swiper.passedParams = extend({}, params); // add event listeners\n\n      if (swiper.params && swiper.params.on) {\n        Object.keys(swiper.params.on).forEach(eventName => {\n          swiper.on(eventName, swiper.params.on[eventName]);\n        });\n      }\n\n      if (swiper.params && swiper.params.onAny) {\n        swiper.onAny(swiper.params.onAny);\n      } // Save Dom lib\n\n\n      swiper.$ = $; // Extend Swiper\n\n      Object.assign(swiper, {\n        enabled: swiper.params.enabled,\n        el,\n        // Classes\n        classNames: [],\n        // Slides\n        slides: $(),\n        slidesGrid: [],\n        snapGrid: [],\n        slidesSizesGrid: [],\n\n        // isDirection\n        isHorizontal() {\n          return swiper.params.direction === 'horizontal';\n        },\n\n        isVertical() {\n          return swiper.params.direction === 'vertical';\n        },\n\n        // Indexes\n        activeIndex: 0,\n        realIndex: 0,\n        //\n        isBeginning: true,\n        isEnd: false,\n        // Props\n        translate: 0,\n        previousTranslate: 0,\n        progress: 0,\n        velocity: 0,\n        animating: false,\n        // Locks\n        allowSlideNext: swiper.params.allowSlideNext,\n        allowSlidePrev: swiper.params.allowSlidePrev,\n        // Touch Events\n        touchEvents: function touchEvents() {\n          const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n          const desktop = ['pointerdown', 'pointermove', 'pointerup'];\n          swiper.touchEventsTouch = {\n            start: touch[0],\n            move: touch[1],\n            end: touch[2],\n            cancel: touch[3]\n          };\n          swiper.touchEventsDesktop = {\n            start: desktop[0],\n            move: desktop[1],\n            end: desktop[2]\n          };\n          return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n        }(),\n        touchEventsData: {\n          isTouched: undefined,\n          isMoved: undefined,\n          allowTouchCallbacks: undefined,\n          touchStartTime: undefined,\n          isScrolling: undefined,\n          currentTranslate: undefined,\n          startTranslate: undefined,\n          allowThresholdMove: undefined,\n          // Form elements to match\n          focusableElements: swiper.params.focusableElements,\n          // Last click time\n          lastClickTime: now(),\n          clickTimeout: undefined,\n          // Velocities\n          velocities: [],\n          allowMomentumBounce: undefined,\n          isTouchEvent: undefined,\n          startMoving: undefined\n        },\n        // Clicks\n        allowClick: true,\n        // Touches\n        allowTouchMove: swiper.params.allowTouchMove,\n        touches: {\n          startX: 0,\n          startY: 0,\n          currentX: 0,\n          currentY: 0,\n          diff: 0\n        },\n        // Images\n        imagesToLoad: [],\n        imagesLoaded: 0\n      });\n      swiper.emit('_swiper'); // Init\n\n      if (swiper.params.init) {\n        swiper.init();\n      } // Return app instance\n\n\n      return swiper;\n    }\n\n    enable() {\n      const swiper = this;\n      if (swiper.enabled) return;\n      swiper.enabled = true;\n\n      if (swiper.params.grabCursor) {\n        swiper.setGrabCursor();\n      }\n\n      swiper.emit('enable');\n    }\n\n    disable() {\n      const swiper = this;\n      if (!swiper.enabled) return;\n      swiper.enabled = false;\n\n      if (swiper.params.grabCursor) {\n        swiper.unsetGrabCursor();\n      }\n\n      swiper.emit('disable');\n    }\n\n    setProgress(progress, speed) {\n      const swiper = this;\n      progress = Math.min(Math.max(progress, 0), 1);\n      const min = swiper.minTranslate();\n      const max = swiper.maxTranslate();\n      const current = (max - min) * progress + min;\n      swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    emitContainerClasses() {\n      const swiper = this;\n      if (!swiper.params._emitClasses || !swiper.el) return;\n      const cls = swiper.el.className.split(' ').filter(className => {\n        return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n      });\n      swiper.emit('_containerClasses', cls.join(' '));\n    }\n\n    getSlideClasses(slideEl) {\n      const swiper = this;\n      return slideEl.className.split(' ').filter(className => {\n        return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n      }).join(' ');\n    }\n\n    emitSlidesClasses() {\n      const swiper = this;\n      if (!swiper.params._emitClasses || !swiper.el) return;\n      const updates = [];\n      swiper.slides.each(slideEl => {\n        const classNames = swiper.getSlideClasses(slideEl);\n        updates.push({\n          slideEl,\n          classNames\n        });\n        swiper.emit('_slideClass', slideEl, classNames);\n      });\n      swiper.emit('_slideClasses', updates);\n    }\n\n    slidesPerViewDynamic(view, exact) {\n      if (view === void 0) {\n        view = 'current';\n      }\n\n      if (exact === void 0) {\n        exact = false;\n      }\n\n      const swiper = this;\n      const {\n        params,\n        slides,\n        slidesGrid,\n        slidesSizesGrid,\n        size: swiperSize,\n        activeIndex\n      } = swiper;\n      let spv = 1;\n\n      if (params.centeredSlides) {\n        let slideSize = slides[activeIndex].swiperSlideSize;\n        let breakLoop;\n\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          if (slides[i] && !breakLoop) {\n            slideSize += slides[i].swiperSlideSize;\n            spv += 1;\n            if (slideSize > swiperSize) breakLoop = true;\n          }\n        }\n\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          if (slides[i] && !breakLoop) {\n            slideSize += slides[i].swiperSlideSize;\n            spv += 1;\n            if (slideSize > swiperSize) breakLoop = true;\n          }\n        }\n      } else {\n        // eslint-disable-next-line\n        if (view === 'current') {\n          for (let i = activeIndex + 1; i < slides.length; i += 1) {\n            const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n\n            if (slideInView) {\n              spv += 1;\n            }\n          }\n        } else {\n          // previous\n          for (let i = activeIndex - 1; i >= 0; i -= 1) {\n            const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n\n            if (slideInView) {\n              spv += 1;\n            }\n          }\n        }\n      }\n\n      return spv;\n    }\n\n    update() {\n      const swiper = this;\n      if (!swiper || swiper.destroyed) return;\n      const {\n        snapGrid,\n        params\n      } = swiper; // Breakpoints\n\n      if (params.breakpoints) {\n        swiper.setBreakpoint();\n      }\n\n      swiper.updateSize();\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n\n      function setTranslate() {\n        const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n        const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n        swiper.setTranslate(newTranslate);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n      }\n\n      let translated;\n\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n        setTranslate();\n\n        if (swiper.params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n      } else {\n        if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n          translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n        } else {\n          translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n        }\n\n        if (!translated) {\n          setTranslate();\n        }\n      }\n\n      if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n        swiper.checkOverflow();\n      }\n\n      swiper.emit('update');\n    }\n\n    changeDirection(newDirection, needUpdate) {\n      if (needUpdate === void 0) {\n        needUpdate = true;\n      }\n\n      const swiper = this;\n      const currentDirection = swiper.params.direction;\n\n      if (!newDirection) {\n        // eslint-disable-next-line\n        newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n      }\n\n      if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n        return swiper;\n      }\n\n      swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n      swiper.emitContainerClasses();\n      swiper.params.direction = newDirection;\n      swiper.slides.each(slideEl => {\n        if (newDirection === 'vertical') {\n          slideEl.style.width = '';\n        } else {\n          slideEl.style.height = '';\n        }\n      });\n      swiper.emit('changeDirection');\n      if (needUpdate) swiper.update();\n      return swiper;\n    }\n\n    mount(el) {\n      const swiper = this;\n      if (swiper.mounted) return true; // Find el\n\n      const $el = $(el || swiper.params.el);\n      el = $el[0];\n\n      if (!el) {\n        return false;\n      }\n\n      el.swiper = swiper;\n\n      const getWrapperSelector = () => {\n        return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n      };\n\n      const getWrapper = () => {\n        if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n          const res = $(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items\n\n          res.children = options => $el.children(options);\n\n          return res;\n        }\n\n        return $el.children(getWrapperSelector());\n      }; // Find Wrapper\n\n\n      let $wrapperEl = getWrapper();\n\n      if ($wrapperEl.length === 0 && swiper.params.createElements) {\n        const document = getDocument();\n        const wrapper = document.createElement('div');\n        $wrapperEl = $(wrapper);\n        wrapper.className = swiper.params.wrapperClass;\n        $el.append(wrapper);\n        $el.children(`.${swiper.params.slideClass}`).each(slideEl => {\n          $wrapperEl.append(slideEl);\n        });\n      }\n\n      Object.assign(swiper, {\n        $el,\n        el,\n        $wrapperEl,\n        wrapperEl: $wrapperEl[0],\n        mounted: true,\n        // RTL\n        rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n        rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n        wrongRTL: $wrapperEl.css('display') === '-webkit-box'\n      });\n      return true;\n    }\n\n    init(el) {\n      const swiper = this;\n      if (swiper.initialized) return swiper;\n      const mounted = swiper.mount(el);\n      if (mounted === false) return swiper;\n      swiper.emit('beforeInit'); // Set breakpoint\n\n      if (swiper.params.breakpoints) {\n        swiper.setBreakpoint();\n      } // Add Classes\n\n\n      swiper.addClasses(); // Create loop\n\n      if (swiper.params.loop) {\n        swiper.loopCreate();\n      } // Update size\n\n\n      swiper.updateSize(); // Update slides\n\n      swiper.updateSlides();\n\n      if (swiper.params.watchOverflow) {\n        swiper.checkOverflow();\n      } // Set Grab Cursor\n\n\n      if (swiper.params.grabCursor && swiper.enabled) {\n        swiper.setGrabCursor();\n      }\n\n      if (swiper.params.preloadImages) {\n        swiper.preloadImages();\n      } // Slide To Initial Slide\n\n\n      if (swiper.params.loop) {\n        swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n      } else {\n        swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n      } // Attach events\n\n\n      swiper.attachEvents(); // Init Flag\n\n      swiper.initialized = true; // Emit\n\n      swiper.emit('init');\n      swiper.emit('afterInit');\n      return swiper;\n    }\n\n    destroy(deleteInstance, cleanStyles) {\n      if (deleteInstance === void 0) {\n        deleteInstance = true;\n      }\n\n      if (cleanStyles === void 0) {\n        cleanStyles = true;\n      }\n\n      const swiper = this;\n      const {\n        params,\n        $el,\n        $wrapperEl,\n        slides\n      } = swiper;\n\n      if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n        return null;\n      }\n\n      swiper.emit('beforeDestroy'); // Init Flag\n\n      swiper.initialized = false; // Detach events\n\n      swiper.detachEvents(); // Destroy loop\n\n      if (params.loop) {\n        swiper.loopDestroy();\n      } // Cleanup styles\n\n\n      if (cleanStyles) {\n        swiper.removeClasses();\n        $el.removeAttr('style');\n        $wrapperEl.removeAttr('style');\n\n        if (slides && slides.length) {\n          slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n        }\n      }\n\n      swiper.emit('destroy'); // Detach emitter events\n\n      Object.keys(swiper.eventsListeners).forEach(eventName => {\n        swiper.off(eventName);\n      });\n\n      if (deleteInstance !== false) {\n        swiper.$el[0].swiper = null;\n        deleteProps(swiper);\n      }\n\n      swiper.destroyed = true;\n      return null;\n    }\n\n    static extendDefaults(newDefaults) {\n      extend(extendedDefaults, newDefaults);\n    }\n\n    static get extendedDefaults() {\n      return extendedDefaults;\n    }\n\n    static get defaults() {\n      return defaults;\n    }\n\n    static installModule(mod) {\n      if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n      const modules = Swiper.prototype.__modules__;\n\n      if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n        modules.push(mod);\n      }\n    }\n\n    static use(module) {\n      if (Array.isArray(module)) {\n        module.forEach(m => Swiper.installModule(m));\n        return Swiper;\n      }\n\n      Swiper.installModule(module);\n      return Swiper;\n    }\n\n  }\n\n  Object.keys(prototypes).forEach(prototypeGroup => {\n    Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n      Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n    });\n  });\n  Swiper.use([Resize, Observer]);\n\n  function Virtual(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      virtual: {\n        enabled: false,\n        slides: [],\n        cache: true,\n        renderSlide: null,\n        renderExternal: null,\n        renderExternalUpdate: true,\n        addSlidesBefore: 0,\n        addSlidesAfter: 0\n      }\n    });\n    let cssModeTimeout;\n    swiper.virtual = {\n      cache: {},\n      from: undefined,\n      to: undefined,\n      slides: [],\n      offset: 0,\n      slidesGrid: []\n    };\n\n    function renderSlide(slide, index) {\n      const params = swiper.params.virtual;\n\n      if (params.cache && swiper.virtual.cache[index]) {\n        return swiper.virtual.cache[index];\n      }\n\n      const $slideEl = params.renderSlide ? $(params.renderSlide.call(swiper, slide, index)) : $(`<div class=\"${swiper.params.slideClass}\" data-swiper-slide-index=\"${index}\">${slide}</div>`);\n      if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);\n      if (params.cache) swiper.virtual.cache[index] = $slideEl;\n      return $slideEl;\n    }\n\n    function update(force) {\n      const {\n        slidesPerView,\n        slidesPerGroup,\n        centeredSlides\n      } = swiper.params;\n      const {\n        addSlidesBefore,\n        addSlidesAfter\n      } = swiper.params.virtual;\n      const {\n        from: previousFrom,\n        to: previousTo,\n        slides,\n        slidesGrid: previousSlidesGrid,\n        offset: previousOffset\n      } = swiper.virtual;\n\n      if (!swiper.params.cssMode) {\n        swiper.updateActiveIndex();\n      }\n\n      const activeIndex = swiper.activeIndex || 0;\n      let offsetProp;\n      if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n      let slidesAfter;\n      let slidesBefore;\n\n      if (centeredSlides) {\n        slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n        slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n      } else {\n        slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n        slidesBefore = slidesPerGroup + addSlidesBefore;\n      }\n\n      const from = Math.max((activeIndex || 0) - slidesBefore, 0);\n      const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n      const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n      Object.assign(swiper.virtual, {\n        from,\n        to,\n        offset,\n        slidesGrid: swiper.slidesGrid\n      });\n\n      function onRendered() {\n        swiper.updateSlides();\n        swiper.updateProgress();\n        swiper.updateSlidesClasses();\n\n        if (swiper.lazy && swiper.params.lazy.enabled) {\n          swiper.lazy.load();\n        }\n      }\n\n      if (previousFrom === from && previousTo === to && !force) {\n        if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n          swiper.slides.css(offsetProp, `${offset}px`);\n        }\n\n        swiper.updateProgress();\n        return;\n      }\n\n      if (swiper.params.virtual.renderExternal) {\n        swiper.params.virtual.renderExternal.call(swiper, {\n          offset,\n          from,\n          to,\n          slides: function getSlides() {\n            const slidesToRender = [];\n\n            for (let i = from; i <= to; i += 1) {\n              slidesToRender.push(slides[i]);\n            }\n\n            return slidesToRender;\n          }()\n        });\n\n        if (swiper.params.virtual.renderExternalUpdate) {\n          onRendered();\n        }\n\n        return;\n      }\n\n      const prependIndexes = [];\n      const appendIndexes = [];\n\n      if (force) {\n        swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();\n      } else {\n        for (let i = previousFrom; i <= previousTo; i += 1) {\n          if (i < from || i > to) {\n            swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${i}\"]`).remove();\n          }\n        }\n      }\n\n      for (let i = 0; i < slides.length; i += 1) {\n        if (i >= from && i <= to) {\n          if (typeof previousTo === 'undefined' || force) {\n            appendIndexes.push(i);\n          } else {\n            if (i > previousTo) appendIndexes.push(i);\n            if (i < previousFrom) prependIndexes.push(i);\n          }\n        }\n      }\n\n      appendIndexes.forEach(index => {\n        swiper.$wrapperEl.append(renderSlide(slides[index], index));\n      });\n      prependIndexes.sort((a, b) => b - a).forEach(index => {\n        swiper.$wrapperEl.prepend(renderSlide(slides[index], index));\n      });\n      swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);\n      onRendered();\n    }\n\n    function appendSlide(slides) {\n      if (typeof slides === 'object' && 'length' in slides) {\n        for (let i = 0; i < slides.length; i += 1) {\n          if (slides[i]) swiper.virtual.slides.push(slides[i]);\n        }\n      } else {\n        swiper.virtual.slides.push(slides);\n      }\n\n      update(true);\n    }\n\n    function prependSlide(slides) {\n      const activeIndex = swiper.activeIndex;\n      let newActiveIndex = activeIndex + 1;\n      let numberOfNewSlides = 1;\n\n      if (Array.isArray(slides)) {\n        for (let i = 0; i < slides.length; i += 1) {\n          if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n        }\n\n        newActiveIndex = activeIndex + slides.length;\n        numberOfNewSlides = slides.length;\n      } else {\n        swiper.virtual.slides.unshift(slides);\n      }\n\n      if (swiper.params.virtual.cache) {\n        const cache = swiper.virtual.cache;\n        const newCache = {};\n        Object.keys(cache).forEach(cachedIndex => {\n          const $cachedEl = cache[cachedIndex];\n          const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');\n\n          if (cachedElIndex) {\n            $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\n          }\n\n          newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n        });\n        swiper.virtual.cache = newCache;\n      }\n\n      update(true);\n      swiper.slideTo(newActiveIndex, 0);\n    }\n\n    function removeSlide(slidesIndexes) {\n      if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\n      let activeIndex = swiper.activeIndex;\n\n      if (Array.isArray(slidesIndexes)) {\n        for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n          swiper.virtual.slides.splice(slidesIndexes[i], 1);\n\n          if (swiper.params.virtual.cache) {\n            delete swiper.virtual.cache[slidesIndexes[i]];\n          }\n\n          if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n          activeIndex = Math.max(activeIndex, 0);\n        }\n      } else {\n        swiper.virtual.slides.splice(slidesIndexes, 1);\n\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes];\n        }\n\n        if (slidesIndexes < activeIndex) activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n\n      update(true);\n      swiper.slideTo(activeIndex, 0);\n    }\n\n    function removeAllSlides() {\n      swiper.virtual.slides = [];\n\n      if (swiper.params.virtual.cache) {\n        swiper.virtual.cache = {};\n      }\n\n      update(true);\n      swiper.slideTo(0, 0);\n    }\n\n    on('beforeInit', () => {\n      if (!swiper.params.virtual.enabled) return;\n      swiper.virtual.slides = swiper.params.virtual.slides;\n      swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n      swiper.params.watchSlidesProgress = true;\n      swiper.originalParams.watchSlidesProgress = true;\n\n      if (!swiper.params.initialSlide) {\n        update();\n      }\n    });\n    on('setTranslate', () => {\n      if (!swiper.params.virtual.enabled) return;\n\n      if (swiper.params.cssMode && !swiper._immediateVirtual) {\n        clearTimeout(cssModeTimeout);\n        cssModeTimeout = setTimeout(() => {\n          update();\n        }, 100);\n      } else {\n        update();\n      }\n    });\n    on('init update resize', () => {\n      if (!swiper.params.virtual.enabled) return;\n\n      if (swiper.params.cssMode) {\n        setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\n      }\n    });\n    Object.assign(swiper.virtual, {\n      appendSlide,\n      prependSlide,\n      removeSlide,\n      removeAllSlides,\n      update\n    });\n  }\n  /* eslint-disable consistent-return */\n\n\n  function Keyboard(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    const document = getDocument();\n    const window = getWindow();\n    swiper.keyboard = {\n      enabled: false\n    };\n    extendParams({\n      keyboard: {\n        enabled: false,\n        onlyInViewport: true,\n        pageUpDown: true\n      }\n    });\n\n    function handle(event) {\n      if (!swiper.enabled) return;\n      const {\n        rtlTranslate: rtl\n      } = swiper;\n      let e = event;\n      if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n      const kc = e.keyCode || e.charCode;\n      const pageUpDown = swiper.params.keyboard.pageUpDown;\n      const isPageUp = pageUpDown && kc === 33;\n      const isPageDown = pageUpDown && kc === 34;\n      const isArrowLeft = kc === 37;\n      const isArrowRight = kc === 39;\n      const isArrowUp = kc === 38;\n      const isArrowDown = kc === 40; // Directions locks\n\n      if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n        return false;\n      }\n\n      if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n        return false;\n      }\n\n      if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n        return undefined;\n      }\n\n      if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\n        return undefined;\n      }\n\n      if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n        let inView = false; // Check that swiper should be inside of visible area of window\n\n        if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n          return undefined;\n        }\n\n        const $el = swiper.$el;\n        const swiperWidth = $el[0].clientWidth;\n        const swiperHeight = $el[0].clientHeight;\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n        const swiperOffset = swiper.$el.offset();\n        if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n        const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n\n        for (let i = 0; i < swiperCoord.length; i += 1) {\n          const point = swiperCoord[i];\n\n          if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n            if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n            inView = true;\n          }\n        }\n\n        if (!inView) return undefined;\n      }\n\n      if (swiper.isHorizontal()) {\n        if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n          if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n        }\n\n        if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n        if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n      } else {\n        if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n          if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n        }\n\n        if (isPageDown || isArrowDown) swiper.slideNext();\n        if (isPageUp || isArrowUp) swiper.slidePrev();\n      }\n\n      emit('keyPress', kc);\n      return undefined;\n    }\n\n    function enable() {\n      if (swiper.keyboard.enabled) return;\n      $(document).on('keydown', handle);\n      swiper.keyboard.enabled = true;\n    }\n\n    function disable() {\n      if (!swiper.keyboard.enabled) return;\n      $(document).off('keydown', handle);\n      swiper.keyboard.enabled = false;\n    }\n\n    on('init', () => {\n      if (swiper.params.keyboard.enabled) {\n        enable();\n      }\n    });\n    on('destroy', () => {\n      if (swiper.keyboard.enabled) {\n        disable();\n      }\n    });\n    Object.assign(swiper.keyboard, {\n      enable,\n      disable\n    });\n  }\n  /* eslint-disable consistent-return */\n\n\n  function Mousewheel(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    const window = getWindow();\n    extendParams({\n      mousewheel: {\n        enabled: false,\n        releaseOnEdges: false,\n        invert: false,\n        forceToAxis: false,\n        sensitivity: 1,\n        eventsTarget: 'container',\n        thresholdDelta: null,\n        thresholdTime: null\n      }\n    });\n    swiper.mousewheel = {\n      enabled: false\n    };\n    let timeout;\n    let lastScrollTime = now();\n    let lastEventBeforeSnap;\n    const recentWheelEvents = [];\n\n    function normalize(e) {\n      // Reasonable defaults\n      const PIXEL_STEP = 10;\n      const LINE_HEIGHT = 40;\n      const PAGE_HEIGHT = 800;\n      let sX = 0;\n      let sY = 0; // spinX, spinY\n\n      let pX = 0;\n      let pY = 0; // pixelX, pixelY\n      // Legacy\n\n      if ('detail' in e) {\n        sY = e.detail;\n      }\n\n      if ('wheelDelta' in e) {\n        sY = -e.wheelDelta / 120;\n      }\n\n      if ('wheelDeltaY' in e) {\n        sY = -e.wheelDeltaY / 120;\n      }\n\n      if ('wheelDeltaX' in e) {\n        sX = -e.wheelDeltaX / 120;\n      } // side scrolling on FF with DOMMouseScroll\n\n\n      if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n        sX = sY;\n        sY = 0;\n      }\n\n      pX = sX * PIXEL_STEP;\n      pY = sY * PIXEL_STEP;\n\n      if ('deltaY' in e) {\n        pY = e.deltaY;\n      }\n\n      if ('deltaX' in e) {\n        pX = e.deltaX;\n      }\n\n      if (e.shiftKey && !pX) {\n        // if user scrolls with shift he wants horizontal scroll\n        pX = pY;\n        pY = 0;\n      }\n\n      if ((pX || pY) && e.deltaMode) {\n        if (e.deltaMode === 1) {\n          // delta in LINE units\n          pX *= LINE_HEIGHT;\n          pY *= LINE_HEIGHT;\n        } else {\n          // delta in PAGE units\n          pX *= PAGE_HEIGHT;\n          pY *= PAGE_HEIGHT;\n        }\n      } // Fall-back if spin cannot be determined\n\n\n      if (pX && !sX) {\n        sX = pX < 1 ? -1 : 1;\n      }\n\n      if (pY && !sY) {\n        sY = pY < 1 ? -1 : 1;\n      }\n\n      return {\n        spinX: sX,\n        spinY: sY,\n        pixelX: pX,\n        pixelY: pY\n      };\n    }\n\n    function handleMouseEnter() {\n      if (!swiper.enabled) return;\n      swiper.mouseEntered = true;\n    }\n\n    function handleMouseLeave() {\n      if (!swiper.enabled) return;\n      swiper.mouseEntered = false;\n    }\n\n    function animateSlider(newEvent) {\n      if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n        // Prevent if delta of wheel scroll delta is below configured threshold\n        return false;\n      }\n\n      if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n        // Prevent if time between scrolls is below configured threshold\n        return false;\n      } // If the movement is NOT big enough and\n      // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n      //   Don't go any further (avoid insignificant scroll movement).\n\n\n      if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n        // Return false as a default\n        return true;\n      } // If user is scrolling towards the end:\n      //   If the slider hasn't hit the latest slide or\n      //   if the slider is a loop and\n      //   if the slider isn't moving right now:\n      //     Go to next slide and\n      //     emit a scroll event.\n      // Else (the user is scrolling towards the beginning) and\n      // if the slider hasn't hit the first slide or\n      // if the slider is a loop and\n      // if the slider isn't moving right now:\n      //   Go to prev slide and\n      //   emit a scroll event.\n\n\n      if (newEvent.direction < 0) {\n        if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n          swiper.slideNext();\n          emit('scroll', newEvent.raw);\n        }\n      } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n        swiper.slidePrev();\n        emit('scroll', newEvent.raw);\n      } // If you got here is because an animation has been triggered so store the current time\n\n\n      lastScrollTime = new window.Date().getTime(); // Return false as a default\n\n      return false;\n    }\n\n    function releaseScroll(newEvent) {\n      const params = swiper.params.mousewheel;\n\n      if (newEvent.direction < 0) {\n        if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n          // Return true to animate scroll on edges\n          return true;\n        }\n      } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n\n      return false;\n    }\n\n    function handle(event) {\n      let e = event;\n      let disableParentSwiper = true;\n      if (!swiper.enabled) return;\n      const params = swiper.params.mousewheel;\n\n      if (swiper.params.cssMode) {\n        e.preventDefault();\n      }\n\n      let target = swiper.$el;\n\n      if (swiper.params.mousewheel.eventsTarget !== 'container') {\n        target = $(swiper.params.mousewheel.eventsTarget);\n      }\n\n      if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n      if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n      let delta = 0;\n      const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n      const data = normalize(e);\n\n      if (params.forceToAxis) {\n        if (swiper.isHorizontal()) {\n          if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n        } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n      } else {\n        delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n      }\n\n      if (delta === 0) return true;\n      if (params.invert) delta = -delta; // Get the scroll positions\n\n      let positions = swiper.getTranslate() + delta * params.sensitivity;\n      if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n      if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\n      //     the disableParentSwiper will be true.\n      // When loop is false:\n      //     if the scroll positions is not on edge,\n      //     then the disableParentSwiper will be true.\n      //     if the scroll on edge positions,\n      //     then the disableParentSwiper will be false.\n\n      disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n      if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n\n      if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n        // Register the new event in a variable which stores the relevant data\n        const newEvent = {\n          time: now(),\n          delta: Math.abs(delta),\n          direction: Math.sign(delta),\n          raw: event\n        }; // Keep the most recent events\n\n        if (recentWheelEvents.length >= 2) {\n          recentWheelEvents.shift(); // only store the last N events\n        }\n\n        const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n        recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\n        //   If direction has changed or\n        //   if the scroll is quicker than the previous one:\n        //     Animate the slider.\n        // Else (this is the first time the wheel is moved):\n        //     Animate the slider.\n\n        if (prevEvent) {\n          if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n            animateSlider(newEvent);\n          }\n        } else {\n          animateSlider(newEvent);\n        } // If it's time to release the scroll:\n        //   Return now so you don't hit the preventDefault.\n\n\n        if (releaseScroll(newEvent)) {\n          return true;\n        }\n      } else {\n        // Freemode or scrollContainer:\n        // If we recently snapped after a momentum scroll, then ignore wheel events\n        // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n        // or if it's a new scroll (larger delta or inverse sign as last event before\n        // an end-of-momentum snap).\n        const newEvent = {\n          time: now(),\n          delta: Math.abs(delta),\n          direction: Math.sign(delta)\n        };\n        const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n\n        if (!ignoreWheelEvents) {\n          lastEventBeforeSnap = undefined;\n\n          if (swiper.params.loop) {\n            swiper.loopFix();\n          }\n\n          let position = swiper.getTranslate() + delta * params.sensitivity;\n          const wasBeginning = swiper.isBeginning;\n          const wasEnd = swiper.isEnd;\n          if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n          if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n          swiper.setTransition(0);\n          swiper.setTranslate(position);\n          swiper.updateProgress();\n          swiper.updateActiveIndex();\n          swiper.updateSlidesClasses();\n\n          if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n            swiper.updateSlidesClasses();\n          }\n\n          if (swiper.params.freeMode.sticky) {\n            // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n            // the end of a momentum scroll by storing recent (N=15?) wheel events.\n            // 1. do all N events have decreasing or same (absolute value) delta?\n            // 2. did all N events arrive in the last M (M=500?) msecs?\n            // 3. does the earliest event have an (absolute value) delta that's\n            //    at least P (P=1?) larger than the most recent event's delta?\n            // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n            // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n            // Snap immediately and ignore remaining wheel events in this scroll.\n            // See comment above for \"remaining wheel events in this scroll\" determination.\n            // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n            clearTimeout(timeout);\n            timeout = undefined;\n\n            if (recentWheelEvents.length >= 15) {\n              recentWheelEvents.shift(); // only store the last N events\n            }\n\n            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n            const firstEvent = recentWheelEvents[0];\n            recentWheelEvents.push(newEvent);\n\n            if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n              // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n              recentWheelEvents.splice(0);\n            } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n              // We're at the end of the deceleration of a momentum scroll, so there's no need\n              // to wait for more events. Snap ASAP on the next tick.\n              // Also, because there's some remaining momentum we'll bias the snap in the\n              // direction of the ongoing scroll because it's better UX for the scroll to snap\n              // in the same direction as the scroll instead of reversing to snap.  Therefore,\n              // if it's already scrolled more than 20% in the current direction, keep going.\n              const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              timeout = nextTick(() => {\n                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n              }, 0); // no delay; move on next tick\n            }\n\n            if (!timeout) {\n              // if we get here, then we haven't detected the end of a momentum scroll, so\n              // we'll consider a scroll \"complete\" when there haven't been any wheel events\n              // for 500ms.\n              timeout = nextTick(() => {\n                const snapToThreshold = 0.5;\n                lastEventBeforeSnap = newEvent;\n                recentWheelEvents.splice(0);\n                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n              }, 500);\n            }\n          } // Emit event\n\n\n          if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\n\n          if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\n\n          if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n        }\n      }\n\n      if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      return false;\n    }\n\n    function events(method) {\n      let target = swiper.$el;\n\n      if (swiper.params.mousewheel.eventsTarget !== 'container') {\n        target = $(swiper.params.mousewheel.eventsTarget);\n      }\n\n      target[method]('mouseenter', handleMouseEnter);\n      target[method]('mouseleave', handleMouseLeave);\n      target[method]('wheel', handle);\n    }\n\n    function enable() {\n      if (swiper.params.cssMode) {\n        swiper.wrapperEl.removeEventListener('wheel', handle);\n        return true;\n      }\n\n      if (swiper.mousewheel.enabled) return false;\n      events('on');\n      swiper.mousewheel.enabled = true;\n      return true;\n    }\n\n    function disable() {\n      if (swiper.params.cssMode) {\n        swiper.wrapperEl.addEventListener(event, handle);\n        return true;\n      }\n\n      if (!swiper.mousewheel.enabled) return false;\n      events('off');\n      swiper.mousewheel.enabled = false;\n      return true;\n    }\n\n    on('init', () => {\n      if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n        disable();\n      }\n\n      if (swiper.params.mousewheel.enabled) enable();\n    });\n    on('destroy', () => {\n      if (swiper.params.cssMode) {\n        enable();\n      }\n\n      if (swiper.mousewheel.enabled) disable();\n    });\n    Object.assign(swiper.mousewheel, {\n      enable,\n      disable\n    });\n  }\n\n  function createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n    const document = getDocument();\n\n    if (swiper.params.createElements) {\n      Object.keys(checkProps).forEach(key => {\n        if (!params[key] && params.auto === true) {\n          let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n\n          if (!element) {\n            element = document.createElement('div');\n            element.className = checkProps[key];\n            swiper.$el.append(element);\n          }\n\n          params[key] = element;\n          originalParams[key] = element;\n        }\n      });\n    }\n\n    return params;\n  }\n\n  function Navigation(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    extendParams({\n      navigation: {\n        nextEl: null,\n        prevEl: null,\n        hideOnClick: false,\n        disabledClass: 'swiper-button-disabled',\n        hiddenClass: 'swiper-button-hidden',\n        lockClass: 'swiper-button-lock'\n      }\n    });\n    swiper.navigation = {\n      nextEl: null,\n      $nextEl: null,\n      prevEl: null,\n      $prevEl: null\n    };\n\n    function getEl(el) {\n      let $el;\n\n      if (el) {\n        $el = $(el);\n\n        if (swiper.params.uniqueNavElements && typeof el === 'string' && $el.length > 1 && swiper.$el.find(el).length === 1) {\n          $el = swiper.$el.find(el);\n        }\n      }\n\n      return $el;\n    }\n\n    function toggleEl($el, disabled) {\n      const params = swiper.params.navigation;\n\n      if ($el && $el.length > 0) {\n        $el[disabled ? 'addClass' : 'removeClass'](params.disabledClass);\n        if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;\n\n        if (swiper.params.watchOverflow && swiper.enabled) {\n          $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n        }\n      }\n    }\n\n    function update() {\n      // Update Navigation Buttons\n      if (swiper.params.loop) return;\n      const {\n        $nextEl,\n        $prevEl\n      } = swiper.navigation;\n      toggleEl($prevEl, swiper.isBeginning && !swiper.params.rewind);\n      toggleEl($nextEl, swiper.isEnd && !swiper.params.rewind);\n    }\n\n    function onPrevClick(e) {\n      e.preventDefault();\n      if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n      swiper.slidePrev();\n    }\n\n    function onNextClick(e) {\n      e.preventDefault();\n      if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n      swiper.slideNext();\n    }\n\n    function init() {\n      const params = swiper.params.navigation;\n      swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n        nextEl: 'swiper-button-next',\n        prevEl: 'swiper-button-prev'\n      });\n      if (!(params.nextEl || params.prevEl)) return;\n      const $nextEl = getEl(params.nextEl);\n      const $prevEl = getEl(params.prevEl);\n\n      if ($nextEl && $nextEl.length > 0) {\n        $nextEl.on('click', onNextClick);\n      }\n\n      if ($prevEl && $prevEl.length > 0) {\n        $prevEl.on('click', onPrevClick);\n      }\n\n      Object.assign(swiper.navigation, {\n        $nextEl,\n        nextEl: $nextEl && $nextEl[0],\n        $prevEl,\n        prevEl: $prevEl && $prevEl[0]\n      });\n\n      if (!swiper.enabled) {\n        if ($nextEl) $nextEl.addClass(params.lockClass);\n        if ($prevEl) $prevEl.addClass(params.lockClass);\n      }\n    }\n\n    function destroy() {\n      const {\n        $nextEl,\n        $prevEl\n      } = swiper.navigation;\n\n      if ($nextEl && $nextEl.length) {\n        $nextEl.off('click', onNextClick);\n        $nextEl.removeClass(swiper.params.navigation.disabledClass);\n      }\n\n      if ($prevEl && $prevEl.length) {\n        $prevEl.off('click', onPrevClick);\n        $prevEl.removeClass(swiper.params.navigation.disabledClass);\n      }\n    }\n\n    on('init', () => {\n      init();\n      update();\n    });\n    on('toEdge fromEdge lock unlock', () => {\n      update();\n    });\n    on('destroy', () => {\n      destroy();\n    });\n    on('enable disable', () => {\n      const {\n        $nextEl,\n        $prevEl\n      } = swiper.navigation;\n\n      if ($nextEl) {\n        $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n      }\n\n      if ($prevEl) {\n        $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n      }\n    });\n    on('click', (_s, e) => {\n      const {\n        $nextEl,\n        $prevEl\n      } = swiper.navigation;\n      const targetEl = e.target;\n\n      if (swiper.params.navigation.hideOnClick && !$(targetEl).is($prevEl) && !$(targetEl).is($nextEl)) {\n        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n        let isHidden;\n\n        if ($nextEl) {\n          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n        } else if ($prevEl) {\n          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n        }\n\n        if (isHidden === true) {\n          emit('navigationShow');\n        } else {\n          emit('navigationHide');\n        }\n\n        if ($nextEl) {\n          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n        }\n\n        if ($prevEl) {\n          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n        }\n      }\n    });\n    Object.assign(swiper.navigation, {\n      update,\n      init,\n      destroy\n    });\n  }\n\n  function classesToSelector(classes) {\n    if (classes === void 0) {\n      classes = '';\n    }\n\n    return `.${classes.trim().replace(/([\\.:!\\/])/g, '\\\\$1') // eslint-disable-line\n    .replace(/ /g, '.')}`;\n  }\n\n  function Pagination(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    const pfx = 'swiper-pagination';\n    extendParams({\n      pagination: {\n        el: null,\n        bulletElement: 'span',\n        clickable: false,\n        hideOnClick: false,\n        renderBullet: null,\n        renderProgressbar: null,\n        renderFraction: null,\n        renderCustom: null,\n        progressbarOpposite: false,\n        type: 'bullets',\n        // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n        dynamicBullets: false,\n        dynamicMainBullets: 1,\n        formatFractionCurrent: number => number,\n        formatFractionTotal: number => number,\n        bulletClass: `${pfx}-bullet`,\n        bulletActiveClass: `${pfx}-bullet-active`,\n        modifierClass: `${pfx}-`,\n        currentClass: `${pfx}-current`,\n        totalClass: `${pfx}-total`,\n        hiddenClass: `${pfx}-hidden`,\n        progressbarFillClass: `${pfx}-progressbar-fill`,\n        progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n        clickableClass: `${pfx}-clickable`,\n        lockClass: `${pfx}-lock`,\n        horizontalClass: `${pfx}-horizontal`,\n        verticalClass: `${pfx}-vertical`\n      }\n    });\n    swiper.pagination = {\n      el: null,\n      $el: null,\n      bullets: []\n    };\n    let bulletSize;\n    let dynamicBulletIndex = 0;\n\n    function isPaginationDisabled() {\n      return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;\n    }\n\n    function setSideBullets($bulletEl, position) {\n      const {\n        bulletActiveClass\n      } = swiper.params.pagination;\n      $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);\n    }\n\n    function update() {\n      // Render || Update Pagination bullets/items\n      const rtl = swiper.rtl;\n      const params = swiper.params.pagination;\n      if (isPaginationDisabled()) return;\n      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n      const $el = swiper.pagination.$el; // Current/Total\n\n      let current;\n      const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n      if (swiper.params.loop) {\n        current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n\n        if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n          current -= slidesLength - swiper.loopedSlides * 2;\n        }\n\n        if (current > total - 1) current -= total;\n        if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;\n      } else if (typeof swiper.snapIndex !== 'undefined') {\n        current = swiper.snapIndex;\n      } else {\n        current = swiper.activeIndex || 0;\n      } // Types\n\n\n      if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n        const bullets = swiper.pagination.bullets;\n        let firstIndex;\n        let lastIndex;\n        let midIndex;\n\n        if (params.dynamicBullets) {\n          bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);\n          $el.css(swiper.isHorizontal() ? 'width' : 'height', `${bulletSize * (params.dynamicMainBullets + 4)}px`);\n\n          if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {\n            dynamicBulletIndex += current - (swiper.previousIndex - swiper.loopedSlides || 0);\n\n            if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n              dynamicBulletIndex = params.dynamicMainBullets - 1;\n            } else if (dynamicBulletIndex < 0) {\n              dynamicBulletIndex = 0;\n            }\n          }\n\n          firstIndex = Math.max(current - dynamicBulletIndex, 0);\n          lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n          midIndex = (lastIndex + firstIndex) / 2;\n        }\n\n        bullets.removeClass(['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`).join(' '));\n\n        if ($el.length > 1) {\n          bullets.each(bullet => {\n            const $bullet = $(bullet);\n            const bulletIndex = $bullet.index();\n\n            if (bulletIndex === current) {\n              $bullet.addClass(params.bulletActiveClass);\n            }\n\n            if (params.dynamicBullets) {\n              if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n                $bullet.addClass(`${params.bulletActiveClass}-main`);\n              }\n\n              if (bulletIndex === firstIndex) {\n                setSideBullets($bullet, 'prev');\n              }\n\n              if (bulletIndex === lastIndex) {\n                setSideBullets($bullet, 'next');\n              }\n            }\n          });\n        } else {\n          const $bullet = bullets.eq(current);\n          const bulletIndex = $bullet.index();\n          $bullet.addClass(params.bulletActiveClass);\n\n          if (params.dynamicBullets) {\n            const $firstDisplayedBullet = bullets.eq(firstIndex);\n            const $lastDisplayedBullet = bullets.eq(lastIndex);\n\n            for (let i = firstIndex; i <= lastIndex; i += 1) {\n              bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n            }\n\n            if (swiper.params.loop) {\n              if (bulletIndex >= bullets.length) {\n                for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                  bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n                }\n\n                bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n              } else {\n                setSideBullets($firstDisplayedBullet, 'prev');\n                setSideBullets($lastDisplayedBullet, 'next');\n              }\n            } else {\n              setSideBullets($firstDisplayedBullet, 'prev');\n              setSideBullets($lastDisplayedBullet, 'next');\n            }\n          }\n        }\n\n        if (params.dynamicBullets) {\n          const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n          const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n          const offsetProp = rtl ? 'right' : 'left';\n          bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);\n        }\n      }\n\n      if (params.type === 'fraction') {\n        $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));\n        $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));\n      }\n\n      if (params.type === 'progressbar') {\n        let progressbarDirection;\n\n        if (params.progressbarOpposite) {\n          progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n        } else {\n          progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n        }\n\n        const scale = (current + 1) / total;\n        let scaleX = 1;\n        let scaleY = 1;\n\n        if (progressbarDirection === 'horizontal') {\n          scaleX = scale;\n        } else {\n          scaleY = scale;\n        }\n\n        $el.find(classesToSelector(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n      }\n\n      if (params.type === 'custom' && params.renderCustom) {\n        $el.html(params.renderCustom(swiper, current + 1, total));\n        emit('paginationRender', $el[0]);\n      } else {\n        emit('paginationUpdate', $el[0]);\n      }\n\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n      }\n    }\n\n    function render() {\n      // Render Container\n      const params = swiper.params.pagination;\n      if (isPaginationDisabled()) return;\n      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n      const $el = swiper.pagination.$el;\n      let paginationHTML = '';\n\n      if (params.type === 'bullets') {\n        let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n        if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {\n          numberOfBullets = slidesLength;\n        }\n\n        for (let i = 0; i < numberOfBullets; i += 1) {\n          if (params.renderBullet) {\n            paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n          } else {\n            paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n          }\n        }\n\n        $el.html(paginationHTML);\n        swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));\n      }\n\n      if (params.type === 'fraction') {\n        if (params.renderFraction) {\n          paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n        } else {\n          paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\n        }\n\n        $el.html(paginationHTML);\n      }\n\n      if (params.type === 'progressbar') {\n        if (params.renderProgressbar) {\n          paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n        } else {\n          paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n        }\n\n        $el.html(paginationHTML);\n      }\n\n      if (params.type !== 'custom') {\n        emit('paginationRender', swiper.pagination.$el[0]);\n      }\n    }\n\n    function init() {\n      swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n        el: 'swiper-pagination'\n      });\n      const params = swiper.params.pagination;\n      if (!params.el) return;\n      let $el = $(params.el);\n      if ($el.length === 0) return;\n\n      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {\n        $el = swiper.$el.find(params.el); // check if it belongs to another nested Swiper\n\n        if ($el.length > 1) {\n          $el = $el.filter(el => {\n            if ($(el).parents('.swiper')[0] !== swiper.el) return false;\n            return true;\n          });\n        }\n      }\n\n      if (params.type === 'bullets' && params.clickable) {\n        $el.addClass(params.clickableClass);\n      }\n\n      $el.addClass(params.modifierClass + params.type);\n      $el.addClass(params.modifierClass + swiper.params.direction);\n\n      if (params.type === 'bullets' && params.dynamicBullets) {\n        $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n        dynamicBulletIndex = 0;\n\n        if (params.dynamicMainBullets < 1) {\n          params.dynamicMainBullets = 1;\n        }\n      }\n\n      if (params.type === 'progressbar' && params.progressbarOpposite) {\n        $el.addClass(params.progressbarOppositeClass);\n      }\n\n      if (params.clickable) {\n        $el.on('click', classesToSelector(params.bulletClass), function onClick(e) {\n          e.preventDefault();\n          let index = $(this).index() * swiper.params.slidesPerGroup;\n          if (swiper.params.loop) index += swiper.loopedSlides;\n          swiper.slideTo(index);\n        });\n      }\n\n      Object.assign(swiper.pagination, {\n        $el,\n        el: $el[0]\n      });\n\n      if (!swiper.enabled) {\n        $el.addClass(params.lockClass);\n      }\n    }\n\n    function destroy() {\n      const params = swiper.params.pagination;\n      if (isPaginationDisabled()) return;\n      const $el = swiper.pagination.$el;\n      $el.removeClass(params.hiddenClass);\n      $el.removeClass(params.modifierClass + params.type);\n      $el.removeClass(params.modifierClass + swiper.params.direction);\n      if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass) swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n\n      if (params.clickable) {\n        $el.off('click', classesToSelector(params.bulletClass));\n      }\n    }\n\n    on('init', () => {\n      init();\n      render();\n      update();\n    });\n    on('activeIndexChange', () => {\n      if (swiper.params.loop) {\n        update();\n      } else if (typeof swiper.snapIndex === 'undefined') {\n        update();\n      }\n    });\n    on('snapIndexChange', () => {\n      if (!swiper.params.loop) {\n        update();\n      }\n    });\n    on('slidesLengthChange', () => {\n      if (swiper.params.loop) {\n        render();\n        update();\n      }\n    });\n    on('snapGridLengthChange', () => {\n      if (!swiper.params.loop) {\n        render();\n        update();\n      }\n    });\n    on('destroy', () => {\n      destroy();\n    });\n    on('enable disable', () => {\n      const {\n        $el\n      } = swiper.pagination;\n\n      if ($el) {\n        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);\n      }\n    });\n    on('lock unlock', () => {\n      update();\n    });\n    on('click', (_s, e) => {\n      const targetEl = e.target;\n      const {\n        $el\n      } = swiper.pagination;\n\n      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el.length > 0 && !$(targetEl).hasClass(swiper.params.pagination.bulletClass)) {\n        if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n        const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);\n\n        if (isHidden === true) {\n          emit('paginationShow');\n        } else {\n          emit('paginationHide');\n        }\n\n        $el.toggleClass(swiper.params.pagination.hiddenClass);\n      }\n    });\n    Object.assign(swiper.pagination, {\n      render,\n      update,\n      init,\n      destroy\n    });\n  }\n\n  function Scrollbar(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    const document = getDocument();\n    let isTouched = false;\n    let timeout = null;\n    let dragTimeout = null;\n    let dragStartPos;\n    let dragSize;\n    let trackSize;\n    let divider;\n    extendParams({\n      scrollbar: {\n        el: null,\n        dragSize: 'auto',\n        hide: false,\n        draggable: false,\n        snapOnRelease: true,\n        lockClass: 'swiper-scrollbar-lock',\n        dragClass: 'swiper-scrollbar-drag'\n      }\n    });\n    swiper.scrollbar = {\n      el: null,\n      dragEl: null,\n      $el: null,\n      $dragEl: null\n    };\n\n    function setTranslate() {\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n      const {\n        scrollbar,\n        rtlTranslate: rtl,\n        progress\n      } = swiper;\n      const {\n        $dragEl,\n        $el\n      } = scrollbar;\n      const params = swiper.params.scrollbar;\n      let newSize = dragSize;\n      let newPos = (trackSize - dragSize) * progress;\n\n      if (rtl) {\n        newPos = -newPos;\n\n        if (newPos > 0) {\n          newSize = dragSize - newPos;\n          newPos = 0;\n        } else if (-newPos + dragSize > trackSize) {\n          newSize = trackSize + newPos;\n        }\n      } else if (newPos < 0) {\n        newSize = dragSize + newPos;\n        newPos = 0;\n      } else if (newPos + dragSize > trackSize) {\n        newSize = trackSize - newPos;\n      }\n\n      if (swiper.isHorizontal()) {\n        $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n        $dragEl[0].style.width = `${newSize}px`;\n      } else {\n        $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n        $dragEl[0].style.height = `${newSize}px`;\n      }\n\n      if (params.hide) {\n        clearTimeout(timeout);\n        $el[0].style.opacity = 1;\n        timeout = setTimeout(() => {\n          $el[0].style.opacity = 0;\n          $el.transition(400);\n        }, 1000);\n      }\n    }\n\n    function setTransition(duration) {\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n      swiper.scrollbar.$dragEl.transition(duration);\n    }\n\n    function updateSize() {\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n      const {\n        scrollbar\n      } = swiper;\n      const {\n        $dragEl,\n        $el\n      } = scrollbar;\n      $dragEl[0].style.width = '';\n      $dragEl[0].style.height = '';\n      trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n      divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n\n      if (swiper.params.scrollbar.dragSize === 'auto') {\n        dragSize = trackSize * divider;\n      } else {\n        dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n      }\n\n      if (swiper.isHorizontal()) {\n        $dragEl[0].style.width = `${dragSize}px`;\n      } else {\n        $dragEl[0].style.height = `${dragSize}px`;\n      }\n\n      if (divider >= 1) {\n        $el[0].style.display = 'none';\n      } else {\n        $el[0].style.display = '';\n      }\n\n      if (swiper.params.scrollbar.hide) {\n        $el[0].style.opacity = 0;\n      }\n\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);\n      }\n    }\n\n    function getPointerPosition(e) {\n      if (swiper.isHorizontal()) {\n        return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;\n      }\n\n      return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;\n    }\n\n    function setDragPosition(e) {\n      const {\n        scrollbar,\n        rtlTranslate: rtl\n      } = swiper;\n      const {\n        $el\n      } = scrollbar;\n      let positionRatio;\n      positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n      positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n\n      if (rtl) {\n        positionRatio = 1 - positionRatio;\n      }\n\n      const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n      swiper.updateProgress(position);\n      swiper.setTranslate(position);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    function onDragStart(e) {\n      const params = swiper.params.scrollbar;\n      const {\n        scrollbar,\n        $wrapperEl\n      } = swiper;\n      const {\n        $el,\n        $dragEl\n      } = scrollbar;\n      isTouched = true;\n      dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n      e.preventDefault();\n      e.stopPropagation();\n      $wrapperEl.transition(100);\n      $dragEl.transition(100);\n      setDragPosition(e);\n      clearTimeout(dragTimeout);\n      $el.transition(0);\n\n      if (params.hide) {\n        $el.css('opacity', 1);\n      }\n\n      if (swiper.params.cssMode) {\n        swiper.$wrapperEl.css('scroll-snap-type', 'none');\n      }\n\n      emit('scrollbarDragStart', e);\n    }\n\n    function onDragMove(e) {\n      const {\n        scrollbar,\n        $wrapperEl\n      } = swiper;\n      const {\n        $el,\n        $dragEl\n      } = scrollbar;\n      if (!isTouched) return;\n      if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      setDragPosition(e);\n      $wrapperEl.transition(0);\n      $el.transition(0);\n      $dragEl.transition(0);\n      emit('scrollbarDragMove', e);\n    }\n\n    function onDragEnd(e) {\n      const params = swiper.params.scrollbar;\n      const {\n        scrollbar,\n        $wrapperEl\n      } = swiper;\n      const {\n        $el\n      } = scrollbar;\n      if (!isTouched) return;\n      isTouched = false;\n\n      if (swiper.params.cssMode) {\n        swiper.$wrapperEl.css('scroll-snap-type', '');\n        $wrapperEl.transition('');\n      }\n\n      if (params.hide) {\n        clearTimeout(dragTimeout);\n        dragTimeout = nextTick(() => {\n          $el.css('opacity', 0);\n          $el.transition(400);\n        }, 1000);\n      }\n\n      emit('scrollbarDragEnd', e);\n\n      if (params.snapOnRelease) {\n        swiper.slideToClosest();\n      }\n    }\n\n    function events(method) {\n      const {\n        scrollbar,\n        touchEventsTouch,\n        touchEventsDesktop,\n        params,\n        support\n      } = swiper;\n      const $el = scrollbar.$el;\n      const target = $el[0];\n      const activeListener = support.passiveListener && params.passiveListeners ? {\n        passive: false,\n        capture: false\n      } : false;\n      const passiveListener = support.passiveListener && params.passiveListeners ? {\n        passive: true,\n        capture: false\n      } : false;\n      if (!target) return;\n      const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n\n      if (!support.touch) {\n        target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);\n        document[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);\n        document[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);\n      } else {\n        target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);\n        target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);\n        target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);\n      }\n    }\n\n    function enableDraggable() {\n      if (!swiper.params.scrollbar.el) return;\n      events('on');\n    }\n\n    function disableDraggable() {\n      if (!swiper.params.scrollbar.el) return;\n      events('off');\n    }\n\n    function init() {\n      const {\n        scrollbar,\n        $el: $swiperEl\n      } = swiper;\n      swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n        el: 'swiper-scrollbar'\n      });\n      const params = swiper.params.scrollbar;\n      if (!params.el) return;\n      let $el = $(params.el);\n\n      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n        $el = $swiperEl.find(params.el);\n      }\n\n      let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n\n      if ($dragEl.length === 0) {\n        $dragEl = $(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n        $el.append($dragEl);\n      }\n\n      Object.assign(scrollbar, {\n        $el,\n        el: $el[0],\n        $dragEl,\n        dragEl: $dragEl[0]\n      });\n\n      if (params.draggable) {\n        enableDraggable();\n      }\n\n      if ($el) {\n        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n      }\n    }\n\n    function destroy() {\n      disableDraggable();\n    }\n\n    on('init', () => {\n      init();\n      updateSize();\n      setTranslate();\n    });\n    on('update resize observerUpdate lock unlock', () => {\n      updateSize();\n    });\n    on('setTranslate', () => {\n      setTranslate();\n    });\n    on('setTransition', (_s, duration) => {\n      setTransition(duration);\n    });\n    on('enable disable', () => {\n      const {\n        $el\n      } = swiper.scrollbar;\n\n      if ($el) {\n        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n      }\n    });\n    on('destroy', () => {\n      destroy();\n    });\n    Object.assign(swiper.scrollbar, {\n      updateSize,\n      setTranslate,\n      init,\n      destroy\n    });\n  }\n\n  function Parallax(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      parallax: {\n        enabled: false\n      }\n    });\n\n    const setTransform = (el, progress) => {\n      const {\n        rtl\n      } = swiper;\n      const $el = $(el);\n      const rtlFactor = rtl ? -1 : 1;\n      const p = $el.attr('data-swiper-parallax') || '0';\n      let x = $el.attr('data-swiper-parallax-x');\n      let y = $el.attr('data-swiper-parallax-y');\n      const scale = $el.attr('data-swiper-parallax-scale');\n      const opacity = $el.attr('data-swiper-parallax-opacity');\n\n      if (x || y) {\n        x = x || '0';\n        y = y || '0';\n      } else if (swiper.isHorizontal()) {\n        x = p;\n        y = '0';\n      } else {\n        y = p;\n        x = '0';\n      }\n\n      if (x.indexOf('%') >= 0) {\n        x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n      } else {\n        x = `${x * progress * rtlFactor}px`;\n      }\n\n      if (y.indexOf('%') >= 0) {\n        y = `${parseInt(y, 10) * progress}%`;\n      } else {\n        y = `${y * progress}px`;\n      }\n\n      if (typeof opacity !== 'undefined' && opacity !== null) {\n        const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n        $el[0].style.opacity = currentOpacity;\n      }\n\n      if (typeof scale === 'undefined' || scale === null) {\n        $el.transform(`translate3d(${x}, ${y}, 0px)`);\n      } else {\n        const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n        $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);\n      }\n    };\n\n    const setTranslate = () => {\n      const {\n        $el,\n        slides,\n        progress,\n        snapGrid\n      } = swiper;\n      $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n        setTransform(el, progress);\n      });\n      slides.each((slideEl, slideIndex) => {\n        let slideProgress = slideEl.progress;\n\n        if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\n          slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n        }\n\n        slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n        $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n          setTransform(el, slideProgress);\n        });\n      });\n    };\n\n    const setTransition = function (duration) {\n      if (duration === void 0) {\n        duration = swiper.params.speed;\n      }\n\n      const {\n        $el\n      } = swiper;\n      $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(parallaxEl => {\n        const $parallaxEl = $(parallaxEl);\n        let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;\n        if (duration === 0) parallaxDuration = 0;\n        $parallaxEl.transition(parallaxDuration);\n      });\n    };\n\n    on('beforeInit', () => {\n      if (!swiper.params.parallax.enabled) return;\n      swiper.params.watchSlidesProgress = true;\n      swiper.originalParams.watchSlidesProgress = true;\n    });\n    on('init', () => {\n      if (!swiper.params.parallax.enabled) return;\n      setTranslate();\n    });\n    on('setTranslate', () => {\n      if (!swiper.params.parallax.enabled) return;\n      setTranslate();\n    });\n    on('setTransition', (_swiper, duration) => {\n      if (!swiper.params.parallax.enabled) return;\n      setTransition(duration);\n    });\n  }\n\n  function Zoom(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    const window = getWindow();\n    extendParams({\n      zoom: {\n        enabled: false,\n        maxRatio: 3,\n        minRatio: 1,\n        toggle: true,\n        containerClass: 'swiper-zoom-container',\n        zoomedSlideClass: 'swiper-slide-zoomed'\n      }\n    });\n    swiper.zoom = {\n      enabled: false\n    };\n    let currentScale = 1;\n    let isScaling = false;\n    let gesturesEnabled;\n    let fakeGestureTouched;\n    let fakeGestureMoved;\n    const gesture = {\n      $slideEl: undefined,\n      slideWidth: undefined,\n      slideHeight: undefined,\n      $imageEl: undefined,\n      $imageWrapEl: undefined,\n      maxRatio: 3\n    };\n    const image = {\n      isTouched: undefined,\n      isMoved: undefined,\n      currentX: undefined,\n      currentY: undefined,\n      minX: undefined,\n      minY: undefined,\n      maxX: undefined,\n      maxY: undefined,\n      width: undefined,\n      height: undefined,\n      startX: undefined,\n      startY: undefined,\n      touchesStart: {},\n      touchesCurrent: {}\n    };\n    const velocity = {\n      x: undefined,\n      y: undefined,\n      prevPositionX: undefined,\n      prevPositionY: undefined,\n      prevTime: undefined\n    };\n    let scale = 1;\n    Object.defineProperty(swiper.zoom, 'scale', {\n      get() {\n        return scale;\n      },\n\n      set(value) {\n        if (scale !== value) {\n          const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : undefined;\n          const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : undefined;\n          emit('zoomChange', value, imageEl, slideEl);\n        }\n\n        scale = value;\n      }\n\n    });\n\n    function getDistanceBetweenTouches(e) {\n      if (e.targetTouches.length < 2) return 1;\n      const x1 = e.targetTouches[0].pageX;\n      const y1 = e.targetTouches[0].pageY;\n      const x2 = e.targetTouches[1].pageX;\n      const y2 = e.targetTouches[1].pageY;\n      const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n      return distance;\n    } // Events\n\n\n    function onGestureStart(e) {\n      const support = swiper.support;\n      const params = swiper.params.zoom;\n      fakeGestureTouched = false;\n      fakeGestureMoved = false;\n\n      if (!support.gestures) {\n        if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {\n          return;\n        }\n\n        fakeGestureTouched = true;\n        gesture.scaleStart = getDistanceBetweenTouches(e);\n      }\n\n      if (!gesture.$slideEl || !gesture.$slideEl.length) {\n        gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n        if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n        gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n        gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n        if (gesture.$imageWrapEl.length === 0) {\n          gesture.$imageEl = undefined;\n          return;\n        }\n      }\n\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transition(0);\n      }\n\n      isScaling = true;\n    }\n\n    function onGestureChange(e) {\n      const support = swiper.support;\n      const params = swiper.params.zoom;\n      const zoom = swiper.zoom;\n\n      if (!support.gestures) {\n        if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {\n          return;\n        }\n\n        fakeGestureMoved = true;\n        gesture.scaleMove = getDistanceBetweenTouches(e);\n      }\n\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n        if (e.type === 'gesturechange') onGestureStart(e);\n        return;\n      }\n\n      if (support.gestures) {\n        zoom.scale = e.scale * currentScale;\n      } else {\n        zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n      }\n\n      if (zoom.scale > gesture.maxRatio) {\n        zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n      }\n\n      if (zoom.scale < params.minRatio) {\n        zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n      }\n\n      gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    }\n\n    function onGestureEnd(e) {\n      const device = swiper.device;\n      const support = swiper.support;\n      const params = swiper.params.zoom;\n      const zoom = swiper.zoom;\n\n      if (!support.gestures) {\n        if (!fakeGestureTouched || !fakeGestureMoved) {\n          return;\n        }\n\n        if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {\n          return;\n        }\n\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n      }\n\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n      zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n      gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n      currentScale = zoom.scale;\n      isScaling = false;\n      if (zoom.scale === 1) gesture.$slideEl = undefined;\n    }\n\n    function onTouchStart(e) {\n      const device = swiper.device;\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n      if (image.isTouched) return;\n      if (device.android && e.cancelable) e.preventDefault();\n      image.isTouched = true;\n      image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    }\n\n    function onTouchMove(e) {\n      const zoom = swiper.zoom;\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n      swiper.allowClick = false;\n      if (!image.isTouched || !gesture.$slideEl) return;\n\n      if (!image.isMoved) {\n        image.width = gesture.$imageEl[0].offsetWidth;\n        image.height = gesture.$imageEl[0].offsetHeight;\n        image.startX = getTranslate(gesture.$imageWrapEl[0], 'x') || 0;\n        image.startY = getTranslate(gesture.$imageWrapEl[0], 'y') || 0;\n        gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n        gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n        gesture.$imageWrapEl.transition(0);\n      } // Define if we need image drag\n\n\n      const scaledWidth = image.width * zoom.scale;\n      const scaledHeight = image.height * zoom.scale;\n      if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n      image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n      image.maxX = -image.minX;\n      image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n      image.maxY = -image.minY;\n      image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (!image.isMoved && !isScaling) {\n        if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n          image.isTouched = false;\n          return;\n        }\n\n        if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n          image.isTouched = false;\n          return;\n        }\n      }\n\n      if (e.cancelable) {\n        e.preventDefault();\n      }\n\n      e.stopPropagation();\n      image.isMoved = true;\n      image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n      image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n\n      if (image.currentX < image.minX) {\n        image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n      }\n\n      if (image.currentX > image.maxX) {\n        image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n      }\n\n      if (image.currentY < image.minY) {\n        image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n      }\n\n      if (image.currentY > image.maxY) {\n        image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n      } // Velocity\n\n\n      if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n      if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n      if (!velocity.prevTime) velocity.prevTime = Date.now();\n      velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n      velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n      if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n      if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n      velocity.prevPositionX = image.touchesCurrent.x;\n      velocity.prevPositionY = image.touchesCurrent.y;\n      velocity.prevTime = Date.now();\n      gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n    }\n\n    function onTouchEnd() {\n      const zoom = swiper.zoom;\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n\n      if (!image.isTouched || !image.isMoved) {\n        image.isTouched = false;\n        image.isMoved = false;\n        return;\n      }\n\n      image.isTouched = false;\n      image.isMoved = false;\n      let momentumDurationX = 300;\n      let momentumDurationY = 300;\n      const momentumDistanceX = velocity.x * momentumDurationX;\n      const newPositionX = image.currentX + momentumDistanceX;\n      const momentumDistanceY = velocity.y * momentumDurationY;\n      const newPositionY = image.currentY + momentumDistanceY; // Fix duration\n\n      if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n      if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n      const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n      image.currentX = newPositionX;\n      image.currentY = newPositionY; // Define if we need image drag\n\n      const scaledWidth = image.width * zoom.scale;\n      const scaledHeight = image.height * zoom.scale;\n      image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n      image.maxX = -image.minX;\n      image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n      image.maxY = -image.minY;\n      image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n      image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n      gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n    }\n\n    function onTransitionEnd() {\n      const zoom = swiper.zoom;\n\n      if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n        if (gesture.$imageEl) {\n          gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');\n        }\n\n        if (gesture.$imageWrapEl) {\n          gesture.$imageWrapEl.transform('translate3d(0,0,0)');\n        }\n\n        zoom.scale = 1;\n        currentScale = 1;\n        gesture.$slideEl = undefined;\n        gesture.$imageEl = undefined;\n        gesture.$imageWrapEl = undefined;\n      }\n    }\n\n    function zoomIn(e) {\n      const zoom = swiper.zoom;\n      const params = swiper.params.zoom;\n\n      if (!gesture.$slideEl) {\n        if (e && e.target) {\n          gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n        }\n\n        if (!gesture.$slideEl) {\n          if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n            gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n          } else {\n            gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n          }\n        }\n\n        gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n        gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      }\n\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n      if (swiper.params.cssMode) {\n        swiper.wrapperEl.style.overflow = 'hidden';\n        swiper.wrapperEl.style.touchAction = 'none';\n      }\n\n      gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n      let touchX;\n      let touchY;\n      let offsetX;\n      let offsetY;\n      let diffX;\n      let diffY;\n      let translateX;\n      let translateY;\n      let imageWidth;\n      let imageHeight;\n      let scaledWidth;\n      let scaledHeight;\n      let translateMinX;\n      let translateMinY;\n      let translateMaxX;\n      let translateMaxY;\n      let slideWidth;\n      let slideHeight;\n\n      if (typeof image.touchesStart.x === 'undefined' && e) {\n        touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n        touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n      } else {\n        touchX = image.touchesStart.x;\n        touchY = image.touchesStart.y;\n      }\n\n      zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n      currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n      if (e) {\n        slideWidth = gesture.$slideEl[0].offsetWidth;\n        slideHeight = gesture.$slideEl[0].offsetHeight;\n        offsetX = gesture.$slideEl.offset().left + window.scrollX;\n        offsetY = gesture.$slideEl.offset().top + window.scrollY;\n        diffX = offsetX + slideWidth / 2 - touchX;\n        diffY = offsetY + slideHeight / 2 - touchY;\n        imageWidth = gesture.$imageEl[0].offsetWidth;\n        imageHeight = gesture.$imageEl[0].offsetHeight;\n        scaledWidth = imageWidth * zoom.scale;\n        scaledHeight = imageHeight * zoom.scale;\n        translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n        translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n        translateMaxX = -translateMinX;\n        translateMaxY = -translateMinY;\n        translateX = diffX * zoom.scale;\n        translateY = diffY * zoom.scale;\n\n        if (translateX < translateMinX) {\n          translateX = translateMinX;\n        }\n\n        if (translateX > translateMaxX) {\n          translateX = translateMaxX;\n        }\n\n        if (translateY < translateMinY) {\n          translateY = translateMinY;\n        }\n\n        if (translateY > translateMaxY) {\n          translateY = translateMaxY;\n        }\n      } else {\n        translateX = 0;\n        translateY = 0;\n      }\n\n      gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n      gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    }\n\n    function zoomOut() {\n      const zoom = swiper.zoom;\n      const params = swiper.params.zoom;\n\n      if (!gesture.$slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n        } else {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        }\n\n        gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n        gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      }\n\n      if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n      if (swiper.params.cssMode) {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.style.touchAction = '';\n      }\n\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');\n      gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');\n      gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n      gesture.$slideEl = undefined;\n    } // Toggle Zoom\n\n\n    function zoomToggle(e) {\n      const zoom = swiper.zoom;\n\n      if (zoom.scale && zoom.scale !== 1) {\n        // Zoom Out\n        zoomOut();\n      } else {\n        // Zoom In\n        zoomIn(e);\n      }\n    }\n\n    function getListeners() {\n      const support = swiper.support;\n      const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {\n        passive: true,\n        capture: false\n      } : false;\n      const activeListenerWithCapture = support.passiveListener ? {\n        passive: false,\n        capture: true\n      } : true;\n      return {\n        passiveListener,\n        activeListenerWithCapture\n      };\n    }\n\n    function getSlideSelector() {\n      return `.${swiper.params.slideClass}`;\n    }\n\n    function toggleGestures(method) {\n      const {\n        passiveListener\n      } = getListeners();\n      const slideSelector = getSlideSelector();\n      swiper.$wrapperEl[method]('gesturestart', slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl[method]('gesturechange', slideSelector, onGestureChange, passiveListener);\n      swiper.$wrapperEl[method]('gestureend', slideSelector, onGestureEnd, passiveListener);\n    }\n\n    function enableGestures() {\n      if (gesturesEnabled) return;\n      gesturesEnabled = true;\n      toggleGestures('on');\n    }\n\n    function disableGestures() {\n      if (!gesturesEnabled) return;\n      gesturesEnabled = false;\n      toggleGestures('off');\n    } // Attach/Detach Events\n\n\n    function enable() {\n      const zoom = swiper.zoom;\n      if (zoom.enabled) return;\n      zoom.enabled = true;\n      const support = swiper.support;\n      const {\n        passiveListener,\n        activeListenerWithCapture\n      } = getListeners();\n      const slideSelector = getSlideSelector(); // Scale image\n\n      if (support.gestures) {\n        swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);\n        swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);\n      } else if (swiper.touchEvents.start === 'touchstart') {\n        swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n        swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n        swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n        if (swiper.touchEvents.cancel) {\n          swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n        }\n      } // Move image\n\n\n      swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n    }\n\n    function disable() {\n      const zoom = swiper.zoom;\n      if (!zoom.enabled) return;\n      const support = swiper.support;\n      zoom.enabled = false;\n      const {\n        passiveListener,\n        activeListenerWithCapture\n      } = getListeners();\n      const slideSelector = getSlideSelector(); // Scale image\n\n      if (support.gestures) {\n        swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);\n        swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);\n      } else if (swiper.touchEvents.start === 'touchstart') {\n        swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n        swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n        swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n        if (swiper.touchEvents.cancel) {\n          swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n        }\n      } // Move image\n\n\n      swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n    }\n\n    on('init', () => {\n      if (swiper.params.zoom.enabled) {\n        enable();\n      }\n    });\n    on('destroy', () => {\n      disable();\n    });\n    on('touchStart', (_s, e) => {\n      if (!swiper.zoom.enabled) return;\n      onTouchStart(e);\n    });\n    on('touchEnd', (_s, e) => {\n      if (!swiper.zoom.enabled) return;\n      onTouchEnd();\n    });\n    on('doubleTap', (_s, e) => {\n      if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n        zoomToggle(e);\n      }\n    });\n    on('transitionEnd', () => {\n      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n        onTransitionEnd();\n      }\n    });\n    on('slideChange', () => {\n      if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n        onTransitionEnd();\n      }\n    });\n    Object.assign(swiper.zoom, {\n      enable,\n      disable,\n      in: zoomIn,\n      out: zoomOut,\n      toggle: zoomToggle\n    });\n  }\n\n  function Lazy(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    extendParams({\n      lazy: {\n        checkInView: false,\n        enabled: false,\n        loadPrevNext: false,\n        loadPrevNextAmount: 1,\n        loadOnTransitionStart: false,\n        scrollingElement: '',\n        elementClass: 'swiper-lazy',\n        loadingClass: 'swiper-lazy-loading',\n        loadedClass: 'swiper-lazy-loaded',\n        preloaderClass: 'swiper-lazy-preloader'\n      }\n    });\n    swiper.lazy = {};\n    let scrollHandlerAttached = false;\n    let initialImageLoaded = false;\n\n    function loadInSlide(index, loadInDuplicate) {\n      if (loadInDuplicate === void 0) {\n        loadInDuplicate = true;\n      }\n\n      const params = swiper.params.lazy;\n      if (typeof index === 'undefined') return;\n      if (swiper.slides.length === 0) return;\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${index}\"]`) : swiper.slides.eq(index);\n      const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);\n\n      if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n        $images.push($slideEl[0]);\n      }\n\n      if ($images.length === 0) return;\n      $images.each(imageEl => {\n        const $imageEl = $(imageEl);\n        $imageEl.addClass(params.loadingClass);\n        const background = $imageEl.attr('data-background');\n        const src = $imageEl.attr('data-src');\n        const srcset = $imageEl.attr('data-srcset');\n        const sizes = $imageEl.attr('data-sizes');\n        const $pictureEl = $imageEl.parent('picture');\n        swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {\n          if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;\n\n          if (background) {\n            $imageEl.css('background-image', `url(\"${background}\")`);\n            $imageEl.removeAttr('data-background');\n          } else {\n            if (srcset) {\n              $imageEl.attr('srcset', srcset);\n              $imageEl.removeAttr('data-srcset');\n            }\n\n            if (sizes) {\n              $imageEl.attr('sizes', sizes);\n              $imageEl.removeAttr('data-sizes');\n            }\n\n            if ($pictureEl.length) {\n              $pictureEl.children('source').each(sourceEl => {\n                const $source = $(sourceEl);\n\n                if ($source.attr('data-srcset')) {\n                  $source.attr('srcset', $source.attr('data-srcset'));\n                  $source.removeAttr('data-srcset');\n                }\n              });\n            }\n\n            if (src) {\n              $imageEl.attr('src', src);\n              $imageEl.removeAttr('data-src');\n            }\n          }\n\n          $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n          $slideEl.find(`.${params.preloaderClass}`).remove();\n\n          if (swiper.params.loop && loadInDuplicate) {\n            const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');\n\n            if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n              const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index=\"${slideOriginalIndex}\"]:not(.${swiper.params.slideDuplicateClass})`);\n              loadInSlide(originalSlide.index(), false);\n            } else {\n              const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index=\"${slideOriginalIndex}\"]`);\n              loadInSlide(duplicatedSlide.index(), false);\n            }\n          }\n\n          emit('lazyImageReady', $slideEl[0], $imageEl[0]);\n\n          if (swiper.params.autoHeight) {\n            swiper.updateAutoHeight();\n          }\n        });\n        emit('lazyImageLoad', $slideEl[0], $imageEl[0]);\n      });\n    }\n\n    function load() {\n      const {\n        $wrapperEl,\n        params: swiperParams,\n        slides,\n        activeIndex\n      } = swiper;\n      const isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n      const params = swiperParams.lazy;\n      let slidesPerView = swiperParams.slidesPerView;\n\n      if (slidesPerView === 'auto') {\n        slidesPerView = 0;\n      }\n\n      function slideExist(index) {\n        if (isVirtual) {\n          if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index=\"${index}\"]`).length) {\n            return true;\n          }\n        } else if (slides[index]) return true;\n\n        return false;\n      }\n\n      function slideIndex(slideEl) {\n        if (isVirtual) {\n          return $(slideEl).attr('data-swiper-slide-index');\n        }\n\n        return $(slideEl).index();\n      }\n\n      if (!initialImageLoaded) initialImageLoaded = true;\n\n      if (swiper.params.watchSlidesProgress) {\n        $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each(slideEl => {\n          const index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();\n          loadInSlide(index);\n        });\n      } else if (slidesPerView > 1) {\n        for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        }\n      } else {\n        loadInSlide(activeIndex);\n      }\n\n      if (params.loadPrevNext) {\n        if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n          const amount = params.loadPrevNextAmount;\n          const spv = slidesPerView;\n          const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n          const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides\n\n          for (let i = activeIndex + slidesPerView; i < maxIndex; i += 1) {\n            if (slideExist(i)) loadInSlide(i);\n          } // Prev Slides\n\n\n          for (let i = minIndex; i < activeIndex; i += 1) {\n            if (slideExist(i)) loadInSlide(i);\n          }\n        } else {\n          const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);\n          if (nextSlide.length > 0) loadInSlide(slideIndex(nextSlide));\n          const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);\n          if (prevSlide.length > 0) loadInSlide(slideIndex(prevSlide));\n        }\n      }\n    }\n\n    function checkInViewOnLoad() {\n      const window = getWindow();\n      if (!swiper || swiper.destroyed) return;\n      const $scrollElement = swiper.params.lazy.scrollingElement ? $(swiper.params.lazy.scrollingElement) : $(window);\n      const isWindow = $scrollElement[0] === window;\n      const scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;\n      const scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;\n      const swiperOffset = swiper.$el.offset();\n      const {\n        rtlTranslate: rtl\n      } = swiper;\n      let inView = false;\n      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n\n        if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {\n          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n          inView = true;\n        }\n      }\n\n      const passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {\n        passive: true,\n        capture: false\n      } : false;\n\n      if (inView) {\n        load();\n        $scrollElement.off('scroll', checkInViewOnLoad, passiveListener);\n      } else if (!scrollHandlerAttached) {\n        scrollHandlerAttached = true;\n        $scrollElement.on('scroll', checkInViewOnLoad, passiveListener);\n      }\n    }\n\n    on('beforeInit', () => {\n      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n        swiper.params.preloadImages = false;\n      }\n    });\n    on('init', () => {\n      if (swiper.params.lazy.enabled) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    });\n    on('scroll', () => {\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {\n        load();\n      }\n    });\n    on('scrollbarDragMove resize _freeModeNoMomentumRelease', () => {\n      if (swiper.params.lazy.enabled) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    });\n    on('transitionStart', () => {\n      if (swiper.params.lazy.enabled) {\n        if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {\n          if (swiper.params.lazy.checkInView) {\n            checkInViewOnLoad();\n          } else {\n            load();\n          }\n        }\n      }\n    });\n    on('transitionEnd', () => {\n      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    });\n    on('slideChange', () => {\n      const {\n        lazy,\n        cssMode,\n        watchSlidesProgress,\n        touchReleaseOnEdges,\n        resistanceRatio\n      } = swiper.params;\n\n      if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {\n        load();\n      }\n    });\n    Object.assign(swiper.lazy, {\n      load,\n      loadInSlide\n    });\n  }\n  /* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\n\n\n  function Controller(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      controller: {\n        control: undefined,\n        inverse: false,\n        by: 'slide' // or 'container'\n\n      }\n    });\n    swiper.controller = {\n      control: undefined\n    };\n\n    function LinearSpline(x, y) {\n      const binarySearch = function search() {\n        let maxIndex;\n        let minIndex;\n        let guess;\n        return (array, val) => {\n          minIndex = -1;\n          maxIndex = array.length;\n\n          while (maxIndex - minIndex > 1) {\n            guess = maxIndex + minIndex >> 1;\n\n            if (array[guess] <= val) {\n              minIndex = guess;\n            } else {\n              maxIndex = guess;\n            }\n          }\n\n          return maxIndex;\n        };\n      }();\n\n      this.x = x;\n      this.y = y;\n      this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:\n      // (x1,y1) is the known point before given value,\n      // (x3,y3) is the known point after given value.\n\n      let i1;\n      let i3;\n\n      this.interpolate = function interpolate(x2) {\n        if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n\n        i3 = binarySearch(this.x, x2);\n        i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:\n        // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n\n        return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n      };\n\n      return this;\n    } // xxx: for now i will just save one spline function to to\n\n\n    function getInterpolateFunction(c) {\n      if (!swiper.controller.spline) {\n        swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n      }\n    }\n\n    function setTranslate(_t, byController) {\n      const controlled = swiper.controller.control;\n      let multiplier;\n      let controlledTranslate;\n      const Swiper = swiper.constructor;\n\n      function setControlledTranslate(c) {\n        // this will create an Interpolate function based on the snapGrids\n        // x is the Grid of the scrolled scroller and y will be the controlled scroller\n        // it makes sense to create this only once and recall it for the interpolation\n        // the function does a lot of value caching for performance\n        const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n\n        if (swiper.params.controller.by === 'slide') {\n          getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n          // but it did not work out\n\n          controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n        }\n\n        if (!controlledTranslate || swiper.params.controller.by === 'container') {\n          multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n          controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n        }\n\n        if (swiper.params.controller.inverse) {\n          controlledTranslate = c.maxTranslate() - controlledTranslate;\n        }\n\n        c.updateProgress(controlledTranslate);\n        c.setTranslate(controlledTranslate, swiper);\n        c.updateActiveIndex();\n        c.updateSlidesClasses();\n      }\n\n      if (Array.isArray(controlled)) {\n        for (let i = 0; i < controlled.length; i += 1) {\n          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n            setControlledTranslate(controlled[i]);\n          }\n        }\n      } else if (controlled instanceof Swiper && byController !== controlled) {\n        setControlledTranslate(controlled);\n      }\n    }\n\n    function setTransition(duration, byController) {\n      const Swiper = swiper.constructor;\n      const controlled = swiper.controller.control;\n      let i;\n\n      function setControlledTransition(c) {\n        c.setTransition(duration, swiper);\n\n        if (duration !== 0) {\n          c.transitionStart();\n\n          if (c.params.autoHeight) {\n            nextTick(() => {\n              c.updateAutoHeight();\n            });\n          }\n\n          c.$wrapperEl.transitionEnd(() => {\n            if (!controlled) return;\n\n            if (c.params.loop && swiper.params.controller.by === 'slide') {\n              c.loopFix();\n            }\n\n            c.transitionEnd();\n          });\n        }\n      }\n\n      if (Array.isArray(controlled)) {\n        for (i = 0; i < controlled.length; i += 1) {\n          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n            setControlledTransition(controlled[i]);\n          }\n        }\n      } else if (controlled instanceof Swiper && byController !== controlled) {\n        setControlledTransition(controlled);\n      }\n    }\n\n    function removeSpline() {\n      if (!swiper.controller.control) return;\n\n      if (swiper.controller.spline) {\n        swiper.controller.spline = undefined;\n        delete swiper.controller.spline;\n      }\n    }\n\n    on('beforeInit', () => {\n      swiper.controller.control = swiper.params.controller.control;\n    });\n    on('update', () => {\n      removeSpline();\n    });\n    on('resize', () => {\n      removeSpline();\n    });\n    on('observerUpdate', () => {\n      removeSpline();\n    });\n    on('setTranslate', (_s, translate, byController) => {\n      if (!swiper.controller.control) return;\n      swiper.controller.setTranslate(translate, byController);\n    });\n    on('setTransition', (_s, duration, byController) => {\n      if (!swiper.controller.control) return;\n      swiper.controller.setTransition(duration, byController);\n    });\n    Object.assign(swiper.controller, {\n      setTranslate,\n      setTransition\n    });\n  }\n\n  function A11y(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      a11y: {\n        enabled: true,\n        notificationClass: 'swiper-notification',\n        prevSlideMessage: 'Previous slide',\n        nextSlideMessage: 'Next slide',\n        firstSlideMessage: 'This is the first slide',\n        lastSlideMessage: 'This is the last slide',\n        paginationBulletMessage: 'Go to slide {{index}}',\n        slideLabelMessage: '{{index}} / {{slidesLength}}',\n        containerMessage: null,\n        containerRoleDescriptionMessage: null,\n        itemRoleDescriptionMessage: null,\n        slideRole: 'group'\n      }\n    });\n    let liveRegion = null;\n\n    function notify(message) {\n      const notification = liveRegion;\n      if (notification.length === 0) return;\n      notification.html('');\n      notification.html(message);\n    }\n\n    function getRandomNumber(size) {\n      if (size === void 0) {\n        size = 16;\n      }\n\n      const randomChar = () => Math.round(16 * Math.random()).toString(16);\n\n      return 'x'.repeat(size).replace(/x/g, randomChar);\n    }\n\n    function makeElFocusable($el) {\n      $el.attr('tabIndex', '0');\n    }\n\n    function makeElNotFocusable($el) {\n      $el.attr('tabIndex', '-1');\n    }\n\n    function addElRole($el, role) {\n      $el.attr('role', role);\n    }\n\n    function addElRoleDescription($el, description) {\n      $el.attr('aria-roledescription', description);\n    }\n\n    function addElControls($el, controls) {\n      $el.attr('aria-controls', controls);\n    }\n\n    function addElLabel($el, label) {\n      $el.attr('aria-label', label);\n    }\n\n    function addElId($el, id) {\n      $el.attr('id', id);\n    }\n\n    function addElLive($el, live) {\n      $el.attr('aria-live', live);\n    }\n\n    function disableEl($el) {\n      $el.attr('aria-disabled', true);\n    }\n\n    function enableEl($el) {\n      $el.attr('aria-disabled', false);\n    }\n\n    function onEnterOrSpaceKey(e) {\n      if (e.keyCode !== 13 && e.keyCode !== 32) return;\n      const params = swiper.params.a11y;\n      const $targetEl = $(e.target);\n\n      if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n        if (!(swiper.isEnd && !swiper.params.loop)) {\n          swiper.slideNext();\n        }\n\n        if (swiper.isEnd) {\n          notify(params.lastSlideMessage);\n        } else {\n          notify(params.nextSlideMessage);\n        }\n      }\n\n      if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n        if (!(swiper.isBeginning && !swiper.params.loop)) {\n          swiper.slidePrev();\n        }\n\n        if (swiper.isBeginning) {\n          notify(params.firstSlideMessage);\n        } else {\n          notify(params.prevSlideMessage);\n        }\n      }\n\n      if (swiper.pagination && $targetEl.is(classesToSelector(swiper.params.pagination.bulletClass))) {\n        $targetEl[0].click();\n      }\n    }\n\n    function updateNavigation() {\n      if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n      const {\n        $nextEl,\n        $prevEl\n      } = swiper.navigation;\n\n      if ($prevEl && $prevEl.length > 0) {\n        if (swiper.isBeginning) {\n          disableEl($prevEl);\n          makeElNotFocusable($prevEl);\n        } else {\n          enableEl($prevEl);\n          makeElFocusable($prevEl);\n        }\n      }\n\n      if ($nextEl && $nextEl.length > 0) {\n        if (swiper.isEnd) {\n          disableEl($nextEl);\n          makeElNotFocusable($nextEl);\n        } else {\n          enableEl($nextEl);\n          makeElFocusable($nextEl);\n        }\n      }\n    }\n\n    function hasPagination() {\n      return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n    }\n\n    function hasClickablePagination() {\n      return hasPagination() && swiper.params.pagination.clickable;\n    }\n\n    function updatePagination() {\n      const params = swiper.params.a11y;\n      if (!hasPagination()) return;\n      swiper.pagination.bullets.each(bulletEl => {\n        const $bulletEl = $(bulletEl);\n\n        if (swiper.params.pagination.clickable) {\n          makeElFocusable($bulletEl);\n\n          if (!swiper.params.pagination.renderBullet) {\n            addElRole($bulletEl, 'button');\n            addElLabel($bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, $bulletEl.index() + 1));\n          }\n        }\n\n        if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {\n          $bulletEl.attr('aria-current', 'true');\n        } else {\n          $bulletEl.removeAttr('aria-current');\n        }\n      });\n    }\n\n    const initNavEl = ($el, wrapperId, message) => {\n      makeElFocusable($el);\n\n      if ($el[0].tagName !== 'BUTTON') {\n        addElRole($el, 'button');\n        $el.on('keydown', onEnterOrSpaceKey);\n      }\n\n      addElLabel($el, message);\n      addElControls($el, wrapperId);\n    };\n\n    const handleFocus = e => {\n      const slideEl = e.target.closest(`.${swiper.params.slideClass}`);\n      if (!slideEl || !swiper.slides.includes(slideEl)) return;\n      const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n      const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n      if (isActive || isVisible) return;\n      swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n    };\n\n    function init() {\n      const params = swiper.params.a11y;\n      swiper.$el.append(liveRegion); // Container\n\n      const $containerEl = swiper.$el;\n\n      if (params.containerRoleDescriptionMessage) {\n        addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);\n      }\n\n      if (params.containerMessage) {\n        addElLabel($containerEl, params.containerMessage);\n      } // Wrapper\n\n\n      const $wrapperEl = swiper.$wrapperEl;\n      const wrapperId = $wrapperEl.attr('id') || `swiper-wrapper-${getRandomNumber(16)}`;\n      const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\n      addElId($wrapperEl, wrapperId);\n      addElLive($wrapperEl, live); // Slide\n\n      if (params.itemRoleDescriptionMessage) {\n        addElRoleDescription($(swiper.slides), params.itemRoleDescriptionMessage);\n      }\n\n      addElRole($(swiper.slides), params.slideRole);\n      const slidesLength = swiper.params.loop ? swiper.slides.filter(el => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;\n      swiper.slides.each((slideEl, index) => {\n        const $slideEl = $(slideEl);\n        const slideIndex = swiper.params.loop ? parseInt($slideEl.attr('data-swiper-slide-index'), 10) : index;\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n        addElLabel($slideEl, ariaLabelMessage);\n      }); // Navigation\n\n      let $nextEl;\n      let $prevEl;\n\n      if (swiper.navigation && swiper.navigation.$nextEl) {\n        $nextEl = swiper.navigation.$nextEl;\n      }\n\n      if (swiper.navigation && swiper.navigation.$prevEl) {\n        $prevEl = swiper.navigation.$prevEl;\n      }\n\n      if ($nextEl && $nextEl.length) {\n        initNavEl($nextEl, wrapperId, params.nextSlideMessage);\n      }\n\n      if ($prevEl && $prevEl.length) {\n        initNavEl($prevEl, wrapperId, params.prevSlideMessage);\n      } // Pagination\n\n\n      if (hasClickablePagination()) {\n        swiper.pagination.$el.on('keydown', classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n      } // Tab focus\n\n\n      swiper.$el.on('focus', handleFocus, true);\n    }\n\n    function destroy() {\n      if (liveRegion && liveRegion.length > 0) liveRegion.remove();\n      let $nextEl;\n      let $prevEl;\n\n      if (swiper.navigation && swiper.navigation.$nextEl) {\n        $nextEl = swiper.navigation.$nextEl;\n      }\n\n      if (swiper.navigation && swiper.navigation.$prevEl) {\n        $prevEl = swiper.navigation.$prevEl;\n      }\n\n      if ($nextEl) {\n        $nextEl.off('keydown', onEnterOrSpaceKey);\n      }\n\n      if ($prevEl) {\n        $prevEl.off('keydown', onEnterOrSpaceKey);\n      } // Pagination\n\n\n      if (hasClickablePagination()) {\n        swiper.pagination.$el.off('keydown', classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n      } // Tab focus\n\n\n      swiper.$el.off('focus', handleFocus, true);\n    }\n\n    on('beforeInit', () => {\n      liveRegion = $(`<span class=\"${swiper.params.a11y.notificationClass}\" aria-live=\"assertive\" aria-atomic=\"true\"></span>`);\n    });\n    on('afterInit', () => {\n      if (!swiper.params.a11y.enabled) return;\n      init();\n    });\n    on('fromEdge toEdge afterInit lock unlock', () => {\n      if (!swiper.params.a11y.enabled) return;\n      updateNavigation();\n    });\n    on('paginationUpdate', () => {\n      if (!swiper.params.a11y.enabled) return;\n      updatePagination();\n    });\n    on('destroy', () => {\n      if (!swiper.params.a11y.enabled) return;\n      destroy();\n    });\n  }\n\n  function History(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      history: {\n        enabled: false,\n        root: '',\n        replaceState: false,\n        key: 'slides'\n      }\n    });\n    let initialized = false;\n    let paths = {};\n\n    const slugify = text => {\n      return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n    };\n\n    const getPathValues = urlOverride => {\n      const window = getWindow();\n      let location;\n\n      if (urlOverride) {\n        location = new URL(urlOverride);\n      } else {\n        location = window.location;\n      }\n\n      const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\n      const total = pathArray.length;\n      const key = pathArray[total - 2];\n      const value = pathArray[total - 1];\n      return {\n        key,\n        value\n      };\n    };\n\n    const setHistory = (key, index) => {\n      const window = getWindow();\n      if (!initialized || !swiper.params.history.enabled) return;\n      let location;\n\n      if (swiper.params.url) {\n        location = new URL(swiper.params.url);\n      } else {\n        location = window.location;\n      }\n\n      const slide = swiper.slides.eq(index);\n      let value = slugify(slide.attr('data-history'));\n\n      if (swiper.params.history.root.length > 0) {\n        let root = swiper.params.history.root;\n        if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\n        value = `${root}/${key}/${value}`;\n      } else if (!location.pathname.includes(key)) {\n        value = `${key}/${value}`;\n      }\n\n      const currentState = window.history.state;\n\n      if (currentState && currentState.value === value) {\n        return;\n      }\n\n      if (swiper.params.history.replaceState) {\n        window.history.replaceState({\n          value\n        }, null, value);\n      } else {\n        window.history.pushState({\n          value\n        }, null, value);\n      }\n    };\n\n    const scrollToSlide = (speed, value, runCallbacks) => {\n      if (value) {\n        for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n          const slide = swiper.slides.eq(i);\n          const slideHistory = slugify(slide.attr('data-history'));\n\n          if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n            const index = slide.index();\n            swiper.slideTo(index, speed, runCallbacks);\n          }\n        }\n      } else {\n        swiper.slideTo(0, speed, runCallbacks);\n      }\n    };\n\n    const setHistoryPopState = () => {\n      paths = getPathValues(swiper.params.url);\n      scrollToSlide(swiper.params.speed, swiper.paths.value, false);\n    };\n\n    const init = () => {\n      const window = getWindow();\n      if (!swiper.params.history) return;\n\n      if (!window.history || !window.history.pushState) {\n        swiper.params.history.enabled = false;\n        swiper.params.hashNavigation.enabled = true;\n        return;\n      }\n\n      initialized = true;\n      paths = getPathValues(swiper.params.url);\n      if (!paths.key && !paths.value) return;\n      scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n\n      if (!swiper.params.history.replaceState) {\n        window.addEventListener('popstate', setHistoryPopState);\n      }\n    };\n\n    const destroy = () => {\n      const window = getWindow();\n\n      if (!swiper.params.history.replaceState) {\n        window.removeEventListener('popstate', setHistoryPopState);\n      }\n    };\n\n    on('init', () => {\n      if (swiper.params.history.enabled) {\n        init();\n      }\n    });\n    on('destroy', () => {\n      if (swiper.params.history.enabled) {\n        destroy();\n      }\n    });\n    on('transitionEnd _freeModeNoMomentumRelease', () => {\n      if (initialized) {\n        setHistory(swiper.params.history.key, swiper.activeIndex);\n      }\n    });\n    on('slideChange', () => {\n      if (initialized && swiper.params.cssMode) {\n        setHistory(swiper.params.history.key, swiper.activeIndex);\n      }\n    });\n  }\n\n  function HashNavigation(_ref) {\n    let {\n      swiper,\n      extendParams,\n      emit,\n      on\n    } = _ref;\n    let initialized = false;\n    const document = getDocument();\n    const window = getWindow();\n    extendParams({\n      hashNavigation: {\n        enabled: false,\n        replaceState: false,\n        watchState: false\n      }\n    });\n\n    const onHashChange = () => {\n      emit('hashChange');\n      const newHash = document.location.hash.replace('#', '');\n      const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');\n\n      if (newHash !== activeSlideHash) {\n        const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash=\"${newHash}\"]`).index();\n        if (typeof newIndex === 'undefined') return;\n        swiper.slideTo(newIndex);\n      }\n    };\n\n    const setHash = () => {\n      if (!initialized || !swiper.params.hashNavigation.enabled) return;\n\n      if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n        window.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || '');\n        emit('hashSet');\n      } else {\n        const slide = swiper.slides.eq(swiper.activeIndex);\n        const hash = slide.attr('data-hash') || slide.attr('data-history');\n        document.location.hash = hash || '';\n        emit('hashSet');\n      }\n    };\n\n    const init = () => {\n      if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n      initialized = true;\n      const hash = document.location.hash.replace('#', '');\n\n      if (hash) {\n        const speed = 0;\n\n        for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n          const slide = swiper.slides.eq(i);\n          const slideHash = slide.attr('data-hash') || slide.attr('data-history');\n\n          if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n            const index = slide.index();\n            swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);\n          }\n        }\n      }\n\n      if (swiper.params.hashNavigation.watchState) {\n        $(window).on('hashchange', onHashChange);\n      }\n    };\n\n    const destroy = () => {\n      if (swiper.params.hashNavigation.watchState) {\n        $(window).off('hashchange', onHashChange);\n      }\n    };\n\n    on('init', () => {\n      if (swiper.params.hashNavigation.enabled) {\n        init();\n      }\n    });\n    on('destroy', () => {\n      if (swiper.params.hashNavigation.enabled) {\n        destroy();\n      }\n    });\n    on('transitionEnd _freeModeNoMomentumRelease', () => {\n      if (initialized) {\n        setHash();\n      }\n    });\n    on('slideChange', () => {\n      if (initialized && swiper.params.cssMode) {\n        setHash();\n      }\n    });\n  }\n  /* eslint no-underscore-dangle: \"off\" */\n\n\n  function Autoplay(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on,\n      emit\n    } = _ref;\n    let timeout;\n    swiper.autoplay = {\n      running: false,\n      paused: false\n    };\n    extendParams({\n      autoplay: {\n        enabled: false,\n        delay: 3000,\n        waitForTransition: true,\n        disableOnInteraction: true,\n        stopOnLastSlide: false,\n        reverseDirection: false,\n        pauseOnMouseEnter: false\n      }\n    });\n\n    function run() {\n      const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n      let delay = swiper.params.autoplay.delay;\n\n      if ($activeSlideEl.attr('data-swiper-autoplay')) {\n        delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;\n      }\n\n      clearTimeout(timeout);\n      timeout = nextTick(() => {\n        let autoplayResult;\n\n        if (swiper.params.autoplay.reverseDirection) {\n          if (swiper.params.loop) {\n            swiper.loopFix();\n            autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n            emit('autoplay');\n          } else if (!swiper.isBeginning) {\n            autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n            emit('autoplay');\n          } else if (!swiper.params.autoplay.stopOnLastSlide) {\n            autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n            emit('autoplay');\n          } else {\n            stop();\n          }\n        } else if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.isEnd) {\n          autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n          emit('autoplay');\n        } else {\n          stop();\n        }\n\n        if (swiper.params.cssMode && swiper.autoplay.running) run();else if (autoplayResult === false) {\n          run();\n        }\n      }, delay);\n    }\n\n    function start() {\n      if (typeof timeout !== 'undefined') return false;\n      if (swiper.autoplay.running) return false;\n      swiper.autoplay.running = true;\n      emit('autoplayStart');\n      run();\n      return true;\n    }\n\n    function stop() {\n      if (!swiper.autoplay.running) return false;\n      if (typeof timeout === 'undefined') return false;\n\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = undefined;\n      }\n\n      swiper.autoplay.running = false;\n      emit('autoplayStop');\n      return true;\n    }\n\n    function pause(speed) {\n      if (!swiper.autoplay.running) return;\n      if (swiper.autoplay.paused) return;\n      if (timeout) clearTimeout(timeout);\n      swiper.autoplay.paused = true;\n\n      if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n        swiper.autoplay.paused = false;\n        run();\n      } else {\n        ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n          swiper.$wrapperEl[0].addEventListener(event, onTransitionEnd);\n        });\n      }\n    }\n\n    function onVisibilityChange() {\n      const document = getDocument();\n\n      if (document.visibilityState === 'hidden' && swiper.autoplay.running) {\n        pause();\n      }\n\n      if (document.visibilityState === 'visible' && swiper.autoplay.paused) {\n        run();\n        swiper.autoplay.paused = false;\n      }\n    }\n\n    function onTransitionEnd(e) {\n      if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;\n      if (e.target !== swiper.$wrapperEl[0]) return;\n      ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n        swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n      });\n      swiper.autoplay.paused = false;\n\n      if (!swiper.autoplay.running) {\n        stop();\n      } else {\n        run();\n      }\n    }\n\n    function onMouseEnter() {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        emit('autoplayPause');\n        pause();\n      }\n\n      ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n        swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n      });\n    }\n\n    function onMouseLeave() {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        return;\n      }\n\n      swiper.autoplay.paused = false;\n      emit('autoplayResume');\n      run();\n    }\n\n    function attachMouseEvents() {\n      if (swiper.params.autoplay.pauseOnMouseEnter) {\n        swiper.$el.on('mouseenter', onMouseEnter);\n        swiper.$el.on('mouseleave', onMouseLeave);\n      }\n    }\n\n    function detachMouseEvents() {\n      swiper.$el.off('mouseenter', onMouseEnter);\n      swiper.$el.off('mouseleave', onMouseLeave);\n    }\n\n    on('init', () => {\n      if (swiper.params.autoplay.enabled) {\n        start();\n        const document = getDocument();\n        document.addEventListener('visibilitychange', onVisibilityChange);\n        attachMouseEvents();\n      }\n    });\n    on('beforeTransitionStart', (_s, speed, internal) => {\n      if (swiper.autoplay.running) {\n        if (internal || !swiper.params.autoplay.disableOnInteraction) {\n          swiper.autoplay.pause(speed);\n        } else {\n          stop();\n        }\n      }\n    });\n    on('sliderFirstMove', () => {\n      if (swiper.autoplay.running) {\n        if (swiper.params.autoplay.disableOnInteraction) {\n          stop();\n        } else {\n          pause();\n        }\n      }\n    });\n    on('touchEnd', () => {\n      if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n        run();\n      }\n    });\n    on('destroy', () => {\n      detachMouseEvents();\n\n      if (swiper.autoplay.running) {\n        stop();\n      }\n\n      const document = getDocument();\n      document.removeEventListener('visibilitychange', onVisibilityChange);\n    });\n    Object.assign(swiper.autoplay, {\n      pause,\n      run,\n      start,\n      stop\n    });\n  }\n\n  function Thumb(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      thumbs: {\n        swiper: null,\n        multipleActiveThumbs: true,\n        autoScrollOffset: 0,\n        slideThumbActiveClass: 'swiper-slide-thumb-active',\n        thumbsContainerClass: 'swiper-thumbs'\n      }\n    });\n    let initialized = false;\n    let swiperCreated = false;\n    swiper.thumbs = {\n      swiper: null\n    };\n\n    function onThumbClick() {\n      const thumbsSwiper = swiper.thumbs.swiper;\n      if (!thumbsSwiper) return;\n      const clickedIndex = thumbsSwiper.clickedIndex;\n      const clickedSlide = thumbsSwiper.clickedSlide;\n      if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n      if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n      let slideToIndex;\n\n      if (thumbsSwiper.params.loop) {\n        slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n      } else {\n        slideToIndex = clickedIndex;\n      }\n\n      if (swiper.params.loop) {\n        let currentIndex = swiper.activeIndex;\n\n        if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n          swiper.loopFix(); // eslint-disable-next-line\n\n          swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n          currentIndex = swiper.activeIndex;\n        }\n\n        const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n        const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n        if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n      }\n\n      swiper.slideTo(slideToIndex);\n    }\n\n    function init() {\n      const {\n        thumbs: thumbsParams\n      } = swiper.params;\n      if (initialized) return false;\n      initialized = true;\n      const SwiperClass = swiper.constructor;\n\n      if (thumbsParams.swiper instanceof SwiperClass) {\n        swiper.thumbs.swiper = thumbsParams.swiper;\n        Object.assign(swiper.thumbs.swiper.originalParams, {\n          watchSlidesProgress: true,\n          slideToClickedSlide: false\n        });\n        Object.assign(swiper.thumbs.swiper.params, {\n          watchSlidesProgress: true,\n          slideToClickedSlide: false\n        });\n      } else if (isObject(thumbsParams.swiper)) {\n        const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n        Object.assign(thumbsSwiperParams, {\n          watchSlidesProgress: true,\n          slideToClickedSlide: false\n        });\n        swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n        swiperCreated = true;\n      }\n\n      swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n      swiper.thumbs.swiper.on('tap', onThumbClick);\n      return true;\n    }\n\n    function update(initial) {\n      const thumbsSwiper = swiper.thumbs.swiper;\n      if (!thumbsSwiper) return;\n      const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n      const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n      const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n      if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n        let currentThumbsIndex = thumbsSwiper.activeIndex;\n        let newThumbsIndex;\n        let direction;\n\n        if (thumbsSwiper.params.loop) {\n          if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n            thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n            thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n            currentThumbsIndex = thumbsSwiper.activeIndex;\n          } // Find actual thumbs index to slide to\n\n\n          const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n          const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n          if (typeof prevThumbsIndex === 'undefined') {\n            newThumbsIndex = nextThumbsIndex;\n          } else if (typeof nextThumbsIndex === 'undefined') {\n            newThumbsIndex = prevThumbsIndex;\n          } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n            newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n          } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n            newThumbsIndex = nextThumbsIndex;\n          } else {\n            newThumbsIndex = prevThumbsIndex;\n          }\n\n          direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n        } else {\n          newThumbsIndex = swiper.realIndex;\n          direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n        }\n\n        if (useOffset) {\n          newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n        }\n\n        if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n          if (thumbsSwiper.params.centeredSlides) {\n            if (newThumbsIndex > currentThumbsIndex) {\n              newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n            } else {\n              newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n            }\n          } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\n\n          thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n        }\n      } // Activate thumbs\n\n\n      let thumbsToActivate = 1;\n      const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n      if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n        thumbsToActivate = swiper.params.slidesPerView;\n      }\n\n      if (!swiper.params.thumbs.multipleActiveThumbs) {\n        thumbsToActivate = 1;\n      }\n\n      thumbsToActivate = Math.floor(thumbsToActivate);\n      thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n      if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n        for (let i = 0; i < thumbsToActivate; i += 1) {\n          thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n        }\n      } else {\n        for (let i = 0; i < thumbsToActivate; i += 1) {\n          thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n        }\n      }\n    }\n\n    on('beforeInit', () => {\n      const {\n        thumbs\n      } = swiper.params;\n      if (!thumbs || !thumbs.swiper) return;\n      init();\n      update(true);\n    });\n    on('slideChange update resize observerUpdate', () => {\n      if (!swiper.thumbs.swiper) return;\n      update();\n    });\n    on('setTransition', (_s, duration) => {\n      const thumbsSwiper = swiper.thumbs.swiper;\n      if (!thumbsSwiper) return;\n      thumbsSwiper.setTransition(duration);\n    });\n    on('beforeDestroy', () => {\n      const thumbsSwiper = swiper.thumbs.swiper;\n      if (!thumbsSwiper) return;\n\n      if (swiperCreated && thumbsSwiper) {\n        thumbsSwiper.destroy();\n      }\n    });\n    Object.assign(swiper.thumbs, {\n      init,\n      update\n    });\n  }\n\n  function freeMode(_ref) {\n    let {\n      swiper,\n      extendParams,\n      emit,\n      once\n    } = _ref;\n    extendParams({\n      freeMode: {\n        enabled: false,\n        momentum: true,\n        momentumRatio: 1,\n        momentumBounce: true,\n        momentumBounceRatio: 1,\n        momentumVelocityRatio: 1,\n        sticky: false,\n        minimumVelocity: 0.02\n      }\n    });\n\n    function onTouchStart() {\n      const translate = swiper.getTranslate();\n      swiper.setTranslate(translate);\n      swiper.setTransition(0);\n      swiper.touchEventsData.velocities.length = 0;\n      swiper.freeMode.onTouchEnd({\n        currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n      });\n    }\n\n    function onTouchMove() {\n      const {\n        touchEventsData: data,\n        touches\n      } = swiper; // Velocity\n\n      if (data.velocities.length === 0) {\n        data.velocities.push({\n          position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n          time: data.touchStartTime\n        });\n      }\n\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n        time: now()\n      });\n    }\n\n    function onTouchEnd(_ref2) {\n      let {\n        currentPos\n      } = _ref2;\n      const {\n        params,\n        $wrapperEl,\n        rtlTranslate: rtl,\n        snapGrid,\n        touchEventsData: data\n      } = swiper; // Time diff\n\n      const touchEndTime = now();\n      const timeDiff = touchEndTime - data.touchStartTime;\n\n      if (currentPos < -swiper.minTranslate()) {\n        swiper.slideTo(swiper.activeIndex);\n        return;\n      }\n\n      if (currentPos > -swiper.maxTranslate()) {\n        if (swiper.slides.length < snapGrid.length) {\n          swiper.slideTo(snapGrid.length - 1);\n        } else {\n          swiper.slideTo(swiper.slides.length - 1);\n        }\n\n        return;\n      }\n\n      if (params.freeMode.momentum) {\n        if (data.velocities.length > 1) {\n          const lastMoveEvent = data.velocities.pop();\n          const velocityEvent = data.velocities.pop();\n          const distance = lastMoveEvent.position - velocityEvent.position;\n          const time = lastMoveEvent.time - velocityEvent.time;\n          swiper.velocity = distance / time;\n          swiper.velocity /= 2;\n\n          if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n            swiper.velocity = 0;\n          } // this implies that the user stopped moving a finger then released.\n          // There would be no events with distance zero, so the last event is stale.\n\n\n          if (time > 150 || now() - lastMoveEvent.time > 300) {\n            swiper.velocity = 0;\n          }\n        } else {\n          swiper.velocity = 0;\n        }\n\n        swiper.velocity *= params.freeMode.momentumVelocityRatio;\n        data.velocities.length = 0;\n        let momentumDuration = 1000 * params.freeMode.momentumRatio;\n        const momentumDistance = swiper.velocity * momentumDuration;\n        let newPosition = swiper.translate + momentumDistance;\n        if (rtl) newPosition = -newPosition;\n        let doBounce = false;\n        let afterBouncePosition;\n        const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n        let needsLoopFix;\n\n        if (newPosition < swiper.maxTranslate()) {\n          if (params.freeMode.momentumBounce) {\n            if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n              newPosition = swiper.maxTranslate() - bounceAmount;\n            }\n\n            afterBouncePosition = swiper.maxTranslate();\n            doBounce = true;\n            data.allowMomentumBounce = true;\n          } else {\n            newPosition = swiper.maxTranslate();\n          }\n\n          if (params.loop && params.centeredSlides) needsLoopFix = true;\n        } else if (newPosition > swiper.minTranslate()) {\n          if (params.freeMode.momentumBounce) {\n            if (newPosition - swiper.minTranslate() > bounceAmount) {\n              newPosition = swiper.minTranslate() + bounceAmount;\n            }\n\n            afterBouncePosition = swiper.minTranslate();\n            doBounce = true;\n            data.allowMomentumBounce = true;\n          } else {\n            newPosition = swiper.minTranslate();\n          }\n\n          if (params.loop && params.centeredSlides) needsLoopFix = true;\n        } else if (params.freeMode.sticky) {\n          let nextSlide;\n\n          for (let j = 0; j < snapGrid.length; j += 1) {\n            if (snapGrid[j] > -newPosition) {\n              nextSlide = j;\n              break;\n            }\n          }\n\n          if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n            newPosition = snapGrid[nextSlide];\n          } else {\n            newPosition = snapGrid[nextSlide - 1];\n          }\n\n          newPosition = -newPosition;\n        }\n\n        if (needsLoopFix) {\n          once('transitionEnd', () => {\n            swiper.loopFix();\n          });\n        } // Fix duration\n\n\n        if (swiper.velocity !== 0) {\n          if (rtl) {\n            momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n          } else {\n            momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n          }\n\n          if (params.freeMode.sticky) {\n            // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n            // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n            // It's easy to see this when simulating touch with mouse events. To fix this,\n            // limit single-slide swipes to the default slide duration. This also has the\n            // nice side effect of matching slide speed if the user stopped moving before\n            // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n            // For faster swipes, also apply limits (albeit higher ones).\n            const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n            const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n            if (moveDistance < currentSlideSize) {\n              momentumDuration = params.speed;\n            } else if (moveDistance < 2 * currentSlideSize) {\n              momentumDuration = params.speed * 1.5;\n            } else {\n              momentumDuration = params.speed * 2.5;\n            }\n          }\n        } else if (params.freeMode.sticky) {\n          swiper.slideToClosest();\n          return;\n        }\n\n        if (params.freeMode.momentumBounce && doBounce) {\n          swiper.updateProgress(afterBouncePosition);\n          swiper.setTransition(momentumDuration);\n          swiper.setTranslate(newPosition);\n          swiper.transitionStart(true, swiper.swipeDirection);\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n            emit('momentumBounce');\n            swiper.setTransition(params.speed);\n            setTimeout(() => {\n              swiper.setTranslate(afterBouncePosition);\n              $wrapperEl.transitionEnd(() => {\n                if (!swiper || swiper.destroyed) return;\n                swiper.transitionEnd();\n              });\n            }, 0);\n          });\n        } else if (swiper.velocity) {\n          emit('_freeModeNoMomentumRelease');\n          swiper.updateProgress(newPosition);\n          swiper.setTransition(momentumDuration);\n          swiper.setTranslate(newPosition);\n          swiper.transitionStart(true, swiper.swipeDirection);\n\n          if (!swiper.animating) {\n            swiper.animating = true;\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }\n        } else {\n          swiper.updateProgress(newPosition);\n        }\n\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      } else if (params.freeMode) {\n        emit('_freeModeNoMomentumRelease');\n      }\n\n      if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n      }\n    }\n\n    Object.assign(swiper, {\n      freeMode: {\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd\n      }\n    });\n  }\n\n  function Grid(_ref) {\n    let {\n      swiper,\n      extendParams\n    } = _ref;\n    extendParams({\n      grid: {\n        rows: 1,\n        fill: 'column'\n      }\n    });\n    let slidesNumberEvenToRows;\n    let slidesPerRow;\n    let numFullColumns;\n\n    const initSlides = slidesLength => {\n      const {\n        slidesPerView\n      } = swiper.params;\n      const {\n        rows,\n        fill\n      } = swiper.params.grid;\n      slidesPerRow = slidesNumberEvenToRows / rows;\n      numFullColumns = Math.floor(slidesLength / rows);\n\n      if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n        slidesNumberEvenToRows = slidesLength;\n      } else {\n        slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n      }\n\n      if (slidesPerView !== 'auto' && fill === 'row') {\n        slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n      }\n    };\n\n    const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n      const {\n        slidesPerGroup,\n        spaceBetween\n      } = swiper.params;\n      const {\n        rows,\n        fill\n      } = swiper.params.grid; // Set slides order\n\n      let newSlideOrderIndex;\n      let column;\n      let row;\n\n      if (fill === 'row' && slidesPerGroup > 1) {\n        const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n        const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n        const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n        row = Math.floor(slideIndexInGroup / columnsInGroup);\n        column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n        newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n        slide.css({\n          '-webkit-order': newSlideOrderIndex,\n          order: newSlideOrderIndex\n        });\n      } else if (fill === 'column') {\n        column = Math.floor(i / rows);\n        row = i - column * rows;\n\n        if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n          row += 1;\n\n          if (row >= rows) {\n            row = 0;\n            column += 1;\n          }\n        }\n      } else {\n        row = Math.floor(i / slidesPerRow);\n        column = i - row * slidesPerRow;\n      }\n\n      slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && `${spaceBetween}px` : '');\n    };\n\n    const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n      const {\n        spaceBetween,\n        centeredSlides,\n        roundLengths\n      } = swiper.params;\n      const {\n        rows\n      } = swiper.params.grid;\n      swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n      swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n      swiper.$wrapperEl.css({\n        [getDirectionLabel('width')]: `${swiper.virtualSize + spaceBetween}px`\n      });\n\n      if (centeredSlides) {\n        snapGrid.splice(0, snapGrid.length);\n        const newSlidesGrid = [];\n\n        for (let i = 0; i < snapGrid.length; i += 1) {\n          let slidesGridItem = snapGrid[i];\n          if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n          if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n        }\n\n        snapGrid.push(...newSlidesGrid);\n      }\n    };\n\n    swiper.grid = {\n      initSlides,\n      updateSlide,\n      updateWrapperSize\n    };\n  }\n\n  function appendSlide(slides) {\n    const swiper = this;\n    const {\n      $wrapperEl,\n      params\n    } = swiper;\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) $wrapperEl.append(slides[i]);\n      }\n    } else {\n      $wrapperEl.append(slides);\n    }\n\n    if (params.loop) {\n      swiper.loopCreate();\n    }\n\n    if (!params.observer) {\n      swiper.update();\n    }\n  }\n\n  function prependSlide(slides) {\n    const swiper = this;\n    const {\n      params,\n      $wrapperEl,\n      activeIndex\n    } = swiper;\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n\n    let newActiveIndex = activeIndex + 1;\n\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) $wrapperEl.prepend(slides[i]);\n      }\n\n      newActiveIndex = activeIndex + slides.length;\n    } else {\n      $wrapperEl.prepend(slides);\n    }\n\n    if (params.loop) {\n      swiper.loopCreate();\n    }\n\n    if (!params.observer) {\n      swiper.update();\n    }\n\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n\n  function addSlide(index, slides) {\n    const swiper = this;\n    const {\n      $wrapperEl,\n      params,\n      activeIndex\n    } = swiper;\n    let activeIndexBuffer = activeIndex;\n\n    if (params.loop) {\n      activeIndexBuffer -= swiper.loopedSlides;\n      swiper.loopDestroy();\n      swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n    }\n\n    const baseLength = swiper.slides.length;\n\n    if (index <= 0) {\n      swiper.prependSlide(slides);\n      return;\n    }\n\n    if (index >= baseLength) {\n      swiper.appendSlide(slides);\n      return;\n    }\n\n    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n    const slidesBuffer = [];\n\n    for (let i = baseLength - 1; i >= index; i -= 1) {\n      const currentSlide = swiper.slides.eq(i);\n      currentSlide.remove();\n      slidesBuffer.unshift(currentSlide);\n    }\n\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) $wrapperEl.append(slides[i]);\n      }\n\n      newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n    } else {\n      $wrapperEl.append(slides);\n    }\n\n    for (let i = 0; i < slidesBuffer.length; i += 1) {\n      $wrapperEl.append(slidesBuffer[i]);\n    }\n\n    if (params.loop) {\n      swiper.loopCreate();\n    }\n\n    if (!params.observer) {\n      swiper.update();\n    }\n\n    if (params.loop) {\n      swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n      swiper.slideTo(newActiveIndex, 0, false);\n    }\n  }\n\n  function removeSlide(slidesIndexes) {\n    const swiper = this;\n    const {\n      params,\n      $wrapperEl,\n      activeIndex\n    } = swiper;\n    let activeIndexBuffer = activeIndex;\n\n    if (params.loop) {\n      activeIndexBuffer -= swiper.loopedSlides;\n      swiper.loopDestroy();\n      swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n    }\n\n    let newActiveIndex = activeIndexBuffer;\n    let indexToRemove;\n\n    if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\n      for (let i = 0; i < slidesIndexes.length; i += 1) {\n        indexToRemove = slidesIndexes[i];\n        if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n      }\n\n      newActiveIndex = Math.max(newActiveIndex, 0);\n    } else {\n      indexToRemove = slidesIndexes;\n      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n      newActiveIndex = Math.max(newActiveIndex, 0);\n    }\n\n    if (params.loop) {\n      swiper.loopCreate();\n    }\n\n    if (!params.observer) {\n      swiper.update();\n    }\n\n    if (params.loop) {\n      swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n      swiper.slideTo(newActiveIndex, 0, false);\n    }\n  }\n\n  function removeAllSlides() {\n    const swiper = this;\n    const slidesIndexes = [];\n\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      slidesIndexes.push(i);\n    }\n\n    swiper.removeSlide(slidesIndexes);\n  }\n\n  function Manipulation(_ref) {\n    let {\n      swiper\n    } = _ref;\n    Object.assign(swiper, {\n      appendSlide: appendSlide.bind(swiper),\n      prependSlide: prependSlide.bind(swiper),\n      addSlide: addSlide.bind(swiper),\n      removeSlide: removeSlide.bind(swiper),\n      removeAllSlides: removeAllSlides.bind(swiper)\n    });\n  }\n\n  function effectInit(params) {\n    const {\n      effect,\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      overwriteParams,\n      perspective\n    } = params;\n    on('beforeInit', () => {\n      if (swiper.params.effect !== effect) return;\n      swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n\n      if (perspective && perspective()) {\n        swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n      }\n\n      const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n      Object.assign(swiper.params, overwriteParamsResult);\n      Object.assign(swiper.originalParams, overwriteParamsResult);\n    });\n    on('setTranslate', () => {\n      if (swiper.params.effect !== effect) return;\n      setTranslate();\n    });\n    on('setTransition', (_s, duration) => {\n      if (swiper.params.effect !== effect) return;\n      setTransition(duration);\n    });\n  }\n\n  function effectTarget(effectParams, $slideEl) {\n    if (effectParams.transformEl) {\n      return $slideEl.find(effectParams.transformEl).css({\n        'backface-visibility': 'hidden',\n        '-webkit-backface-visibility': 'hidden'\n      });\n    }\n\n    return $slideEl;\n  }\n\n  function effectVirtualTransitionEnd(_ref) {\n    let {\n      swiper,\n      duration,\n      transformEl,\n      allSlides\n    } = _ref;\n    const {\n      slides,\n      activeIndex,\n      $wrapperEl\n    } = swiper;\n\n    if (swiper.params.virtualTranslate && duration !== 0) {\n      let eventTriggered = false;\n      let $transitionEndTarget;\n\n      if (allSlides) {\n        $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;\n      } else {\n        $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);\n      }\n\n      $transitionEndTarget.transitionEnd(() => {\n        if (eventTriggered) return;\n        if (!swiper || swiper.destroyed) return;\n        eventTriggered = true;\n        swiper.animating = false;\n        const triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n\n        for (let i = 0; i < triggerEvents.length; i += 1) {\n          $wrapperEl.trigger(triggerEvents[i]);\n        }\n      });\n    }\n  }\n\n  function EffectFade(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      fadeEffect: {\n        crossFade: false,\n        transformEl: null\n      }\n    });\n\n    const setTranslate = () => {\n      const {\n        slides\n      } = swiper;\n      const params = swiper.params.fadeEffect;\n\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = swiper.slides.eq(i);\n        const offset = $slideEl[0].swiperSlideOffset;\n        let tx = -offset;\n        if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n        let ty = 0;\n\n        if (!swiper.isHorizontal()) {\n          ty = tx;\n          tx = 0;\n        }\n\n        const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n        const $targetEl = effectTarget(params, $slideEl);\n        $targetEl.css({\n          opacity: slideOpacity\n        }).transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n      }\n    };\n\n    const setTransition = duration => {\n      const {\n        transformEl\n      } = swiper.params.fadeEffect;\n      const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n      $transitionElements.transition(duration);\n      effectVirtualTransitionEnd({\n        swiper,\n        duration,\n        transformEl,\n        allSlides: true\n      });\n    };\n\n    effectInit({\n      effect: 'fade',\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      overwriteParams: () => ({\n        slidesPerView: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        spaceBetween: 0,\n        virtualTranslate: !swiper.params.cssMode\n      })\n    });\n  }\n\n  function EffectCube(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      cubeEffect: {\n        slideShadows: true,\n        shadow: true,\n        shadowOffset: 20,\n        shadowScale: 0.94\n      }\n    });\n\n    const setTranslate = () => {\n      const {\n        $el,\n        $wrapperEl,\n        slides,\n        width: swiperWidth,\n        height: swiperHeight,\n        rtlTranslate: rtl,\n        size: swiperSize,\n        browser\n      } = swiper;\n      const params = swiper.params.cubeEffect;\n      const isHorizontal = swiper.isHorizontal();\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      let wrapperRotate = 0;\n      let $cubeShadowEl;\n\n      if (params.shadow) {\n        if (isHorizontal) {\n          $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');\n\n          if ($cubeShadowEl.length === 0) {\n            $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n            $wrapperEl.append($cubeShadowEl);\n          }\n\n          $cubeShadowEl.css({\n            height: `${swiperWidth}px`\n          });\n        } else {\n          $cubeShadowEl = $el.find('.swiper-cube-shadow');\n\n          if ($cubeShadowEl.length === 0) {\n            $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n            $el.append($cubeShadowEl);\n          }\n        }\n      }\n\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = slides.eq(i);\n        let slideIndex = i;\n\n        if (isVirtual) {\n          slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);\n        }\n\n        let slideAngle = slideIndex * 90;\n        let round = Math.floor(slideAngle / 360);\n\n        if (rtl) {\n          slideAngle = -slideAngle;\n          round = Math.floor(-slideAngle / 360);\n        }\n\n        const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n        let tx = 0;\n        let ty = 0;\n        let tz = 0;\n\n        if (slideIndex % 4 === 0) {\n          tx = -round * 4 * swiperSize;\n          tz = 0;\n        } else if ((slideIndex - 1) % 4 === 0) {\n          tx = 0;\n          tz = -round * 4 * swiperSize;\n        } else if ((slideIndex - 2) % 4 === 0) {\n          tx = swiperSize + round * 4 * swiperSize;\n          tz = swiperSize;\n        } else if ((slideIndex - 3) % 4 === 0) {\n          tx = -swiperSize;\n          tz = 3 * swiperSize + swiperSize * 4 * round;\n        }\n\n        if (rtl) {\n          tx = -tx;\n        }\n\n        if (!isHorizontal) {\n          ty = tx;\n          tx = 0;\n        }\n\n        const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n\n        if (progress <= 1 && progress > -1) {\n          wrapperRotate = slideIndex * 90 + progress * 90;\n          if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n        }\n\n        $slideEl.transform(transform);\n\n        if (params.slideShadows) {\n          // Set shadows\n          let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n          let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n          if (shadowBefore.length === 0) {\n            shadowBefore = $(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}\"></div>`);\n            $slideEl.append(shadowBefore);\n          }\n\n          if (shadowAfter.length === 0) {\n            shadowAfter = $(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}\"></div>`);\n            $slideEl.append(shadowAfter);\n          }\n\n          if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n          if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n        }\n      }\n\n      $wrapperEl.css({\n        '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,\n        'transform-origin': `50% 50% -${swiperSize / 2}px`\n      });\n\n      if (params.shadow) {\n        if (isHorizontal) {\n          $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n        } else {\n          const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n          const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n          const scale1 = params.shadowScale;\n          const scale2 = params.shadowScale / multiplier;\n          const offset = params.shadowOffset;\n          $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n        }\n      }\n\n      const zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;\n      $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n    };\n\n    const setTransition = duration => {\n      const {\n        $el,\n        slides\n      } = swiper;\n      slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n\n      if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n        $el.find('.swiper-cube-shadow').transition(duration);\n      }\n    };\n\n    effectInit({\n      effect: 'cube',\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      perspective: () => true,\n      overwriteParams: () => ({\n        slidesPerView: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        resistanceRatio: 0,\n        spaceBetween: 0,\n        centeredSlides: false,\n        virtualTranslate: true\n      })\n    });\n  }\n\n  function createShadow(params, $slideEl, side) {\n    const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;\n    const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n    let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n\n    if (!$shadowEl.length) {\n      $shadowEl = $(`<div class=\"swiper-slide-shadow${side ? `-${side}` : ''}\"></div>`);\n      $shadowContainer.append($shadowEl);\n    }\n\n    return $shadowEl;\n  }\n\n  function EffectFlip(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      flipEffect: {\n        slideShadows: true,\n        limitRotation: true,\n        transformEl: null\n      }\n    });\n\n    const setTranslate = () => {\n      const {\n        slides,\n        rtlTranslate: rtl\n      } = swiper;\n      const params = swiper.params.flipEffect;\n\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = slides.eq(i);\n        let progress = $slideEl[0].progress;\n\n        if (swiper.params.flipEffect.limitRotation) {\n          progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n        }\n\n        const offset = $slideEl[0].swiperSlideOffset;\n        const rotate = -180 * progress;\n        let rotateY = rotate;\n        let rotateX = 0;\n        let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n        let ty = 0;\n\n        if (!swiper.isHorizontal()) {\n          ty = tx;\n          tx = 0;\n          rotateX = -rotateY;\n          rotateY = 0;\n        } else if (rtl) {\n          rotateY = -rotateY;\n        }\n\n        $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n        if (params.slideShadows) {\n          // Set shadows\n          let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n          let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n          if (shadowBefore.length === 0) {\n            shadowBefore = createShadow(params, $slideEl, swiper.isHorizontal() ? 'left' : 'top');\n          }\n\n          if (shadowAfter.length === 0) {\n            shadowAfter = createShadow(params, $slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n          }\n\n          if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n          if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n        }\n\n        const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n        const $targetEl = effectTarget(params, $slideEl);\n        $targetEl.transform(transform);\n      }\n    };\n\n    const setTransition = duration => {\n      const {\n        transformEl\n      } = swiper.params.flipEffect;\n      const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n      $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n      effectVirtualTransitionEnd({\n        swiper,\n        duration,\n        transformEl\n      });\n    };\n\n    effectInit({\n      effect: 'flip',\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      perspective: () => true,\n      overwriteParams: () => ({\n        slidesPerView: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        spaceBetween: 0,\n        virtualTranslate: !swiper.params.cssMode\n      })\n    });\n  }\n\n  function EffectCoverflow(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      coverflowEffect: {\n        rotate: 50,\n        stretch: 0,\n        depth: 100,\n        scale: 1,\n        modifier: 1,\n        slideShadows: true,\n        transformEl: null\n      }\n    });\n\n    const setTranslate = () => {\n      const {\n        width: swiperWidth,\n        height: swiperHeight,\n        slides,\n        slidesSizesGrid\n      } = swiper;\n      const params = swiper.params.coverflowEffect;\n      const isHorizontal = swiper.isHorizontal();\n      const transform = swiper.translate;\n      const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n      const rotate = isHorizontal ? params.rotate : -params.rotate;\n      const translate = params.depth; // Each slide offset from center\n\n      for (let i = 0, length = slides.length; i < length; i += 1) {\n        const $slideEl = slides.eq(i);\n        const slideSize = slidesSizesGrid[i];\n        const slideOffset = $slideEl[0].swiperSlideOffset;\n        const offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;\n        let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n        let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n        let translateZ = -translate * Math.abs(offsetMultiplier);\n        let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n        if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n          stretch = parseFloat(params.stretch) / 100 * slideSize;\n        }\n\n        let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n        let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n        let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n        if (Math.abs(translateX) < 0.001) translateX = 0;\n        if (Math.abs(translateY) < 0.001) translateY = 0;\n        if (Math.abs(translateZ) < 0.001) translateZ = 0;\n        if (Math.abs(rotateY) < 0.001) rotateY = 0;\n        if (Math.abs(rotateX) < 0.001) rotateX = 0;\n        if (Math.abs(scale) < 0.001) scale = 0;\n        const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n        const $targetEl = effectTarget(params, $slideEl);\n        $targetEl.transform(slideTransform);\n        $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n        if (params.slideShadows) {\n          // Set shadows\n          let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n          let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n          if ($shadowBeforeEl.length === 0) {\n            $shadowBeforeEl = createShadow(params, $slideEl, isHorizontal ? 'left' : 'top');\n          }\n\n          if ($shadowAfterEl.length === 0) {\n            $shadowAfterEl = createShadow(params, $slideEl, isHorizontal ? 'right' : 'bottom');\n          }\n\n          if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n          if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n        }\n      }\n    };\n\n    const setTransition = duration => {\n      const {\n        transformEl\n      } = swiper.params.coverflowEffect;\n      const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n      $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n    };\n\n    effectInit({\n      effect: 'coverflow',\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      perspective: () => true,\n      overwriteParams: () => ({\n        watchSlidesProgress: true\n      })\n    });\n  }\n\n  function EffectCreative(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      creativeEffect: {\n        transformEl: null,\n        limitProgress: 1,\n        shadowPerProgress: false,\n        progressMultiplier: 1,\n        perspective: true,\n        prev: {\n          translate: [0, 0, 0],\n          rotate: [0, 0, 0],\n          opacity: 1,\n          scale: 1\n        },\n        next: {\n          translate: [0, 0, 0],\n          rotate: [0, 0, 0],\n          opacity: 1,\n          scale: 1\n        }\n      }\n    });\n\n    const getTranslateValue = value => {\n      if (typeof value === 'string') return value;\n      return `${value}px`;\n    };\n\n    const setTranslate = () => {\n      const {\n        slides,\n        $wrapperEl,\n        slidesSizesGrid\n      } = swiper;\n      const params = swiper.params.creativeEffect;\n      const {\n        progressMultiplier: multiplier\n      } = params;\n      const isCenteredSlides = swiper.params.centeredSlides;\n\n      if (isCenteredSlides) {\n        const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n        $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);\n      }\n\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = slides.eq(i);\n        const slideProgress = $slideEl[0].progress;\n        const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);\n        let originalProgress = progress;\n\n        if (!isCenteredSlides) {\n          originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);\n        }\n\n        const offset = $slideEl[0].swiperSlideOffset;\n        const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\n        const r = [0, 0, 0];\n        let custom = false;\n\n        if (!swiper.isHorizontal()) {\n          t[1] = t[0];\n          t[0] = 0;\n        }\n\n        let data = {\n          translate: [0, 0, 0],\n          rotate: [0, 0, 0],\n          scale: 1,\n          opacity: 1\n        };\n\n        if (progress < 0) {\n          data = params.next;\n          custom = true;\n        } else if (progress > 0) {\n          data = params.prev;\n          custom = true;\n        } // set translate\n\n\n        t.forEach((value, index) => {\n          t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n        }); // set rotates\n\n        r.forEach((value, index) => {\n          r[index] = data.rotate[index] * Math.abs(progress * multiplier);\n        });\n        $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n        const translateString = t.join(', ');\n        const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n        const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n        const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n        const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`; // Set shadows\n\n        if (custom && data.shadow || !custom) {\n          let $shadowEl = $slideEl.children('.swiper-slide-shadow');\n\n          if ($shadowEl.length === 0 && data.shadow) {\n            $shadowEl = createShadow(params, $slideEl);\n          }\n\n          if ($shadowEl.length) {\n            const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n            $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n          }\n        }\n\n        const $targetEl = effectTarget(params, $slideEl);\n        $targetEl.transform(transform).css({\n          opacity: opacityString\n        });\n\n        if (data.origin) {\n          $targetEl.css('transform-origin', data.origin);\n        }\n      }\n    };\n\n    const setTransition = duration => {\n      const {\n        transformEl\n      } = swiper.params.creativeEffect;\n      const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n      $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n      effectVirtualTransitionEnd({\n        swiper,\n        duration,\n        transformEl,\n        allSlides: true\n      });\n    };\n\n    effectInit({\n      effect: 'creative',\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      perspective: () => swiper.params.creativeEffect.perspective,\n      overwriteParams: () => ({\n        watchSlidesProgress: true,\n        virtualTranslate: !swiper.params.cssMode\n      })\n    });\n  }\n\n  function EffectCards(_ref) {\n    let {\n      swiper,\n      extendParams,\n      on\n    } = _ref;\n    extendParams({\n      cardsEffect: {\n        slideShadows: true,\n        transformEl: null\n      }\n    });\n\n    const setTranslate = () => {\n      const {\n        slides,\n        activeIndex\n      } = swiper;\n      const params = swiper.params.cardsEffect;\n      const {\n        startTranslate,\n        isTouched\n      } = swiper.touchEventsData;\n      const currentTranslate = swiper.translate;\n\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = slides.eq(i);\n        const slideProgress = $slideEl[0].progress;\n        const progress = Math.min(Math.max(slideProgress, -4), 4);\n        let offset = $slideEl[0].swiperSlideOffset;\n\n        if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n          swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n        }\n\n        if (swiper.params.centeredSlides && swiper.params.cssMode) {\n          offset -= slides[0].swiperSlideOffset;\n        }\n\n        let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n        let tY = 0;\n        const tZ = -100 * Math.abs(progress);\n        let scale = 1;\n        let rotate = -2 * progress;\n        let tXAdd = 8 - Math.abs(progress) * 0.75;\n        const isSwipeToNext = (i === activeIndex || i === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n        const isSwipeToPrev = (i === activeIndex || i === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n        if (isSwipeToNext || isSwipeToPrev) {\n          const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n          rotate += -28 * progress * subProgress;\n          scale += -0.5 * subProgress;\n          tXAdd += 96 * subProgress;\n          tY = `${-25 * subProgress * Math.abs(progress)}%`;\n        }\n\n        if (progress < 0) {\n          // next\n          tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n        } else if (progress > 0) {\n          // prev\n          tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n        } else {\n          tX = `${tX}px`;\n        }\n\n        if (!swiper.isHorizontal()) {\n          const prevY = tY;\n          tY = tX;\n          tX = prevY;\n        }\n\n        const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n        const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${rotate}deg)\n        scale(${scaleString})\n      `;\n\n        if (params.slideShadows) {\n          // Set shadows\n          let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n          if ($shadowEl.length === 0) {\n            $shadowEl = createShadow(params, $slideEl);\n          }\n\n          if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n        }\n\n        $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n        const $targetEl = effectTarget(params, $slideEl);\n        $targetEl.transform(transform);\n      }\n    };\n\n    const setTransition = duration => {\n      const {\n        transformEl\n      } = swiper.params.cardsEffect;\n      const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n      $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n      effectVirtualTransitionEnd({\n        swiper,\n        duration,\n        transformEl\n      });\n    };\n\n    effectInit({\n      effect: 'cards',\n      swiper,\n      on,\n      setTranslate,\n      setTransition,\n      perspective: () => true,\n      overwriteParams: () => ({\n        watchSlidesProgress: true,\n        virtualTranslate: !swiper.params.cssMode\n      })\n    });\n  } // Swiper Class\n\n\n  const modules = [Virtual, Keyboard, Mousewheel, Navigation, Pagination, Scrollbar, Parallax, Zoom, Lazy, Controller, A11y, History, HashNavigation, Autoplay, Thumb, freeMode, Grid, Manipulation, EffectFade, EffectCube, EffectFlip, EffectCoverflow, EffectCreative, EffectCards];\n  Swiper.use(modules);\n  return Swiper;\n});\n\n//# sourceURL=webpack:///./src/js/swiper-bundle.js?")}});